{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Anleitungen f\u00fcr Projekte","text":"<p>Hier werden einige Anleitungen, Hilfen und Informationen f\u00fcr und \u00fcber das Softwareentwicklungsprojekt im 3. Semester abgelegt werden. Es sollen auch immer wieder auftretende technische Fragestellungen beantwortet werden. </p>"},{"location":"#bisherige-anleitungen","title":"Bisherige Anleitungen","text":"<ul> <li> <p> Einf\u00fchrung in Git</p> <p> </p> </li> <li> <p> Einf\u00fchrung in Spring Boot</p> <p> </p> </li> <li> <p> Einrichten eines Virtuellen Servers</p> <p> </p> </li> <li> <p> Einf\u00fchrung in Vaadin</p> <p> </p> </li> <li> <p> Beginn Erstellung Frontend mit Angular</p> <p> </p> </li> <li> <p> Beginn Erstellung Backend mit Node.js</p> <p> </p> </li> <li> <p> Beginn Erstellung REST-API mit Spring Boot</p> <p> </p> </li> <li> <p> WebTech-Skript</p> <p> </p> </li> <li> <p> IKT-Skript</p> <p> </p> </li> <li> <p> Prog1-Skript</p> <p> </p> </li> <li> <p> Prog2-Skript</p> <p> </p> </li> </ul>"},{"location":"backend/","title":"Backend","text":"<p>Zur Implementierung des Backends verwenden wir in dieser Anleitung node.js. </p>"},{"location":"backend/#installation","title":"Installation","text":"<p>Dort finden Sie auch die Download-Seite von node.js f\u00fcr alle Betriebssysteme. Sollten Sie node.js auf dem virtuellen Server installieren wollen oder m\u00fcssen, dann geht dies mittels </p> <pre><code>sudo apt-get install nodejs\n</code></pre> <p><code>sudo</code> kann weggelassen werden, wenn Sie das Kommando bereits als <code>root</code> ausf\u00fchren. Nach erfolgreicher Installation sollte die Eingabe von </p> <pre><code>node -v\n</code></pre> <p>die Versionsnummer der installierten Instanz ausgeben, z.B. <code>v12.19.0</code>. </p>"},{"location":"backend/#projekt-erstellen","title":"Projekt erstellen","text":"<p>Wir erstellen uns einen Ordner <code>backend</code>. Wechseln Sie in diesen Ordner und geben Sie ein:</p> <pre><code>npm init \n</code></pre> <p>Es wird eine <code>package.json</code> erstellt. Daf\u00fcr werden Ihnen einige Fragen gestellt. Die meisten k\u00f6nnen Sie einfach mit <code>Enter</code> best\u00e4tigen (die Frage nach dem <code>test command:</code>) bleibt dann erstmal unbeantwortet. Bei der Frage nach dem <code>git repository</code> w\u00e4re es gut, wenn Sie sich bereits ein passendes Repository bei Ihrem Git-Host angelegt haben und dieses dann hier verbinden k\u00f6nnen (bei mir z.B. <code>https://github.com/jfreiheit/backend.git</code>).</p> <p>Die entstandene <code>package.json</code> k\u00f6nnte dann z.B. so aussehen:</p> <pre><code>{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Backend f\u00fcr Projekte-Anleitungen\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"start\": \"node server.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jfreiheit/backend.git\"\n  },\n  \"keywords\": [\n    \"backen\",\n    \"projekte\",\n    \"node.js\"\n  ],\n  \"author\": \"HTW FIW\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jfreiheit/backend/issues\"\n  },\n  \"homepage\": \"https://github.com/jfreiheit/backend#readme\"\n}\n</code></pre> <p>F\u00fcgen Sie nun noch die Pakete <code>express</code> (HTTP-Unterst\u00fctzung), <code>mysql</code> (MySQl-Anbindung), <code>body-parser</code> (Parsen von Daten, die per Request \u00fcbergeben werden (POST)) und <code>morgan</code> (ein HTTP-Request-Logger) hinzu:</p> <pre><code>npm install express --save\nnpm install mysql --save\nnpm install body-parser --save\nnpm install morgan --save\n</code></pre> <p>und in diesem Ordner erstellen wir mithilfe der IDE Ihrer Wahl eine Datei <code>index.js</code>. Diese Datei soll folgenden Inhalt haben (wir fangen erstmal einfach an und bauen uns einen simplen Webserver):</p> backend/index.js <pre><code>const http = require('http');\n\nconst server = http.createServer(function(request, response) {\n    response.writeHead(200, { 'content-type': 'text/plain; charset=utf-8'});\n    response.write('Hallo ');\n    response.end('Projekte !\\n')\n});\n\nserver.listen(8080, () =&gt; {\n    console.log('Server is listening to http://localhost:8080');\n});\n</code></pre> <p>Diesen k\u00f6nnen wir nun starten, indem wir im Terminal in den <code>backend</code>-Ordner wechseln und dort </p> <pre><code>node index.js\n</code></pre> <p>eingeben. Rufen Sie nun Ihren Browser auf und geben als URL <code>http://localhost:8080/</code>ein. Noch besser ist es (f\u00fcr sp\u00e4ter), wenn Sie Postman aufrufen und dort in die Zeile neben <code>GET``http://localhost:8080/' eingeben und dann auf 'Send</code> dr\u00fccken. Das Ergebnis sieht dann so aus:</p> <p></p> <p>Wenn Sie etwas an Ihrem Source Code \u00e4ndern und die \u00c4nderungen ausprobieren m\u00f6chten, m\u00fcssen Sie den <code>node</code>-Prozess im Terminal immer mit <code>Ctrl-C</code> beenden und dann mit <code>node index.js</code> erneut starten. Um dies zu umgehen, gibt es <code>nodemon</code>. Installieren Sie <code>nodemon</code> mit</p> <pre><code>npm install -g nodemon\n</code></pre> <p>und f\u00fchren Ihre Anwendung dann mit </p> <p><pre><code>nodemon index.js\n</code></pre> aus. </p>"},{"location":"buchung/","title":"Ausgabenerfassung","text":"<p>Wir zeigen eine kleine Anwendung als vollst\u00e4ndiges Beispiel. Es geht um die Erfassung und Anzeige von Ausgaben. Dazu wird eine kleine Nutzerverwaltung implementiert. Die Anwendung besteht aus einem Frontend und einem Backend. Zur persistenten Datenspeicherung wird eine MongoDB verwendet. </p>"},{"location":"buchung/#backend","title":"Backend","text":"<pre><code>mkdir backend\ncd backend\nnpm init\nnpm install cors express mongoose dotenv bcrypt express-session\nnpm install nodemon --save-dev\n</code></pre> <p>Die <code>main</code>-Datei soll <code>server.js</code> sein und wir erstellen ein <code>watch</code>-Skript, das <code>nodemon</code> startet:</p> package.json <pre><code>{\n  \"name\": \"backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Buchungen\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"watch\": \"nodemon ./server.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"J. Freiheit\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.0.0\",\n    \"express\": \"^4.17.3\",\n    \"mongoose\": \"^6.2.3\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.15\"\n  }\n}\n</code></pre>"},{"location":"buchung/#models","title":"Models","text":"<p>Zuerst erstellen wir uns mithilfe von mongoose zwei Models, ein Model f\u00fcr <code>User</code> und das andere f\u00fcr die <code>Item</code>s, die wir speichern wollen. Diese Models erstellen wir im <code>models</code>-Ordner:</p> models/user.model.jsmodels/item.model.js <pre><code>const mongoose = require('mongoose');\n\n// users Schema\nconst usersSchema = new mongoose.Schema({\n    account: String,\n    password: String\n});\n\n// Exporting our model objects\nmodule.exports = mongoose.model('User', usersSchema);\n</code></pre> <pre><code>const mongoose = require('mongoose');\n\n// items Schema\nconst itemSchema = new mongoose.Schema({\n    title: String,\n    amount: Number,\n    date: Date,\n    user_id: String\n});\n\n// Exporting our model objects\nmodule.exports = mongoose.model('Item', itemSchema);\n</code></pre> <p>Diese Modelle werden als Collections in der MongoDB verwendet. Dabei ist zu beachten, dass die Collections kleingeschrieben und als englischer Plural angelegt werden, also <code>users</code> und <code>items</code>. </p>"},{"location":"buchung/#routes","title":"Routes","text":"<p>Auf den Collections (Modelle) lassen sich in der MongoDB nun CRUD-Funktionen (Queries) ausf\u00fchren, siehe dazu z.B. hier. Wir erstellen nun einzelne REST-Endpunkte in den Routen. Dazu legen wir im <code>routes</code>-Ordner eine <code>user.route.js</code> und eine <code>item.route.js</code> wie folgt an:</p> routes/user.route.jsroutes/item.route.js <pre><code>const express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcrypt');\n\nconst User = require('../models/user.model');\n\n// get all users\nrouter.get('/', async(req, res) =&gt; {\n    const allUsers = await User.find();\n    console.log(allUsers);\n    res.send(allUsers);\n});\n\n// post one user\nrouter.post('/', async(req, res) =&gt; {\n    const saltRounds = 10;\n    let pwHash = '';\n    await bcrypt.genSalt(saltRounds, (err, salt) =&gt; {\n        bcrypt.hash(req.body.password, salt, (errHash, hash) =&gt; {\n            pwHash = hash;\n            const newUser = new User({\n                account: req.body.account,\n                password: pwHash\n            });\n            console.log('newUser', newUser);\n            newUser.save();\n            res.send(newUser);\n        });\n    });\n\n});\n\n// get one user via account and password\nrouter.post('/login/:account', async(req, res) =&gt; {\n    try {\n        const user = await User.findOne({ account: req.params.account });\n        let sendPw = req.body.password;\n        let userPW = user.password;\n        bcrypt.compare(sendPw, userPW, (err, result) =&gt; {\n            if (result) {\n                console.log('Passwort korekt!');\n                res.send(user);\n            } else {\n                console.log('falsches Passwort!');\n                res.status(403);\n                res.send({\n                    error: \"Wrong password!\"\n                });\n            }\n        });\n    } catch {\n        res.status(404);\n        res.send({\n            error: \"User does not exist!\"\n        });\n    }\n});\n\n// get one user via account\nrouter.get('/:account', async(req, res) =&gt; {\n    try {\n        const user = await User.findOne({ account: req.params.account });\n\n        console.log(req.params);\n        res.send(user);\n    } catch {\n        res.status(404);\n        res.send({\n            error: \"User does not exist!\"\n        });\n    }\n});\n\nmodule.exports = router;\n</code></pre> <pre><code>const express = require('express');\nconst router = express.Router();\n\nconst Item = require('../models/item.model');\n\n// post one item\nrouter.post('/', async(req, res) =&gt; {\n    const newItem = new Item({\n        title: req.body.titel,\n        amount: req.body.betrag,\n        date: req.body.datum,\n        user_id: req.session.user_id\n    })\n    await newItem.save();\n    res.send(newItem);\n\n});\n\n// get all items for user_id\nrouter.get('/', async(req, res) =&gt; {\n    try {\n        const item = await Item.find({ user_id: req.session.user_id });\n        res.send(item);\n    } catch {\n        res.status(404);\n        res.send({\n            error: \"User does not exist!\"\n        });\n    }\n});\n\n// delete one item via id\nrouter.delete('/:id', async(req, res) =&gt; {\n    try {\n        await Item.deleteOne({ _id: req.params.id })\n        res.status(204).send()\n    } catch {\n        res.status(404)\n        res.send({ error: \"Item does not exist!\" })\n    }\n});\n\nmodule.exports = router;\n</code></pre> <p>F\u00fcr die <code>User</code> werden also folgende Anfragen zur Verf\u00fcgung gestellt:</p> <ul> <li>Eine <code>GET</code>-Anfrage, die alle in der Collection <code>users</code> enthaltenen Eintr\u00e4ge liefert. </li> <li>Eine <code>POST</code>-Anfrage, der im <code>body</code> der Anfrage ein <code>account</code> und ein <code>password</code> \u00fcbermittelt wird. Das Passwort wird mithilfe von <code>bcrypt</code> in einen Hashwert umgewandelt und dieser Hashwert wird gespeichert. </li> <li>Eine <code>POST</code>-Anfrage unter <code>/login/:account</code>, wobei <code>:account</code> ein Parameter ist. Nach diesem <code>account</code> wird in der Collection <code>users</code> gesucht und der zugeh\u00f6rige Datensatz ermittelt. Im <code>body</code> der Anfrage wird das <code>password</code> mitgesendet. Mithilfe von <code>bcrypt</code> wird \u00fcberpr\u00fcft, ob das gesendete Passwort mit dem als Hashwert gespeicherten Passwort \u00fcbereinstimmt. </li> <li>Eine <code>GET</code>-Anfrage, der der <code>account</code>-Name als Parameter geschickt wird. Die <code>_id</code> des entsprechenden Datensatzes wird zur\u00fcckgeschickt, ohne eine Passwortabfrage. </li> </ul> <p>F\u00fcr die <code>Item</code>s werden folgende Anfragen zur Verf\u00fcgung gestellt:</p> <ul> <li>Eine <code>POST</code>-Anfrage zur Erzeugung eines <code>item</code> in der <code>items</code>-Collection. Die zum <code>item</code> geh\u00f6renden Daten werden im <code>body</code> der Anfrage \u00fcbergeben. </li> <li>Eine <code>GET</code>-Anfrage f\u00fcr alle <code>item</code>s, die zu einer bestimmten <code>user_id</code> geh\u00f6ren. Diese <code>user_id</code> wird aus der <code>Session</code> ermittelt. </li> <li>Eine <code>DELETE</code>-Anfrage, der eine <code>_id</code> als Parameter \u00fcbergeben wird. Der Datensatz mit dieser <code>_id</code> wird gel\u00f6scht. </li> </ul>"},{"location":"buchung/#serverjs","title":"server.js","text":"<p>Die <code>server.js</code> sieht dann wie folgt aus:</p> server.js <pre><code>const express = require('express');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\nconst session = require('express-session');\nrequire('dotenv').config();\n\n// Routes to Handle Request\nconst userRoute = require('./routes/user.route');\nconst itemRoute = require('./routes/item.route');\n\n// Setup Express.js and Cors\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\napp.use(session({\n    secret: 'key that will sign the cookie',\n    resave: false,\n    saveUninitialized: false\n}));\n\n// API Routes\napp.use('/user', userRoute);\napp.use('/item', itemRoute);\n\nconst port = process.env.PORT || 4000;\napp.listen(port, () =&gt; {\n    console.log('Connected to port ' + port)\n})\n\n// connect to mongoDB\nmongoose.connect(process.env.DB_CONNECTION, { useNewUrlParser: true, useUnifiedTopology: true })\n    .then(\n        () =&gt; { console.log('connected to DB'); },\n        err =&gt; { console.error.bind(console, 'connection error:') }\n    );\n</code></pre> <p>In der <code>server.js</code> wird die URL zur MongoDB aus der <code>.env</code>-Datei ausgelesen:</p> .env <pre><code>DB_CONNECTION = mongodb://127.0.0.1:27017/bookings\n</code></pre> <p>Das Backend l\u00e4sst sich mithilfe von <code>npm run watch</code> starten. Auf der Konsole erscheint dann folgende Ausgabe:</p> <pre><code>&gt; backend@1.0.0 watch\n&gt; nodemon ./server.js\n\n[nodemon] 2.0.15\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node ./server.js`\nConnected to port 4000\nconnected to DB\n</code></pre>"},{"location":"buchung/#user-endpunkte-testen-mit-postman","title":"user-Endpunkte testen mit Postman","text":"<p>Wir testen die Endpunkte f\u00fcr <code>user</code> mit Postman. </p>"},{"location":"buchung/#c-reate-user","title":"C-reate User","text":"<p>Wir k\u00f6nnen z.B. neue <code>user</code> anlegen. Dazu geben wir in Postman die URL <code>http://localhost:4000/user</code> ein und w\u00e4hlen als Anfragemethode <code>POST</code>. Im <code>body</code> (klicken Sie auf <code>Body</code> und <code>raw</code> und w\u00e4hlen Sie <code>JSON</code>) geben wir z.B. ein: </p> <pre><code>{ \n    \"account\": \"test-account\", \n    \"password\": \"test-password\"\n}\n</code></pre> <p>Wenn wir auf <code>Send</code> klicken, wird ein neuer Datensatz erzeugt, in dem das <code>password</code> einem Hashwert entspricht und der eine automatisch erzeugte <code>_id</code> besitz, z.B. </p> <pre><code>{\n    \"account\": \"test-account\",\n    \"password\": \"$2b$10$nfEVNCHfvKdcvn7k9/xaEejyTj.MagZVkqtTYcCmtLtQAjSmiqCqK\",\n    \"_id\": \"621610740784dc1af03613d1\"\n}\n</code></pre> <p>Hier nochmal als Bild:</p> <p></p> <p>\u00d6ffnen Sie zur Kontrolle auch MongoDB Compass und verbinden Sie sich dort mit <code>localhost:27017</code>. In der <code>booking</code>-Datenbank erscheint in der Collection <code>users</code> der neue Eintrag:</p> <p></p> <p>Der neue Eintrag erscheint \u00fcbrigens auch in der Konsole, da wir in der <code>routes/user.route.js</code> in Zeile <code>25</code> die entsprechende Konsolenausgabe implementiert hatten:</p> <pre><code>newUser {\n  account: 'test-account',\n  password: '$2b$10$nfEVNCHfvKdcvn7k9/xaEejyTj.MagZVkqtTYcCmtLtQAjSmiqCqK',\n  _id: new ObjectId(\"621610740784dc1af03613d1\")\n}\n</code></pre>"},{"location":"buchung/#r-ead-one-user","title":"R-ead one User","text":"<p>Ein gespeicherter <code>user</code> mit z.B. dem <code>account</code> <code>test-account</code> kann angefragt werden, indem eine <code>POST</code>-Anfrage an die URL <code>http://localhost:4000/user/login/test-account</code> gestellt und im <code>body</code> der Anfrage das Passwort \u00fcbergeben wird.</p> <p></p> <p>Wir als <code>account</code> ein nicht existierender Nutzeraccount \u00fcbergeben, z.B. <code>http://localhost:4000/user/login/wrong-account</code>, erscheint als Response </p> <pre><code>{\n    \"error\": \"User does not exist!\"\n}\n</code></pre> <p>Der HTTP-Fehlercode ist <code>404 Not found</code>.</p> <p>Existiert zwar der <code>account</code>, jedoch ist das im <code>body</code> \u00fcbergebene Passwort falsch, erscheint als Response </p> <pre><code>{\n    \"error\": \"Wrong password!\"\n}\n</code></pre> <p>mit dem HTTP-Fehlercode <code>403 Forbidden</code>.</p>"},{"location":"buchung/#r-ead-one-user_id","title":"R-ead one user_id","text":"<p>Um die <code>user_id</code> zu einem gegebenen <code>account</code> zu ermitteln, wird eine <code>GET</code>-Anfrage gestellt, der der <code>account</code> als Parameter der URL \u00fcbergeben wird, also z.B. </p> <pre><code>http://localhost:4000/user/test-account\n</code></pre> <p>Als Antwort erh\u00e4lt man <code>\"621610740784dc1af03613d1\"</code> mit dem HTTP-Code <code>200 OK</code>. <code>GET</code>-Anfragen k\u00f6nnen auch direkt im Browser gestellt werden, indem man einfach die URL eingibt. </p>"},{"location":"buchung/#r-ead-all-users","title":"R-ead all users","text":"<p>Alle in der Datenbank gespeicherten <code>user</code> k\u00f6nnen \u00fcber die <code>GET</code>-Anfrage <code>http://localhost:4000/user</code> ermittelt werden. Als Response wird ein Arry zur\u00fcckgegeben, das alle <code>user</code> als JSON enth\u00e4lt, z.B. </p> <pre><code>[\n    {\n        \"_id\": \"621610740784dc1af03613d1\",\n        \"account\": \"test-account\",\n        \"password\": \"$2b$10$nfEVNCHfvKdcvn7k9/xaEejyTj.MagZVkqtTYcCmtLtQAjSmiqCqK\",\n        \"__v\": 0\n    },\n    {\n        \"_id\": \"621622d70784dc1af03613db\",\n        \"account\": \"test-account-2\",\n        \"password\": \"$2b$10$GcLuHnE1fImdvxwjkPje1.9jnbNBQXzXi3lkmMq462WZrITfV7GFe\",\n        \"__v\": 0\n    }\n]\n</code></pre>"},{"location":"buchung/#item-endpunkte-testen-mit-postman","title":"item-Endpunkte testen mit Postman","text":"<p>Wir testen die Endpunkte f\u00fcr <code>item</code> mit Postman. Dies ist teilweise ein wenig aufwendiger, da wir dort bereits mit <code>Sessions</code> arbeiten.</p>"},{"location":"buchung/#c-reate-item","title":"C-reate Item","text":"<p>So ist beispielsweise das Erstellen eines neuen Items so definiert, dass <code>title</code>, <code>amount</code> und <code>date</code> aus dem <code>body</code> der Anfrage entnommen werden (siehe Zeilen <code>9-11</code> in <code>item.route.js</code>), die <code>user_id</code> der Nutzerin, die dieses <code>Item</code> erstellt, wird jedoch aus der <code>Session</code> ausgelesen. </p>"},{"location":"buchung/#frontend","title":"Frontend","text":"<pre><code>ng new frontend\n</code></pre> <pre><code>cd frontend\nng add ngx-bootstrap\nng add @angular/material\nng generate @angular/material:address-form input\nng generate @angular/material:address-form login\nng generate @angular/material:table table\nng generate @angular/material:navigation nav\nng generate @angular/material:dashboard home\nng g c pagenotfound\nng g interface models/user\nng g interface models/item\nng g service services/backend\nng g service services/auth\nng g guard guards/auth\n</code></pre> <p>F\u00fcr den <code>AuthGuard</code> <code>CanActivate</code> w\u00e4hlen. </p>"},{"location":"buchung/#routing","title":"Routing","text":"<p>Zun\u00e4chst einen Service, \u00fcber den wir sp\u00e4ter verwalten, ob eine Nutzerin eingelogged ist oder nicht. Wir geben zun\u00e4chst immer ein <code>true</code> zur\u00fcck, damit alle Routen angew\u00e4hlt werden k\u00f6nnen. </p> services/auth.service.ts <pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor() {}\n\n  loggedIn():boolean {\n    return true;\n  }\n}\n</code></pre> <p>Der <code>AuthGuard</code> gibt f\u00fcr die <code>canActivate()</code>-Funktion ein <code>true</code> zur\u00fcck, wenn die Nutzerin eingelogged ist. Wenn nicht, wird die Route  nach <code>/login</code> umgeleitet und ein <code>false</code> zur\u00fcckgegeben. </p> guards/auth.guard.ts <pre><code>import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable&lt;boolean | UrlTree&gt; | Promise&lt;boolean | UrlTree&gt; | boolean | UrlTree {\n    if (this.authService.loggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n}\n</code></pre> <p>Die Routen werden wie folgt definiert. Wenn Sie im <code>auth.service</code> anstelle von <code>return true</code> ein <code>false</code> zur\u00fcckgeben, k\u00f6nnen die Komponenten <code>Home</code>, <code>Input</code> und <code>Table</code> nicht ausgew\u00e4hlt werden, sondern Sie werden dann stets auf die <code>LoginComponent</code> umgeleitet. </p> app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { PagenotfoundComponent } from './pagenotfound/pagenotfound.component';\nimport { TableComponent } from './table/table.component';\nimport { InputComponent } from './input/input.component';\n\nconst routes: Routes = [\n    { path: '', component: HomeComponent, pathMatch: 'full', canActivate: [AuthGuard] },\n    { path: 'login', component: LoginComponent },\n    { path: 'input', component: InputComponent, canActivate: [AuthGuard] },\n    { path: 'table', component: TableComponent, canActivate: [AuthGuard] },\n    { path: '**', component: PagenotfoundComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>In der <code>AppComponent</code> wird statisch die <code>NavComponent</code> eingebunden. Man h\u00e4tte also auch gleich die <code>AppComponent</code> zur <code>NavComponent</code> machen k\u00f6nnen. </p> app.component.html <pre><code>&lt;app-nav&gt;&lt;/app-nav&gt;\n</code></pre> <p>In der <code>NavComponent</code> werden die <code>routerLink</code> f\u00fcr die einzelnen Men\u00fceintr\u00e4ge definiert und es wird die <code>&lt;router-outlet&gt;</code>-Direktive eingebunden, in die dann dynamisch die jeweils aufgerufene Komponente eingebunden wird. </p> nav.component.html <pre><code>&lt;mat-sidenav-container class=\"sidenav-container\"&gt;\n  &lt;mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\"&gt;\n    &lt;mat-toolbar&gt;Menu&lt;/mat-toolbar&gt;\n    &lt;mat-nav-list&gt;\n      &lt;a mat-list-item routerLink=\"/\" routerLinkActive=\"active\"&gt;Home&lt;/a&gt;\n      &lt;a mat-list-item routerLink=\"/login\" routerLinkActive=\"active\"&gt;Login&lt;/a&gt;\n      &lt;a mat-list-item routerLink=\"/input\" routerLinkActive=\"active\"&gt;Buchen&lt;/a&gt;\n      &lt;a mat-list-item routerLink=\"/table\" routerLinkActive=\"active\"&gt;\u00dcbersicht&lt;/a&gt;\n    &lt;/mat-nav-list&gt;\n  &lt;/mat-sidenav&gt;\n  &lt;mat-sidenav-content&gt;\n    &lt;mat-toolbar color=\"primary\"&gt;\n      &lt;button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"&gt;\n        &lt;mat-icon aria-label=\"Side nav toggle icon\"&gt;menu&lt;/mat-icon&gt;\n      &lt;/button&gt;\n      &lt;span&gt;Ausgabenerfassung&lt;/span&gt;\n    &lt;/mat-toolbar&gt;\n    &lt;!-- Add Content Here --&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  &lt;/mat-sidenav-content&gt;\n&lt;/mat-sidenav-container&gt;\n</code></pre>"},{"location":"buchung/#login","title":"Login","text":"<p>Ein Interface f\u00fcr <code>User</code>:</p> models/user.ts <pre><code>export interface User {\n    _id: string;\n    account: string;\n    password: string;\n}\n</code></pre> <p>Reactive Formular f\u00fcr <code>Login</code>:</p> login.component.tslogin.component.htmllogin.component.css <pre><code>import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { User } from '../models/user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm = this.fb.group({\n    account: [null, Validators.required],\n    password: [null, Validators.required]\n  });\n\n  hide = true;\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    let user: User = {\n      \"account\": this.loginForm.value.account,\n      \"password\": this.loginForm.value.password\n    }\n    alert(user.account + \" \" + user.password);\n  }\n}\n</code></pre> <pre><code>&lt;form [formGroup]=\"loginForm\" novalidate (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;mat-card class=\"login-card\"&gt;\n    &lt;mat-card-header&gt;\n      &lt;mat-card-title&gt;Login&lt;/mat-card-title&gt;\n    &lt;/mat-card-header&gt;\n    &lt;mat-card-content&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field class=\"full-width\"&gt;\n            &lt;input matInput placeholder=\"User name\" formControlName=\"account\"&gt;\n            &lt;mat-error *ngIf=\"loginForm.controls['account'].hasError('required')\"&gt;\n              user name is &lt;strong&gt;required&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field class=\"full-width\"&gt;\n            &lt;mat-label&gt;Enter your password&lt;/mat-label&gt;\n            &lt;input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\"&gt;\n            &lt;button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\"&gt;\n              &lt;mat-icon&gt;{{hide ? 'visibility_off' : 'visibility'}}&lt;/mat-icon&gt;\n            &lt;/button&gt;\n            &lt;mat-error *ngIf=\"loginForm.controls['password'].hasError('required')\"&gt;\n              password is &lt;strong&gt;required&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/mat-card-content&gt;\n    &lt;mat-card-actions&gt;\n      &lt;button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!loginForm.valid\"&gt;Login&lt;/button&gt;\n    &lt;/mat-card-actions&gt;\n  &lt;/mat-card&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>.full-width {\n  width: 96%;\n  margin: 1% 4% auto;\n}\n\nform {\n  margin: 4% 4%;\n}\n\n.login-card {\n  min-width: 120px;\n  margin: 4% auto;\n}\n\n.mat-card-actions {\n  margin: 4% 4%;\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n}\n\n.col {\n  flex: 1;\n  margin-right: 4%;\n}\n\n.col:last-child {\n  margin-right: 4%;\n}\n</code></pre> <p></p>"},{"location":"buchung/#buchung","title":"Buchung","text":"<p>Ein Interface f\u00fcr ein Buchungs-<code>Item</code>:</p> models/item.ts <pre><code>export interface Item {\n  titel: string;\n  betrag: number;\n  datum: Date;\n}\n</code></pre> <p>Im Formular wird der Datepicker von Angular Materail verwendet. Au\u00dferdem wollen wir die deutsche Darstellung des Datums und ben\u00f6tigen daf\u00fcr DatePipe. Diese Module m\u00fcssen zun\u00e4chst in der <code>app.module.ts</code> importiert werden:</p> app.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { InputComponent } from './input/input.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\nimport { TableComponent } from './table/table.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { NavComponent } from './nav/nav.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { HomeComponent } from './home/home.component';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { PagenotfoundComponent } from './pagenotfound/pagenotfound.component';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { DatePipe } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InputComponent,\n    LoginComponent,\n    TableComponent,\n    NavComponent,\n    HomeComponent,\n    PagenotfoundComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatGridListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatDatepickerModule\n  ],\n  providers: [DatePipe],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code></pre> <p>Reactive Formular f\u00fcr <code>Input</code>:</p> input.component.tsinput.component.htmlinput.component.css <pre><code>import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { DatePipe } from '@angular/common';\nimport { DateAdapter } from '@angular/material/core';\nimport { Item } from '../models/item';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css']\n})\nexport class InputComponent {\n  today = new Date();\n\n  inputForm = this.fb.group({\n    titel: [null, Validators.required],\n    betrag: [null, Validators.required],\n    datum: [this.datepipe.transform(this.today, 'yyyy-MM-dd'), Validators.required]\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private datepipe: DatePipe,\n    private dateAdapter: DateAdapter&lt;Date&gt;\n    ){\n      this.dateAdapter.setLocale('de-DE');\n  }\n\n  onSubmit(): void {\n    let item: Item = {\n      \"titel\": this.inputForm.value.titel,\n      \"betrag\": this.inputForm.value.betrag,\n      \"datum\": this.inputForm.value.datum\n    }\n    alert(item.titel + \" \" + item.betrag + \" \" + item.datum);\n  }\n}\n</code></pre> <pre><code>&lt;form [formGroup]=\"inputForm\" novalidate (ngSubmit)=\"onSubmit()\"&gt;\n  &lt;mat-card class=\"booking-card\"&gt;\n    &lt;mat-card-header&gt;\n      &lt;mat-card-title&gt;Buchung&lt;/mat-card-title&gt;\n    &lt;/mat-card-header&gt;\n    &lt;mat-card-content&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field class=\"full-width\"&gt;\n            &lt;input matInput placeholder=\"title\" formControlName=\"titel\"&gt;\n            &lt;mat-error *ngIf=\"inputForm.controls['titel'].hasError('required')\"&gt;\n              title is &lt;strong&gt;required&lt;/strong&gt;\n            &lt;/mat-error&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"row\"&gt;\n        &lt;div class=\"col first\"&gt;\n          &lt;mat-form-field class=\"full-width\"&gt;\n            &lt;input matInput type=\"number\"  onfocus=\"this.select()\" placeholder=\"amount\" formControlName=\"betrag\"&gt;\n            &lt;mat-icon matSuffix class=\"smaller\"&gt;euro_symbol&lt;/mat-icon&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col\"&gt;\n          &lt;mat-form-field class=\"full-width\"&gt;\n            &lt;mat-label&gt;date&lt;/mat-label&gt;\n            &lt;input matInput [matDatepicker]=\"datum\" formControlName=\"datum\"&gt;\n            &lt;mat-datepicker-toggle matSuffix [for]=\"datum\"&gt;&lt;/mat-datepicker-toggle&gt;\n            &lt;mat-datepicker #datum&gt;&lt;/mat-datepicker&gt;\n          &lt;/mat-form-field&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/mat-card-content&gt;\n    &lt;mat-card-actions&gt;\n      &lt;button mat-raised-button color=\"primary\" type=\"submit\"&gt;Buchen&lt;/button&gt;\n    &lt;/mat-card-actions&gt;\n  &lt;/mat-card&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>.full-width {\n  width: 96%;\n  margin: 1% 4% auto;\n}\n\nform {\n  margin: 4% 4%;\n}\n\n.booking-card {\n  min-width: 120px;\n  margin: 4% auto;\n}\n\n.mat-card-actions {\n  margin: 4% 4%;\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n}\n\n.first {\n  margin-left: 2%;\n}\n\n.col {\n  flex: 1;\n  margin-right: 4%;\n}\n\n.col:last-child {\n  margin-right: 4%;\n}\n\n.smaller {\n  transform: scale(0.7);\n}\n</code></pre> <p></p>"},{"location":"buchung/#authservice","title":"AuthService","text":"<p>Wir erweitern die <code>Login</code>-Komponente und den <code>Auth</code>-Service, um die Informationen zur eingeloggten Nutzerin zu verwalten.</p>"},{"location":"frontend/","title":"Frontend","text":"<p>Um das Frontend zu erstellen, k\u00f6nnen Sie auf verschiedene JavaScript-Frameworks zur\u00fcckgreifen, die sich in den letzten Jahren etabliert haben: </p> <ul> <li>Angular </li> <li>React.js </li> <li>Vue.js </li> <li>Electron</li> </ul> <p>Diese geh\u00f6ren zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen. In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Wir zeigen hier exemplarisch den Beginn der Erstellung eines Frontends am Beispiel von Angular. </p>"},{"location":"frontend/#installationen","title":"Installationen","text":"<p>Sie ben\u00f6tigen den Paketmanager <code>npm</code>. Laden sie sich daf\u00fcr <code>node.js</code> hier herunter und installieren Sie es. Nach erfolgreicher Installation sollte sowohl </p> <pre><code>node -v\n</code></pre> <p>funktionieren und eine Versionsnummer ausgeben (z.B. <code>v13.3.0</code> - aktuell stabile Version ist aber <code>v12.19.x</code>) als auch </p> <pre><code>npm -v\n</code></pre> <p>(z.B. <code>6.14.8</code>). </p> <p>Au\u00dferdem ben\u00f6tigen Sie das Angular-Command-Line-Interface (CLI), das Sie mithilfe des Befehls </p> <pre><code>npm install -g @angular/cli \n</code></pre> <p>installieren. Danach sollte </p> <pre><code>ng --version \n</code></pre> <p>funktionieren und Ihnen etwas in dieser Art ausgeben:</p> <pre><code>     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n  / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n                |___/\n\n\nAngular CLI: 11.0.0\nNode: 12.19.0\nOS: darwin x64\n\nAngular: 11.0.0\n... animations, cli, common, compiler, compiler-cli, core, forms\n... language-service, platform-browser, platform-browser-dynamic\n... router\nIvy Workspace: Yes\n\nPackage                         Version\n---------------------------------------------------------\n@angular-devkit/architect       0.1100.0\n@angular-devkit/build-angular   0.1100.0\n@angular-devkit/core            11.0.0\n@angular-devkit/schematics      11.0.0\n@angular/cdk                    9.2.4\n@angular/material               9.2.4\n@schematics/angular             11.0.0\n@schematics/update              0.1100.0\nrxjs                            6.6.3\ntypescript                      4.0.5\n</code></pre> <p>Jetzt k\u00f6nnen wir unser erstes Projekt erstellen. </p>"},{"location":"frontend/#projekt-erstellen","title":"Projekt erstellen","text":"<p>Wir wollen ein Projekt namens <code>frontend</code> erstellen. Wechseln Sie in den Ordner, in dem Sie dieses Projekt erstellen wollen. Geben Sie dann ein:</p> <pre><code>ng new frontend\n</code></pre> <p>Sie werden nun gefragt, ob verschiedene Pakete hinzugef\u00fcgt werden sollen, z.B.</p> <pre><code>? Would you like to add Angular routing? Yes\n? Which stylesheet format would you like to use? CSS\n</code></pre>"},{"location":"frontend/#ide","title":"IDE","text":"<p>Dieses Projekt k\u00f6nnen Sie mit der IDE Ihrer Wahl \u00f6ffnen. Ich empfehle</p> <ul> <li>IntelliJ IDEA</li> <li>Visual Studio Code</li> <li>WebStorm</li> <li>PhpStorm</li> <li>Sublime Text</li> <li>Atom</li> </ul>"},{"location":"frontend/#git","title":"git","text":"<p>Beachten Sie, dass das neue erstellte Projekt bereits von <code>git</code> verwaltet wird, d.h. <code>frontend</code> entspricht bereits Ihrem lokalen Repository. Auch die <code>.gitignore</code> ist bereits erstellt und passt so. Um dieses Repository nach z.B. <code>GitHub</code> zu pushen, erstellen Sie sich dort ein Repository <code>frontend</code> (hier lautet die Remote-Repository-URL <code>https://github.com/jfreiheit/frontend.git</code> - bei Ihnen nat\u00fcrlich anders.) Im Ordner <code>projekte</code> f\u00fchren Sie dann aus:</p> <pre><code>git add .\ngit commit -m \"first commit\"\ngit remote add origin https://github.com/jfreiheit/frontend.git\ngit push -u origin master\n</code></pre> <p>Dort, wo <code>https://github.com/jfreiheit/frontend.git</code> steht, setzen Sie Ihre Remote-Repository-URL ein. Von nun an m\u00fcssen Sie stets nur noch </p> <pre><code>git add .\ngit commit -m \"commit-message\"\ngit push\n</code></pre> <p>ausf\u00fchren, um Ihre aktuelle Version auf das Remote-Repository zu pushen.</p>"},{"location":"frontend/#anwendung-starten","title":"Anwendung starten","text":"<p>Um die Anwendung zu starten, w\u00e4hlen Sie entweder in Ihrer IDE den entsprechenden Run-Button aus (neben dem gr\u00fcnen Pfeil steht so etwas wie <code>Angular CLI Server</code>) oder Sie rufen in Ihrem <code>frontend</code>-Ordner</p> <pre><code>ng serve \n</code></pre> <p>auf. Nachdem das Compilieren erfolgreich war, geben Sie in den Browser die URL <code>http://localhost:4200/</code> ein. Es erscheint:</p> <p></p> <p>Um diese Ansicht zu \u00e4ndern, \u00f6ffnen wir in unserer IDE die Datei <code>/frontend/src/app/app.component.html</code>, d.h. in Ihrem Projekt <code>frontend</code> klappen Sie <code>src</code> auf und dann <code>app</code>. Darin befinden sich verschiedene <code>app.*</code>-dateien. Sie \u00f6ffnen <code>app.component.html</code> im Editor-Fenster.</p> <p>L\u00f6schen Sie nun den gesamten Inhalt der Datei au\u00dfer <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. F\u00fcgen Sie oberhalb von <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> eine \u00dcberschrift <code>&lt;h1&gt;This is app&lt;/h1&gt;</code> hinzu. Die <code>app.component.html</code> sieht jetzt so aus:</p> app.component.html <pre><code>&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Beachten Sie, dass Sie im Browser die Seite gar nicht selbst neu laden m\u00fcssen, sondern dass diese sich selbst\u00e4ndig aktualisiert. </p>"},{"location":"frontend/#single-page-application","title":"Single Page Application","text":"<p>Wenn wir eine Anwendung mit Angular erstellen, dann handelt es sich dabei um eine sogenannte Single Page Application (SPA), d.h. es wird genau eine Seite vom Webserver geladen und alle Inhalte werden in diese Seite (nach-)geladen, je nach Nutzerinteraktion. Die hier geladene Seite ist die <code>index.html</code>, die in unserem Projekte-Ordner <code>frontend</code>liegt. Sie sieht so aus:</p> index.html <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"utf-8\"&gt;\n      &lt;title&gt;Frontend&lt;/title&gt;\n      &lt;base href=\"/\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;app-root&gt;&lt;/app-root&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Das Element <code>&lt;app-root&gt;</code> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor). </p>"},{"location":"frontend/#prefix-andern-optional","title":"Prefix \u00e4ndern - optional","text":"<p><code>app</code>ist dabei ein Prefix, der f\u00fcr die gesamte Anwendung gilt. Diesen Prefix k\u00f6nnen Sie \u00e4ndern. \u00d6ffnen Sie dazu die Datei <code>angular.json</code>, die sich im Projekt-Ordner <code>frontend</code> befindet. Diese Datei enth\u00e4lt die zentrale Konfiguration Ihres Projektes. Sie sieht wie folgt aus (Ausschnitt):</p> angular.json <pre><code>{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1, \n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"frontend\": {\n      \"projectType\": \"application\",\n      \"schematics\": {},\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"prefix\": \"app\",\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/frontend\",\n            \"index\": \"src/index.html\",\n</code></pre> <p>\u00c4ndern Sie den Prefix in der hell markierten Zeile auf z.B. \"htw\" (andere Projekte vielleicht auf \"bvg\" oder \"bsr\"). Au\u00dferdem muss auch noch die <code>tslint.json</code> angepasst werden:</p> tslint.json <pre><code>{\n  \"extends\": \"tslint:recommended\",\n  \"rules\": {\n    \"array-type\": false,\n    \"arrow-parens\": false,\n    \"deprecation\": {\n      \"severity\": \"warning\"\n    },\n    \"component-class-suffix\": true,\n    \"contextual-lifecycle\": true,\n    \"directive-class-suffix\": true,\n    \"directive-selector\": [\n      true,\n      \"attribute\",\n      \"htw\",\n      \"camelCase\"\n    ],\n    \"component-selector\": [\n      true,\n      \"element\",\n      \"htw\",\n      \"kebab-case\"\n    ],\n    \"import-blacklist\": [\n      true,\n</code></pre> <p>Dort wo in den hervorgehobenen Zeilen nun das neue Prefix \"htw\" steht, stand vorher \"app\". In der <code>index.html</code> und in der <code>app.component.ts</code> auch noch \u00e4ndern. Ab dann ist die Verwendung von \"htw\" als Prefix einegrichtet. Sie k\u00f6nnen es aber auch bei \"app\" belassen. Es soll an dieser Stelle einem besseren Verst\u00e4ndnis des Prinzips dienen.</p> index.htmlapp/app.component.ts <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"utf-8\"&gt;\n      &lt;title&gt;Frontend&lt;/title&gt;\n      &lt;base href=\"/\"&gt;\n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n      &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;htw-root&gt;&lt;/htw-root&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>import { Component } from '@angular/core';\n@Component({\n  selector: 'htw-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n</code></pre>"},{"location":"frontend/#komponenten-selektoren","title":"Komponenten-Selektoren","text":"<p>Nochmal zur\u00fcck zu unserer <code>index.html</code> - der single page, die vom Webserver geladen wird und in die alle weiteren Komponenten eingebunden werden. Wir haben dort nun also den Komponenten-Selektor <code>&lt;htw-root&gt;&lt;/htw-root&gt;</code>. In diesen Selektor wird nun dir <code>root</code>-Komponente (<code>app.component</code>) geladen. Dieser Selektor wird durch die <code>root</code>-Komponente ersetzt. Das ist unsere <code>app/app.component.*</code>. Eine solche Komponente besteht immer aus einer <code>css</code>-, einer <code>html</code>- und einer <code>ts</code>-Datei. Es wird also in diesen Komponenten-Selektor der HTML-Code der <code>app.component.html</code> eingebunden. Das sehen Sie auch, wenn Sie die Developer-Tools an Ihrem Browser \u00f6ffnen und sich den Quellcode der aktuellen Anwendung anschauen:   </p>"},{"location":"frontend/#neue-komponente-erzeugen","title":"neue Komponente erzeugen","text":"<p>Wir erzeugen uns eine neue Komponente mit dem Namen <code>liste</code> und verwenden daf\u00fcr die Angular-CLI. Im Terminal geben Sie innerhalb des Projektordners <code>frontend</code> dazu den Befehl</p> <pre><code>ng generate component liste\n</code></pre> <p>In dem Befehl k\u00f6nnen Sie <code>generate</code> auch durch <code>g</code> und <code>component</code> durch <code>c</code> abk\u00fcrzen. Es h\u00e4tte also auch <code>ng g c liste</code> gereicht. Dadurch entsteht im <code>src/app</code>-Ordner eine neue Komponente <code>liste</code> (ein neuer Ordner <code>liste</code>), die folgende Dateien enth\u00e4lt:</p> <ul> <li><code>liste.component.css</code> - spezielle CSS-Definitionen nur f\u00fcr die Komponente</li> <li><code>liste.component.html</code> - HTML-Inhalt der Komponente (Ansicht, View oder Template genannt)</li> <li><code>liste.component.spec.ts</code> - Spezifikation f\u00fcr das Testen</li> <li><code>liste.component.ts</code> - die TypeScript-Datei der Komponente</li> </ul> <p>Angenommen, wir definieren uns f\u00fcr unsere neue Komponente in <code>liste.component.css</code> CSS-Eigenschfaten und angenommen, binden in <code>app.component.html</code> die neue Komponente \u00fcber ihren Komponenten-Selektor <code>&lt;htw-liste&gt;&lt;/htw-liste&gt;</code> ein: </p> src/app/app.component.htmlsrc/app/liste/liste.component.css <pre><code>&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;htw-liste&gt;&lt;/htw-liste&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <pre><code>p {\n  border: red 3px solid;\n  color: red;\n}\n</code></pre> <p>, dann sieht unsere Anwenung so aus: </p> <p>In die <code>index.html</code> wird also die <code>app.component.*</code> (\u00fcber den Komponenten-Selektor <code>&lt;htw-root&gt;</code>) eingebunden und in die <code>app.component.html</code> wird die <code>liste.component.*</code> (\u00fcber den Komponenten-Selektor <code>&lt;htw-liste&gt;</code>) eingebunden. So k\u00f6nnen Sie Komponenten beliebig verschachteln. </p>"},{"location":"frontend/#css-framework-verwenden","title":"CSS-Framework verwenden","text":"<p>Es ist empfehlenswert, f\u00fcr ein mordernes und einheitliches Design ein CSS-Framework zu verwenden. Die Auswahl unter solchen Frameworks ist gro\u00df. Hier einige Empfehlungen: </p> <ul> <li>Bootstrap</li> <li>SemanticUI</li> <li>Materialize CSS</li> <li>Foundation</li> </ul> <p>Wir wollen hier exemplarisch einmal SemanticUI einbinden. Geben Sie dazu im Terminal in dem <code>frontend</code>-Verzeichnis </p> <pre><code>npm install semantic-ui-css\n</code></pre> <p>ein. Sollten Sie die Meldung bekommen, dass Paket bedenklich ist (<code>found 1 high severity vulnerability</code>), geben Sie danach noch <code>npm audit fix</code> ein. Durch diese Anweisung werden die ben\u00f6tigten Style-Dateien geladen und unter dem Ordner <code>node_modules/semantic-ui-css</code> gespeichert. Diese m\u00fcssen jetzt nur noch in das Projekt eingebunden werden. \u00d6ffnen Sie dazu in Ihrer IDE die Datei <code>angular.json</code>. Bei dieser Datei handelt es sich um eine JSON-Datei, die f\u00fcr die Konfiguration unserer Angular-Anwendung zust\u00e4ndig ist. In der <code>angular.json</code>-Datei \u00e4ndern wir unter \"projects\"\u2192\"frontend\"\u2192\"architect\"\u2192\"build\"\u2192\"options\"\u2192\"styles\" den Eintrag von </p> <pre><code>\"styles\": [\n              \"src/styles.css\"\n            ],\n</code></pre> <p>auf  <pre><code>\"styles\": [\n              \"node_modules/semantic-ui-css/semantic.css\"\n            ],\n</code></pre></p> <p>Sie k\u00f6nnen auch beides angeben. Die gleiche \u00c4nderung f\u00fchren wir in <code>angular.json</code> unter \"test\" (statt \"build\") durch, um die Styles auch beim Testen einzubeziehen. Also unter \"projects\"\u2192\"frontend\"\u2192\"architect\"\u2192\"test\"\u2192\"options\"\u2192\"styles\" ebenfalls nach</p> <pre><code>\"styles\": [\n              \"node_modules/semantic-ui-css/semantic.css\"\n            ],\n</code></pre> <p>\u00e4ndern.</p> <p>Um zu testen, ob das Einbinden der Semantic-UI-Styles geklappt hat, \u00f6ffnen wir in der IDE die Datei <code>app.component.html</code> und geben die hervorgehobenen Zeilen ein (Listing zeigt die vollst\u00e4ndige Datei <code>app.component.html</code>):</p> app/app.component.html <pre><code>&lt;h1&gt;This is app&lt;/h1&gt;\n&lt;htw-liste&gt;&lt;/htw-liste&gt;\n&lt;div class=\"ui active inverted dimmer\"&gt;\n  &lt;div class=\"ui text loader large\"&gt;Lade Seite ...&lt;/div&gt;\n&lt;/div&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre> <p>Wir gestalten also das Template unserer App-Komponente als ein <code>div</code> im <code>div</code>. Beiden <code>div</code>s werden CSS-Klassen aus dem Semantic-UI-Framework zugeordnet (siehe z.B. Klasse loader). </p> <p>Als Beweis, dass die CSS-Eigenschaften des Frameworks auch in allen anderen Komponenten genutzt werden k\u00f6nnen, \u00e4ndern wir auch noch unsere <code>liste.component.html</code>:</p> app/liste/liste.component.html <pre><code>&lt;p&gt;liste works!&lt;/p&gt;\n&lt;div class=\"ui three buttons\"&gt;\n  &lt;button class=\"ui active button\"&gt;One&lt;/button&gt;\n  &lt;button class=\"ui button\"&gt;Two&lt;/button&gt;\n  &lt;button class=\"ui button\"&gt;Three&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"frontend/#routing","title":"Routing","text":"<p>Routing spielt eine zentrale Rolle in einer Applikation. Durch das Routing sind wir in der Lage, zwischen Komponenten hin- und her zu wechseln. Derzeit haben wir unsere Komponenten jeweils statisch \u00fcber die Komponenten-Selektoren eingebunden. Nun soll ein dynamisches Einbinden erfolgen. Wenn wir uns nochmal die <code>app.component.html</code> anschauen, dann befindet sich darin eine Komponenten-Selektor <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>. In diesen werden durch Routing nun dynamisch Komponenten eingebunden. </p> <p>Wir haben bei der Erstellung des Projektes bei der Frage, </p> <pre><code>? Would you like to add Angular routing? Yes\n</code></pre> <p>mit \"yes\" geantwortet. Deshalb m\u00fcssen wir das Routing-Modul nun nicht mehr einbinden. Sollte dies jedoch noch nicht geschehen sein, k\u00f6nnen Sie das mithilfe von </p> <pre><code>npm install @angular/router --save\n</code></pre> <p>nachholen. </p> <p>Um das Routing zu erl\u00e4utern, erstellen wir uns drei weitere Komponenten <code>dashboard</code>, <code>about</code> und <code>tasks</code>. </p> <pre><code>ng g c dashboard\nng g c about\nng g c tasks\n</code></pre> <p>Die <code>dashboard</code>und die <code>about</code>-Komponente definieren wir jeweils als \"Top-Level\"-Routen. Das bedeutet, dass wir diese Komponenten \u00fcber <code>localhost:4200/dashboard</code> bzw <code>localhost:4200/about</code> erreichen werden. Dazu \u00f6ffnen wir die <code>app.routing.module.ts</code>-Datei, die sich im <code>app</code>-Ordner befindet und erg\u00e4nzen sie wie folgt (hinzugef\u00fcgte Zeilen hervorgehoben):</p> app/app-routing.module.ts <pre><code>import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport {DashboardComponent} from './dashboard/dashboard.component';\nimport {AboutComponent} from './about/about.component';\n\nconst routes: Routes = [\n  {path: 'dashboard', component: DashboardComponent},\n  {path: 'about', component: AboutComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n</code></pre> <p>In den Zeilen <code>4</code> und <code>5</code> wurden die Komponenten importiert, f\u00fcr die wir Routen anlegen wollen. Diese Routen wurden in den Zeilen <code>8</code> und <code>9</code> definiert. Die URL (<code>localhost:4200</code>) wird um den <code>path</code> <code>/dashboard</code> erweitert, um die <code>dashboard</code>-Komponente aufzurufen und um den <code>path</code> <code>/about</code>, um die <code>about</code>-Komponente einzubinden. </p> <p>Wir passen jetzt noch die Views der <code>root</code>-Komponente udn der <code>liste</code>-Komponente an, um das Ergebnis des Routings zu veranschaulichen (es sind jeweils die vollst\u00e4ndigen <code>*.component.html</code>-Dateien angegeben:</p> app/app.component.htmlapp/liste/liste.component.htmlapp/liste/liste.component.css <pre><code>&lt;div style=\"border: black solid 2px; padding: 20px;\"&gt;\n  &lt;h1&gt;This is app&lt;/h1&gt;\n  &lt;htw-liste&gt;&lt;/htw-liste&gt;\n  &lt;div class=\"ui page grid\"&gt;\n    &lt;div class=\"computer tablet only row\"&gt;\n      &lt;div class=\"ui inverted menu navbar\"&gt;\n        &lt;a class=\"active item\" routerLink=\"/dashboard\" routerLinkActive=\"active\"&gt;Dashboard&lt;/a&gt;\n        &lt;a class=\"item\" routerLink=\"/about\" routerLinkActive=\"active\"&gt;About&lt;/a&gt;\n        &lt;a class=\"item\" routerLink=\"/\" routerLinkActive=\"active\"&gt;Home&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"column padding-reset\"&gt;\n        &lt;div class=\"ui large message\"&gt;\n          &lt;h1 class=\"ui huge header\"&gt;This is app&lt;/h1&gt;\n          &lt;p&gt;Das ist die &lt;code&gt;app&lt;/code&gt;-Komponente&lt;/p&gt;\n          &lt;a href=\"http://freiheit.f4.htw-berlin.de/projekte\" class=\"ui blue button\"&gt;Anleitung Projekte &amp;raquo;&lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div style=\"margin: 20px; border: red solid 2px; padding: 20px;\"&gt;\n  &lt;div class=\"ui page grid\"&gt;\n    &lt;div class=\"computer tablet only row\"&gt;\n      &lt;div class=\"ui inverted menu navbar\"&gt;\n        &lt;a class=\"active item\" routerLink=\"/dashboard\" routerLinkActive=\"active\"&gt;Dashboard&lt;/a&gt;\n        &lt;a class=\"item\" routerLink=\"/about\" routerLinkActive=\"active\"&gt;About&lt;/a&gt;\n        &lt;a class=\"item\" routerLink=\"/\" routerLinkActive=\"active\"&gt;Home&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"column padding-reset\"&gt;\n        &lt;div class=\"ui large message\"&gt;\n          &lt;h1 class=\"ui huge header\"&gt;This is liste&lt;/h1&gt;\n          &lt;p&gt;Das ist die &lt;code&gt;liste&lt;/code&gt;-Komponente&lt;/p&gt;\n          &lt;a href=\"http://freiheit.f4.htw-berlin.de/projekte\" class=\"ui blue button\"&gt;Anleitung Projekte &amp;raquo;&lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>/* diese Datei wieder leeren, also die Definition f\u00fcr p loeschen */\n</code></pre> <p>Grob ist unsere HTML-Struktur nun wie folgt:</p> <p></p> <p>In der <code>index.html</code> wird die <code>root</code>-Komponente (<code>app.component.html</code>) eingebunden. Ich habe extra einen schwarzen Rahmen um diese View gemacht, damit man erkennen kann, welche Inhalte diese Komponente hat. In der <code>app.component.html</code> wird die <code>liste.component.html</code> eingebunden. Um diese View habe ich einen roten Rahmen definiert. In beiden Komponenten gibt es Links auf die drei Routen:</p> <ul> <li><code>/</code> - <code>localhost:4200</code></li> <li><code>/dashboard</code> - <code>localhost:4200/dashboard</code></li> <li><code>/about</code> - <code>localhost:4200/about</code></li> </ul> <p>und darunter einen grauen Kasten. Der Selektor <code>&lt;router-outlet&gt;&lt;/div&gt;router-outlet&gt;</code> ist Teil der <code>app.component.html</code>. Hier wird nun dynamisch die entsprechende Komponente eingef\u00fcgt, je nach Route. Das hei\u00dft, unter der URL <code>localhost:4200/dashboard</code> erscheint dort die View von <code>dashboard</code> (also <code>dashboard.component.html</code>) und unter der URL <code>localhost:4200/about</code> erscheint dort die View von <code>about</code> (also <code>about.component.html</code>). </p> <p>Ansicht f\u00fcr <code>http://localhost:4200/</code>:</p> <p></p> <p>Ansicht f\u00fcr <code>http://localhost:4200/dashboard</code>:</p> <p></p> <p>Ansicht f\u00fcr <code>http://localhost:4200/about</code>:</p> <p></p> <p>Sie k\u00f6nnen nun </p> <ul> <li>ein Angular-Projekt erzeugen, </li> <li>ein externes CSS-Framework einbinden,</li> <li>Komponenten erstellen und einbinden sowie</li> <li>Routen definieren.</li> </ul> <p>Damit haben Sie erstmal die notwendigsten Hilfsmittel in der Hand, um loszulegen, denke ich. Viel Spa\u00df mit Angular und viel Erfolg im Projekt! </p>"},{"location":"git/","title":"Git","text":"<p>Git ist ein Versionierungswerkzeug f\u00fcr die Softwareentwicklung. Mit Git k\u00f6nnen Sie</p> <ul> <li>Ihre Software versionieren, d.h. Versionen Ihrer Software erstellen und zwischen diesen Versionen hin- und herwecheseln sowie</li> <li>im Team gemeinsam an einem Softwareprojekt arbeiten und die einzelnen Entwicklungen aller Teammitglieder geeignet zusammenf\u00fchren. </li> </ul> <p>Git ist Open Source und frei verf\u00fcgbar. Entstanden ist Git im Rahmen der Entwicklung von Linux, initiiert durch Linus Torvalds, dem Initiator von Linux.</p>"},{"location":"git/#installation-von-git","title":"Installation von Git","text":"<p>Um Git verwenden zu k\u00f6nnen, m\u00fcssen Sie es zun\u00e4chst installieren. Laden Sie sich Git f\u00fcr Ihr Betriebssystem von der Download-Seite herunter bzw. gehen Sie so vor, wie f\u00fcr Ihr Betriebssystenm beschrieben. Installationshilfen erhalten Sie z.B. auch im frei verf\u00fcgbaren Git-Buch unter Git installieren oder auch im Video \u00fcber die ersten Schritte mit Git. </p> <p>Wenn Sie unter Windows arbeiten, dann erhalten Sie mit Git eine <code>GitBash</code>. Wenn wir von nun an vom <code>Terminal</code> (oder <code>Shell</code> oder <code>Bash</code>) sprechen, dann verwenden Sie bitte immer diese <code>GitBash</code>. </p> <p>Nach erfolgreicher Installation k\u00f6nnen Sie im Terminal den Befehl</p> <pre><code>git --version\n</code></pre> <p>eingeben und es sollte eine Ausgabe, wie</p> <pre><code>git version 2.30.1\n</code></pre> <p>oder eine aktuellere Versionsnummer erfolgen.</p> <p>Wir k\u00f6nnen Git nun verwenden und betrachten zun\u00e4chst, wie Git als Versionierungswerkzeug verwendet werden kann und schauen uns danach an, wie es als Kollaborationswerkzeug verwendet wird. </p>"},{"location":"git/#git-als-versionierungswerkzeug","title":"Git als Versionierungswerkzeug","text":"<p>Die grunds\u00e4tzliche Idee von Git ist, \u00c4nderungen an Dateien und Ordnern so zu speichern, dass alle diese \u00c4nderungen nachverfolgbar sind. Git erzeugt sogenannte Snapshots aller Dateien und Ordner und speichert diese Snapshots nacheinander lokal ab. D.h. alles passiert bei Ihnen lokal auf dem Rechner, Sie ben\u00f6tigen keine Verbindung zu einem Server. Wenn Sie sp\u00e4ter im Team zu Mehreren an einem Projekt arbeiten, dann gleichen Sie immer nur die Historien Ihrer Snapshots ab. Git f\u00fcgt immer nur hinzu und das ist auch korrekt so. Selbst, wenn in sp\u00e4teren Versionen Ihres eine Datei nicht mehr existiert, die in fr\u00fcheren Versionen des Projektes noch existierte, soll diese Datei gar nicht gel\u00f6scht werden, denn es k\u00f6nnte ja sein, dass Sie irgendwann nochmal die fr\u00fchere Version anschauen wollen, die die Datei enthielt. </p> <p>Dieses Skript hier z.B. verwalte ich mit Git. Das bedeutet, dass alle Dateien eines Ordners (und Unterordnern) in einem sogenannten Git-Repository (oder nur Repository) verwaltet werden. F\u00fcr dieses Skript hier k\u00f6nnte das z.B. so aussehen:</p> <p></p> <p>Das hei\u00dft, ich erstelle zun\u00e4chst 3 Dateien: <code>Einf\u00fchrung</code>, <code>Wiederholung</code> und <code>Git</code> und \"sage\" Git, dass dies <code>Version1</code> sein soll. Danach f\u00fcge ich 3 weitere Dateien hinzu <code>Aufgaben</code>, <code>\u00dcbungen</code> und <code>Wrapperklassen</code> und zusammen mit den vorherigen 3 Dateien aus Version 1 ergibt das dann <code>Version 2</code>. Danach \u00e4ndere ich (f\u00fcge hinzu) die Dateien <code>Aufgaben</code> und <code>\u00fcbungen</code> und f\u00fcge au\u00dferdem neue Dateien f\u00fcr <code>Exceptions</code> und <code>JUnit</code> hinzu und \"sage\", dass das insgesamt <code>Version 3</code> ergibt usw. Git verwaltet nun diese Versionen und der Vorteil ist, dass ich jede dieser Versionen separat zur Verf\u00fcgung stellen k\u00f6nnte und auch auf diesen Versionen weiterarbeiten. Wir werden in Zukunft in Bezug auf Git aber nicht mehr unbedingt von Versionen sprechen, sondern von Snapshots. Wir schauen uns das nun in einem Besipiel an. </p>"},{"location":"git/#git-init-ein-repository-erstellen","title":"git init - ein Repository erstellen","text":"<p>Angenommen, wir haben in unserem <code>workspace</code> folgende Ordner-Struktur:</p> <p></p> <p>In dem <code>workspace</code> gibt es ein Projekt <code>Projekt1</code> und darin einen <code>src</code>-Ordner mit unseren <code>*.java</code>-Dateien und einen <code>bin</code>-Ordner mit unseren <code>*.class</code>-Dateien. Wir lassen f\u00fcr dieses einf\u00fchrende Beispiel einmal Pakete weg. Diese w\u00fcrden ja als Ordner-Struktur sowohl innerhalb von <code>src</code> als auch von <code>bin</code> auftauchen. So sieht also ein typischer <code>workspace</code> aus. Es gibt darin noch weitere Ordner und Dateien, wie z.B. <code>.idea</code>, <code>.metadata</code>, <code>.classpath</code>, <code>.project</code>, <code>.settings</code>, die von unseren Entwicklungsumgebungen (Eclipse, IntelliJ, ...) angelegt wurden. </p> <p>Wir wollen nun unseren <code>workspace</code> von Git verwalten lassen. Dazu wechseln wir im Terminal in den <code>workspace</code>-Ordner und f\u00fchren dort das Kommando</p> <pre><code>git init\n</code></pre> <p>aus. Dieses Kommando erstellt das Git-Repository. Es muss genau einmal, n\u00e4mlich ganz am Anfang zur Erstellung des Repositorys ausgef\u00fchrt werden. Im Terminal erscheint</p> <pre><code>Hinweis: Als Name f\u00fcr den initialen Branch wurde 'master' benutzt. Dieser\nHinweis: Standard-Branchname kann sich \u00e4ndern. Um den Namen des initialen Branches\nHinweis: zu konfigurieren, der in allen neuen Repositories verwendet werden soll und\nHinweis: um diese Warnung zu unterdr\u00fccken, f\u00fchren Sie aus:\nHinweis: \nHinweis:    git config --global init.defaultBranch &lt;Name&gt;\nHinweis: \nHinweis: H\u00e4ufig gew\u00e4hlte Namen statt 'master' sind 'main', 'trunk' und\nHinweis: 'development'. Der gerade erstellte Branch kann mit diesem Befehl\nHinweis: umbenannt werden:\nHinweis: \nHinweis:    git branch -m &lt;Name&gt;\nLeeres Git-Repository in /...IhrPfadZumWorkspaceOrdner.../workspace/.git/ initialisiert\n</code></pre> <p>Somit wurde ein Git-Repository erstellt. Der <code>workspace</code>-Ordner wird nun von Git verwaltet. Dies erkennen Sie daran, dass in dem <code>workspace</code>-Ordner ein <code>.git</code>-Ordner angelegt wurde:</p> <p></p> <p>Klicken Sie ruhig mal in den Ordner, um zu sehen, was da alles drin ist.</p>"},{"location":"git/#gitignore-dateien-aus-der-verwaltung-ausschlieen","title":".gitignore - Dateien aus der Verwaltung ausschlie\u00dfen","text":"<p>Git w\u00fcrde nun den gesamten <code>workspace</code>-Ordner verwalten. Das w\u00e4re zun\u00e4chst auch gar kein Problem. Aber wenn Sie im Team zu mehreren am selben Projekt (workspace) arbeiten, dann wollen Sie bestimmte Dateien gar nicht untereinander austauschen, z.B. alle Dateien, die von Ihrer IDE erstellt wurden (z.B. <code>.idea</code>, <code>.metadata</code>, <code>.classpath</code>, <code>.project</code>, <code>.settings</code>). Auch alle Dateien im <code>bin</code>-Ordner m\u00fcssen nicht von Git verwaltet werden, weil Sie ja stets neu durch das Compilieren erzeugt werden. </p> <p>Noch bevor wir nun also unsere erste Version erzeugen wollen, schlie\u00dfen wir zun\u00e4chst einige Ordner und Dateien aus der Verwaltung von Git aus. Dazu wird im <code>workspace</code>-Ordner eine Datei <code>.gitignore</code> erstellt, in die wir alle Dateien und Ordner eintragen, die wir aus der Git-Verwaltung ausschlie\u00dfen wollen. Bevor wir das machen, geben wir im Terminal in unserem <code>workspace</code>-Ordner einmal den Befehl </p> <pre><code>git status\n</code></pre> <p>ein. Dies wird der am meisten verwendete Befehl f\u00fcr uns sein, der mit dem Befehl bekommen wir Auskunft \u00fcber den aktuellen Status des Repositorys. Die Ausgabe derzeit ist</p> <pre><code>Auf Branch master\n\nNoch keine Commits\n\nUnversionierte Dateien:\n  (benutzen Sie \"git add &lt;Datei&gt;...\", um die \u00c4nderungen zum Commit vorzumerken)\n    .DS_Store\n    .idea/\n    .metadata/\n    Projekt1/\n\nnichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien\n(benutzen Sie \"git add\" zum Versionieren)\n</code></pre> <p>Das m\u00fcssen wir zum jetzigen Zeitpunkt noch nicht alles verstehen, aber wir sehen, dass Git derzeit die Datei <code>.DS_Store</code> und die Ordner <code>.idea/</code>, <code>.metadata/</code> und <code>Projekt1/</code> verwaltet und wir ja eigentlich nur die Verwaltung von <code>Projekt1/</code> w\u00fcnschen (und darin auch nicht alles). Wir erstellen uns also im <code>workspace</code>-Ordner eine <code>.gitignore</code>-Datei und geben darin ein:</p> <pre><code>.DS_Store\n.idea\n.metadata\nProjekt1/bin\nProjekt1/.classpath\nProjekt1/.project\nProjekt1/.settings\n</code></pre> <p>Damit geben wir an, dass die Datei <code>.DS_Store</code> ignoriert werden soll (gibt es nur unter Mac - legt der Finder automatisch zur schnelleren Suche an) sowie die Ordner <code>.idea</code> und <code>.metadata</code>. H\u00e4tten wir <code>.idea/</code> und <code>.metadata/</code> geschrieben, w\u00fcrde der Ordner jeweils selbst mit in der Git-Verwaltung sein, jedoch der Kontent nicht. Ansonsten soll auch noch der Ordner <code>Projekt1/bin</code> aus der Git-Verwaltung entfernt werden und alle Dateien und Ordner, die mit einem Punkt beginnen und im Ordner <code>Projekt1</code> liegen.</p> <p>Wenn man alle Dateien ignorieren m\u00f6chte, die mit einem Punkt beginnen, egal in welchem ordner, dann k\u00f6nnte man auch <code>.*</code> in die <code>.gitignore</code> schreiben. Dann w\u00fcrde allerdings auch die <code>.gitignore</code> selbst dazugeh\u00f6ren. Diese kann und sollte man aber ruhig mit in die Git-Verwaltung aufnehmen. Eine \u00dcbersicht \u00fcber m\u00f6gliche Eintr\u00e4ge in die <code>.gitignore</code> findet man z.B. hier oder hier.</p> <p>Wenn wir jetzt erneut </p> <pre><code>git status\n</code></pre> <p>eingeben, dann ist die Ausgabe:</p> <pre><code>Auf Branch master\n\nNoch keine Commits\n\nUnversionierte Dateien:\n  (benutzen Sie \"git add &lt;Datei&gt;...\", um die \u00c4nderungen zum Commit vorzumerken)\n    .gitignore\n    Projekt1/\n\nnichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien\n(benutzen Sie \"git add\" zum Versionieren)\n</code></pre> <p>D.h. wir sehen, dass die Dateien und Ordner <code>.DS_Store</code>, <code>.idea/</code> und <code>.metadata/</code> nun nicht mehr mit verwaltet werden, daf\u00fcr aber die <code>.gitignore</code>.</p> <p>Wir haben jetzt ein Git-Repoitory, aber es ist noch leer. Wir f\u00fcgen nun Dateien diesem Repository hinzu. </p>"},{"location":"git/#git-add-dem-repository-dateien-hinzufugen","title":"git add - dem Repository Dateien hinzuf\u00fcgen","text":"<p>Wir haben noch keine Ordner und Dateien in unser Repository aufgenommen, d.h. es werden noch keine \u00c4nderungen an diesen Dateien durch Git verwaltet. Um Dateien dem Repository hinzuzuf\u00fcgen, verwenden wir das Kommando git add. Wir wollen den Ordner <code>Projekt1</code> und die Datei <code>.gitignore</code> dem Repository hinzuf\u00fcgen, um sie von nun an von Git verwalten zu lassen (d.h. ihre \u00c4nderungen zu \"protokollieren\").</p> <p>Wir geben im Terminal im <code>workspace</code>-Ordner ein:</p> <pre><code>git add .gitignore\ngit add Projekt1\n</code></pre> <p>und f\u00fcgen somit den gesamten Ordner <code>Projekt1</code> (aber nicht die in der <code>.gitignore</code> definierten Dateien und Ordner aus dem Ordner <code>Projekt1</code>) und die <code>.gitignore</code>-Datei dem Repository hinzu.  </p> <pre><code>git status\n</code></pre> <p>ergibt nun:</p> <pre><code>Auf Branch master\n\nNoch keine Commits\n\nZum Commit vorgemerkte \u00c4nderungen:\n  (benutzen Sie \"git rm --cached &lt;Datei&gt;...\" zum Entfernen aus der Staging-Area)\n    neue Datei:     .gitignore\n    neue Datei:     Projekt1/src/A.java\n    neue Datei:     Projekt1/src/B.java\n</code></pre> <p>D.h. von nun an werden von Git die Dateien <code>.gitignore</code>, <code>Projekt1/src/A.java</code> und <code>Projekt1/src/B.java</code> verwaltet. Die Dateien <code>A.java</code> und <code>B.java</code> sind jetzt noch leer. </p> <p>Wann immer wir eine neue Datei in unserem <code>workspace</code> erstellen und wir wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei mit <code>git add &lt;datei&gt;</code> dem repository hinzu!</p> <p>Wann immer wir eine neue Datei in unserem <code>workspace</code> erstellen und wir nicht wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei der <code>.gitignore</code>-Datei hinzu!</p> <p>Mit dem Befehl</p> <pre><code>git add .\n</code></pre> <p>werden einfach immer alle neuen Dateien hinzugef\u00fcgt. Wir werden diesen Befehl h\u00e4ufig nutzen, um nicht alle neuen Dateien einzeln aufzulisten. Es gibt f\u00fcr <code>add</code> auch die Option <code>--all</code> (<code>-A</code>), mit der alle Dateien aus einem Ordner hinzugef\u00fcgt werden.</p>"},{"location":"git/#git-commit-einen-snapshot-erstellen","title":"git commit - einen Snapshot erstellen","text":"<p>Mit <code>git commit</code> \"speichern\" wir das gesamte Repository. Git merkt sich den Stand aller Dateien und Ordner und den Zeitpunkt des Commits. Zus\u00e4tzlich geben wir zum <code>git commit</code> noch eine Commit-Nachricht an, um den Stand der Arbeit zu beschreiben. In einem Snapshot werden alle \u00c4nderungen im Vergleich zum vorherigen Snapshot gespeichert. Man kann sich also die Versionierung mit Git wie eine Reihe von Commits (Snapshots) vorstellen:</p> <p></p> <p>Ganz am Anfang ein initiales Commit (<code>C0</code>), dann wurde weiter gearbeitet und ein weiteres Commit (<code>C1</code>) gesetzt und so weiter (<code>C2</code>). Es ist ohne Probleme m\u00f6glich, wieder zum Stand von <code>C1</code> oder sogar <code>C0</code> \"zur\u00fcckzuspringen\" (zeigen wir sp\u00e4ter, wie). </p> <p>Zun\u00e4chst erstellen wir unser initiales Commit. Dazu geben wir im Terminal im <code>workspace</code>-Ordner ein:</p> <pre><code>git commit -m \"Initiales Commit. A.java und B.java jeweils leer.\"\n</code></pre> <p>es erscheint die Ausgabe:</p> <pre><code>[master (Root-Commit) 8236e8a] Initiales Commit. A.java und B.java jeweils leer.\n 3 files changed, 8 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 Projekt1/src/A.java\n create mode 100644 Projekt1/src/B.java\n</code></pre> <p>Unser erstes Commit (das sogenannte Root-Commit) wurde erstellt. Wir haben jetzt einen \"gespeicherten\" Ausgangszustand, zu dem wir immer wieder zur\u00fccksetzen k\u00f6nnten. Unser \"Entwicklungsstrang\" nennt sich Branch. Der Hauptstrang, an dem wir versuchen, alle Entwicklungen immer ordentlich zusammenzuf\u00fchren, nennt sich master-Branch. Das letzte Commit ist stets der <code>HEAD</code>. Derzeit ist unser <code>HEAD</code> also dieses initiale Commit. Die Begriffe sind in der folgenden Abbildung dargestellt:</p> <p></p> <p>Wir \u00e4ndern nun mal die Datei <code>Projekt1/src/A.java</code> und f\u00fcgen dort einfach ein Zeilenkommentar</p> <pre><code>// Zeile 1 hinzugefuegt\n// \n</code></pre> <p>hinzu. Wenn wir nun <code>git status</code> aufrufen, erscheint</p> <pre><code>Auf Branch master\n\u00c4nderungen, die nicht zum Commit vorgemerkt sind:\n  (benutzen Sie \"git add &lt;Datei&gt;...\", um die \u00c4nderungen zum Commit vorzumerken)\n  (benutzen Sie \"git restore &lt;Datei&gt;...\", um die \u00c4nderungen im Arbeitsverzeichnis zu verwerfen)\n    ge\u00e4ndert:       Projekt1/src/A.java\n\nkeine \u00c4nderungen zum Commit vorgemerkt (benutzen Sie \"git add\" und/oder \"git commit -a\")\n</code></pre> <p>Wir k\u00f6nnen diese \u00c4nderung nun committen, indem wir die Option <code>-a</code> verwenden (oder zuvor <code>git add Projekt1/src/A.java</code>):</p> <pre><code>git commit -am \"in A.java Zeile 1 hinzugefuegt\"\n</code></pre> <p>Wir erhalten die Ausgabe:</p> <pre><code>[master 44ed3a8] in A.java Zeile 1 hinzugefuegt\n 1 file changed, 2 insertions(+)\n</code></pre> <p>Wir haben jetzt einen neuen <code>HEAD</code>, nicht mehr das Root-Commit mit der \"Nummer\" <code>8236e8a</code>, sondern nun dieses zweite Commit mit der \"Nummer\" <code>44ed3a8</code>. Diese Nummern sind Hash-Werte. Tats\u00e4chlich sind diese Hash-Werte sogar l\u00e4nger. Wir k\u00f6nnen Sie uns mit <code>git log</code> anzeigen lassen.</p>"},{"location":"git/#git-log-und-git-show","title":"git log und git show","text":"<p>Mit <code>git log</code> k\u00f6nnen Sie sich alle Ihre Commits auflisten lassen. In unserem jetzigen Zustand erzeugt <code>git log</code> folgende Ausgabe:</p> <pre><code>commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd (HEAD -&gt; master)\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Fri Apr 2 18:13:48 2021 +0200\n\n    in A.java Zeile 1 hinzugefuegt\n\ncommit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Fri Apr 2 08:42:37 2021 +0200\n\n    Initiales Commit. A.java und B.java jeweils leer.\n</code></pre> <p>Wenn Ihnen diese Ansicht zu un\u00fcbersichtlich ist, k\u00f6nnen Sie die Option <code>--oneline</code> verwenden:</p> <pre><code>git log --oneline\n</code></pre> <p>erzeugt:</p> <pre><code>44ed3a8 (HEAD -&gt; master) in A.java Zeile 1 hinzugefuegt\n8236e8a Initiales Commit. A.java und B.java jeweils leer.\n</code></pre>"},{"location":"git/#git-branch-und-git-ckeckout-branches-in-git","title":"git branch und git ckeckout - Branches in Git","text":"<p>Unser Repository sieht derzeit so aus:</p> <p></p> <p>Angenommen, wir wollen etwas ausprobieren und unabh\u00e4ngig von dem Hauptentwicklungsstrang (dem master-Branch) z.B. an <code>Projekt1/src/B.java</code> arbeiten, ohne aber den bisherigen Stand zu \"gef\u00e4rden\". Dazu gibt es die M\u00f6glichkeit, neue, eigene Branches zu erstellen. Diese gehen von einem Commit des master-Branches aus und k\u00f6nnen sp\u00e4ter auch wieder auf den master-Branch f\u00fchren (oder, falls unser Ausprobieren doch nicht erfolgreich war, auch nicht).</p> <p>Einen neuen Branch erstellen wir mit <code>git branch &lt;nameDesNeuenBranches&gt;</code>. Wir erstellen uns einen Branch <code>tryB</code>:</p> <pre><code>git branch tryB\n</code></pre> <p>Dabei passiert erstmal noch gar nichts. Es wird nur ein Link auf das letzte Commit (den <code>HEAD</code>) erzeugt und dieser Link hei\u00dft <code>tryB</code>. Wenn wir jetzt einfach erstmal an <code>Projekt1/src/A.java</code> weiterarbeiten w\u00fcrden und die \u00c4nderungen committen, stellen wir fest, dass wir tats\u00e4chlich am master-Branch weiterarbeiten. Um das zu zeigen, \u00e4ndern wir die Datei <code>Projekt1/src/A.java</code> und f\u00fcgen einen weiteren Zeilenkommentar hinzu.</p> <pre><code>// Zeile 1 hinzugefuegt\n// Zeile 2 hinzugefuegt\n//\n</code></pre> <p>Wir wissen bereits, wie wir diese \u00c4nderung committen:</p> <pre><code>git commit -am \"in A.java Zeile 2 hinzugefuegt\"\n</code></pre> <p><code>git log</code> ergibt:</p> <pre><code>commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde (HEAD -&gt; master)\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Sat Apr 3 09:09:54 2021 +0200\n\n    in A.java Zeile 2 hinzugefuegt\n\ncommit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd (tryB)\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Fri Apr 2 18:13:48 2021 +0200\n\n    in A.java Zeile 1 hinzugefuegt\n\ncommit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Fri Apr 2 08:42:37 2021 +0200\n\n    Initiales Commit. A.java und B.java jeweils leer.\n</code></pre> <p>Das zeigt uns, dass wir am master-Branch weitergearbeitet haben und dass <code>HEAD</code> auf den master-Branch zeigt. Wir sehen aber auch, dass wir auf dem zweiten Commit einen Link <code>tryB</code> haben. Wir wollen jetzt aber auf diesem <code>tryB</code>-Branch arbeiten und nutzen dazu den Befehl <code>git checkout &lt;branch&gt;</code>:</p> <pre><code>git checkout tryB\n</code></pre> <p>Damit haben wir 2 Sachen getan:</p> <ol> <li>arbeiten wir jetzt auf einem anderen Branch, als dem master-Branch, n\u00e4mlich dem tryB-Branch und</li> <li>setzen wir auf den Zustand auf, den wir mit dem Commit gespeichert hatten (<code>44ed3a8</code>), auf den <code>tryB</code> zeigt. </li> </ol> <p>Den 2. Punkt k\u00f6nnen wir \u00fcberpr\u00fcfen, indem wir uns die Datei <code>Projekt1/src/A.java</code> anschauen. Die sieht n\u00e4mlich jetzt (wieder) so aus: </p> <pre><code>// Zeile 1 hinzugefuegt\n//\n</code></pre> <p>Wir f\u00fcgen nun das Gleiche in die <code>Projekt1/src/B.java</code> ein:</p> <pre><code>// Zeile 1 hinzugefuegt\n//\n</code></pre> <p>und committen diese \u00c4nderung:</p> <pre><code>git commit -am \"in B.java Zeile 1 hinzugefuegt\"\n</code></pre> <p>Die Commits lassen wir uns zun\u00e4chst mit <code>git log</code> anzeigen:</p> <pre><code>commit e754d18f0d8cb1e8593edca740fa75b84d5de30f (HEAD -&gt; tryB)\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Sat Apr 3 09:56:28 2021 +0200\n\n    in B.java Zeile 1 hinzugefuegt\n\ncommit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Fri Apr 2 18:13:48 2021 +0200\n\n    in A.java Zeile 1 hinzugefuegt\n\ncommit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Fri Apr 2 08:42:37 2021 +0200\n\n    Initiales Commit. A.java und B.java jeweils leer.\n</code></pre> <p>Wir sehen, dass alle Commits aufgelistet werden, die bis zum aktuellen <code>HEAD</code> f\u00fchren. Es fehlt aber beispielsweise das Commit, das bereits f\u00fcr den master-Branch ausgef\u00fchrt wurde und in dem in <code>Projekt1/src/A.java</code> bereits <code>Zeile 2 hinzugefuegt</code> wurde. Um sich alle Commits auszugeben und sogar eine Graph-\u00e4hnliche Darstellung zu erhalten, verwenden wir </p> <pre><code>git log --all --graph\n</code></pre> <p>Wir erhalten folgende Ausgabe:</p> <pre><code>* commit e754d18f0d8cb1e8593edca740fa75b84d5de30f (HEAD -&gt; tryB)\n| Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| Date:   Sat Apr 3 09:56:28 2021 +0200\n| \n|     in B.java Zeile 1 hinzugefuegt\n|   \n| * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde (master)\n|/  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n|   Date:   Sat Apr 3 09:09:54 2021 +0200\n|   \n|       in A.java Zeile 2 hinzugefuegt\n| \n* commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd\n| Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| Date:   Fri Apr 2 18:13:48 2021 +0200\n| \n|     in A.java Zeile 1 hinzugefuegt\n| \n* commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6\n  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n  Date:   Fri Apr 2 08:42:37 2021 +0200\n\n      Initiales Commit. A.java und B.java jeweils leer.\n</code></pre> <p>und daraus erkennt man, dass unser Repository (die Commit-Hostorie) derzeit so aussieht:</p> <p></p>"},{"location":"git/#git-merge-branches-zusammenfuhren","title":"git merge - Branches zusammenf\u00fchren","text":"<p>Wir haben folgende Situation:</p> <ul> <li>ausgehend von Commit <code>44ed3a8</code> (<code>in A.java Zeile 1 hinzugefuegt</code>) haben wir</li> <li>auf dem master-Branch weitergearbeitet und dort ein Commit <code>9c869b6</code> (<code>in A.java Zeile 2 hinzugefuegt</code>) erstellt und</li> <li>parallel dazu auf dem tryB-Branch gearbeitet und dort ein Commit <code>e754d18</code> (<code>in B.java Zeile 1 hinzugefuegt</code>) erstellt.</li> </ul> <p>Nun wollen wir beide Branches wieder zusammenf\u00fchren, um mit beiden \u00c4nderungen weiterzuarbeiten. Das Zusammenf\u00fchren von Branches erfolgt mithilfe von <code>git merge &lt;branchToMerge&gt;</code>. Wir wollen gerne den tryB-Branch in den master-Branch mergen, um dann mit dem master-Branch weiterzuarbeiten. Dazu wechseln wir zun\u00e4chst in den master-Branch. das erreichen wir, indem wir <code>checkout</code> verwenden:</p> <pre><code>git checkout master\n</code></pre> <p>Die Ausgabe ist</p> <pre><code>Zu Branch 'master' gewechselt\n</code></pre> <p>Nun mergen wir diesen mit dem <code>tryB</code>-Branch, indem wir <code>git merge tryB</code> eingeben. Wichtig ist, dass es sich hierbei auch um ein erzwungenes Commit (sogenanntes Merge-Commit) handelt, da beide Branches eigene Commits enthielten. Es wird uns eine Commit-nachricht angeboten. Mit <code>ZZ</code> verlassen wir den <code>vi</code>.</p> <p>Wenn wir uns nun die Commit-Logs ausgeben lassen (<code>git log --all --graph</code>), dann erhalten wir folgende Ausgabe </p> <pre><code>*   commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 (HEAD -&gt; master, tryB)\n|\\  Merge: e754d18 9c869b6\n| | Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| | Date:   Sat Apr 3 16:21:12 2021 +0200\n| | \n| |     Merge branch 'master' into tryB\n| | \n| * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde\n| | Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| | Date:   Sat Apr 3 09:09:54 2021 +0200\n| | \n| |     in A.java Zeile 2 hinzugefuegt\n| | \n* | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f\n|/  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n|   Date:   Sat Apr 3 09:56:28 2021 +0200\n|   \n|       in B.java Zeile 1 hinzugefuegt\n| \n* commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd\n| Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| Date:   Fri Apr 2 18:13:48 2021 +0200\n| \n|     in A.java Zeile 1 hinzugefuegt\n| \n* commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6\n  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n  Date:   Fri Apr 2 08:42:37 2021 +0200\n\n      Initiales Commit. A.java und B.java jeweils leer.\n</code></pre> <p>und erkennen, dass die beiden Branches nun wieder \"vereint\" sind:</p> <p></p> <p>Wenn wir uns <code>A.java</code> anschauen, dann sehen wir, dass diese Datei 2 Zeilen enth\u00e4lt und die Datei <code>B.java</code> eine. Beide sind also auf dem aktuellsten Stand. </p> <p>Wir \u00fcben Mergen an dieser Stelle nochmal und bilden 2 Branches, in dem einen erstellen wir uns eine \"Klasse\" <code>C.java</code> und in dem anderen eine <code>D.java</code>:</p> <pre><code>git branch classC\ngit branch classD\ngit checkout classC\ntouch Projekt1/src/C.java\necho \"// Zeile 1 hinzugefuegt\" &gt;&gt; Projekt1/src/C.java\ngit add Projekt1/src/C.java\ngit commit -m \"in C.java  Zeile 1 hinzugefuegt\"\ngit checkout classD\ntouch Projekt1/src/C.java\necho \"// Zeile 1 hinzugefuegt\" &gt;&gt; Projekt1/src/D.java\ngit add Projekt1/src/D.java\ngit commit -m \"in D.java  Zeile 1 hinzugefuegt\"\ngit checkout master\ngit merge classC\n</code></pre> <p>Hierbei handelt es sich um ein sogenanntes Fast-Forward-Commit, da der master-Branch keine eigenen \u00c4nderungen enthielt, sondern nur die \u00c4nderungen des classC-Branches in den master-Branch eingef\u00fcgt werden m\u00fcssen. Es gibt hier keine potenziellen Konflikte.</p> <p>Wenn wir nun aber auch den classD-Branch in den master-Branch mergen wollen, enth\u00e4lt sowohl der master-Branch \u00c4nderungen (<code>C.java</code>) als auch der classD-Branch (<code>D.java</code>). Hierbei handelt es sich also um ein Merge-Commit:</p> <pre><code>git merge classD\n</code></pre> <p><code>vi</code> \u00f6ffnet und wir k\u00f6nnen die Commit-Message \u00e4ndern oder sie so lassen. Wir beenden den <code>vi</code> wieder mit <code>ZZ</code>. <code>git log --all --graph</code> zeigt:</p> <pre><code>*   commit 15d5e0b00f2a4af5eaa4d84ba55e340f912ccb42 (HEAD -&gt; master)\n|\\  Merge: 0d86294 01f8dfd\n| | Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| | Date:   Sat Apr 3 17:12:18 2021 +0200\n| | \n| |     Merge branch 'classD'\n| | \n| * commit 01f8dfd9c68148c984db99dec980d227f1fe4044 (classD)\n| | Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| | Date:   Sat Apr 3 17:05:46 2021 +0200\n| | \n| |     in D.java Zeile 1 hinzugefuegt\n| | \n* | commit 0d8629458ca0a5e244c121be525f8e647b5c6bd9 (classC)\n|/  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n|   Date:   Sat Apr 3 16:51:14 2021 +0200\n|   \n|       in C.java Zeile 1 hinzugefuegt\n|   \n*   commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 (tryB)\n|\\  Merge: e754d18 9c869b6\n| | Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| | Date:   Sat Apr 3 16:21:12 2021 +0200\n| | \n| |     Merge branch 'master' into tryB\n| | \n| * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde\n| | Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| | Date:   Sat Apr 3 09:09:54 2021 +0200\n| | \n| |     in A.java Zeile 2 hinzugefuegt\n| | \n* | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f\n|/  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n|   Date:   Sat Apr 3 09:56:28 2021 +0200\n|   \n|       in B.java Zeile 1 hinzugefuegt\n| \n* commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd\n| Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n| Date:   Fri Apr 2 18:13:48 2021 +0200\n| \n|     in A.java Zeile 1 hinzugefuegt\n| \n* commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6\n  Author: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\n  Date:   Fri Apr 2 08:42:37 2021 +0200\n\n      Initiales Commit. A.java und B.java jeweils leer.\n</code></pre> <p>Die Commit-Historie unseres Repositories sieht so aus:</p> <p></p> <p>Eine umfangreiche Beschreibung aller \u00c4nderungen in den jeweiligen Commits erhalten Sie auch durch den Befehl <code>git show --pretty=fuller --abbrev-commit</code>. </p>"},{"location":"git/#konflikte-auflosen","title":"Konflikte aufl\u00f6sen","text":"<p>Gerade bei der Arbeit im Team kann es passieren, dass in verschiedenen Branches an der gleichen Datei \u00c4nderungen durchgef\u00fchrt werden. Wenn diese Branches dann \"gemerged\" werden sollen, kann Git diesen Konflikt nicht alleine aufl\u00f6sen (soll \u00c4nderung A gelten oder \u00c4nderung B oder beide?). Die Aufl\u00f6sung eines solchen Konfliktes muss durch die Entwicklerinnen geschehen. </p> <p>Zur Demonstration erzeugen wir uns erneut zwei Branches, <code>changeA1</code> und <code>changeA2</code> und f\u00fchren in beiden Branches eine \u00c4nderung an <code>Projekt1/src/A.java</code> durch:</p> <pre><code>git branch changeA1\ngit branch changeA2\n\ngit checkout changeA1\necho \"// eine \u00c4nderung durch Entwicklerin A\" &gt;&gt; Projekt1/src/A.java\ngit commit -am \"in A eine \u00c4nderung durch Entwicklerin A\"\n\ngit checkout changeA2\necho \"// eine \u00c4nderung durch Entwicklerin B\" &gt;&gt; Projekt1/src/A.java\ngit commit -am \"in A eine \u00c4nderung durch Entwicklerin B\"\n</code></pre> <p>Wenn wir jetzt versuchen, die beiden Branches mit <code>git merge changeA1</code> zu mergen, dann erhalten wir folgende Ausgabe:</p> <pre><code>automatischer Merge von Projekt1/src/A.java\nKONFLIKT (Inhalt): Merge-Konflikt in Projekt1/src/A.java\nAutomatischer Merge fehlgeschlagen; beheben Sie die Konflikte und committen Sie dann das Ergebnis.\n</code></pre> <p>Git kann diesen Konflikt nicht automatisch aufl\u00f6sen. Die Ausgabe von <code>git status</code> hilft dabei nicht wirklich weiter:</p> <pre><code>Auf Branch changeA2\nSie haben nicht zusammengef\u00fchrte Pfade.\n  (beheben Sie die Konflikte und f\u00fchren Sie \"git commit\" aus)\n  (benutzen Sie \"git merge --abort\", um den Merge abzubrechen)\n\nNicht zusammengef\u00fchrte Pfade:\n  (benutzen Sie \"git add/rm &lt;Datei&gt;...\", um die Aufl\u00f6sung zu markieren)\n    von beiden ge\u00e4ndert:    Projekt1/src/A.java\n\nkeine \u00c4nderungen zum Commit vorgemerkt (benutzen Sie \"git add\" und/oder \"git commit -a\")\n</code></pre> <p>Mit <code>git log --merge</code> k\u00f6nnen wir uns die Commits anschauen, die die \u00c4nderungen enthalten, welche f\u00fcr den Konflikt sorgen:</p> <pre><code>commit da1f715199e68f17ea276b07a9c3a6e88b319e8a (HEAD -&gt; changeA2)\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Sun Apr 4 08:08:13 2021 +0200\n\n    in A eine \u00c4nderung durch Entwicklerin B\n\ncommit 63a9a40ab267bc53f2a688a45e6813d7c15170c6 (changeA1)\nAuthor: J. Freiheit &lt;freiheit@htw-berlin.de&gt;\nDate:   Sun Apr 4 08:07:25 2021 +0200\n\n    in A eine \u00c4nderung durch Entwicklerin A\n</code></pre> <p>Der Befehl <code>git diff</code> zeigt uns den Konflikt ganz konkret an:</p> <pre><code>diff --cc Projekt1/src/A.java\nindex a5c84c3,a920d29..0000000\n--- a/Projekt1/src/A.java\n+++ b/Projekt1/src/A.java\n@@@ -1,4 -1,4 +1,8 @@@\n  // Zeile 1 hinzugefuegt\n  // Zeile 2 hinzugefuegt\n  //\n++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n +// eine \u00c4nderung durch Entwicklerin B\n++=======\n+ // eine \u00c4nderung durch Entwicklerin A\n++&gt;&gt;&gt;&gt;&gt;&gt;&gt; changeA1\n</code></pre> <p>Diese Darstellung in der Datei finden wir auch wieder, wenn wir uns die Datei <code>Projekt1/src/A.java</code> anschauen:</p> <pre><code>// Zeile 1 hinzugefuegt\n// Zeile 2 hinzugefuegt\n//\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// eine \u00c4nderung durch Entwicklerin B\n=======\n// eine \u00c4nderung durch Entwicklerin A\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; changeA1\n</code></pre> <p>In unserer Konflikt-Datei gibt es folgende drei Eintr\u00e4ge:</p> <ul> <li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code></li> <li><code>=======</code></li> <li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; changeA1</code> </li> </ul> <p>Aller Inhalt zwischen den ersten beiden Zeilen enth\u00e4lt die \u00c4nderungen des aktuellen Branches und alle \u00c4nderungen zwischen den letzten beiden Zeilen enth\u00e4lt alle \u00c4nderungen des Branches, in den gemerged werden soll (<code>changeA1</code>). Entwicklungsumgebungen (IntelliJ, Eclipse, Atom, Visual Studio Code usw.) unterst\u00fctzen bei der Aufl\u00f6sung solcher Konflikte. Wir \u00fcbernehmen einfach beide \u00c4nderungen h\u00e4ndisch und committen diese \u00c4nderung. <code>Projekt1/src/A.java</code> sieht also jetzt so aus:</p> <pre><code>// Zeile 1 hinzugefuegt\n// Zeile 2 hinzugefuegt\n//\n// eine \u00c4nderung durch Entwicklerin B\n// eine \u00c4nderung durch Entwicklerin A\n</code></pre> <p>und der Commit:</p> <pre><code>git commit -am \"Merge-Konflikt in A.java geloest. Aenderungen A UND B eingefuegt\".\n</code></pre>"},{"location":"git/#merge-abbrechen","title":"Merge abbrechen","text":"<p>Sollten Sie aufgrund der Konfliktmeldung den Merge-Vorgang doch nicht durchf\u00fchren wollen, k\u00f6nnen Sie mit </p> <pre><code>git merge --abort\n</code></pre> <p>den Merge abbrechen und mit </p> <pre><code>git reset\n</code></pre> <p>die in Konflikt stehenden Dateien auf einen als funktionierend bekannten Zustand zur\u00fcckzusetzen. </p>"},{"location":"git/#git-stash-arbeit-unterbrechen","title":"git stash - Arbeit unterbrechen","text":"<p>Angenommen, Sie haben bereits \u00c4nderungen durchgef\u00fchrt, diese sind aber noch nicht \"fertig\" und Sie wollen Sie deshalb noch nicht committen. Stattdessen m\u00fcssen Sie aber an anderer Stelle zun\u00e4chst noch einen BugFix erledigen. Dann k\u00f6nnen Sie Ihre gegenw\u00e4rtigen \u00c4nderungen \"stashen\" - in einen Stash-Modus setzen, also erstmal verstauen, um daran sp\u00e4ter weiterzuarbeiten:</p> <pre><code>git stash\n</code></pre> <p>Jetzt k\u00f6nnen Sie erstmal andere \u00c4nderungen durchf\u00fchren und committen und um dann wieder zu Ihren urspr\u00fcnglichen \u00c4nderungen zur\u00fcckzukehren, holen Sie diese wieder aus dem Stash-Modus:</p> <pre><code>git stash pop\n</code></pre>"},{"location":"git/#einige-weitere-nutzliche-befehle","title":"Einige weitere n\u00fctzliche Befehle","text":"<p>Angenommen, Sie haben committed, aber einige \u00c4nderungen vergessen (entweder vorher nicht geadded oder noch gar nicht ge\u00e4ndert), dann k\u00f6nnen Sie den vorherigen Commit \"\u00fcberschreiben\".</p> <pre><code>git commit -m \"zu frueh committed\"\n// jetzt noch die Aenderungen hinzufuegen\ngit commit --amend\n</code></pre> <p>Angenommen, Sie haben seit dem letzten Commit \u00c4nderungen an Dateien vorgenommen, die Sie aber gerne verwerfen m\u00f6chten. Sie werden in der Literatur daf\u00fcr Befehle finden, wie z.B. <code>git checkout HEAD</code> oder <code>git reset --hard</code>. Sie sollten damit \u00e4u\u00dferst vorsichtig sein! Bei <code>git checkout HEAD</code> (aslo dem \"Zur\u00fccksetzen\" auf das letzte Commit) bleiben die ge\u00e4nderten Dateien \"modifiziert\". Das hilft also gar nicht wirklich. <code>git reset --hard</code> kann Sie unter Umst\u00e4nden auf ein Commit zur\u00fccksetzen, das noch weiter zur\u00fcck in der Historie liegt, als Sie planen. Verwenden Sie zum Zur\u00fccksetzen Ihrer \u00c4nderungen (Undo) besser </p> <pre><code>git restore &lt;dateiUndo&gt;\n</code></pre> <p>Geben Sie also die Datei an, die Sie ge\u00e4ndert haben und die wieder auf den Zustand des letzten Commits zur\u00fcckgesetzt werden soll. </p> <p>L\u00f6schen Sie niemals einfach Dateien oder Ordner in dem durch Git verwalteten Ordner (Ihrem Repository) \u00fcber den Finder oder den Dateiexplorer! Die Idee von Git ist die, dass immer nur etwas hinzukommt. Selbst, wenn Sie eine bestimmte Datei nicht mehr ben\u00f6tigen, so kann es ja doch sein, dass diese in fr\u00fcheren Versionen vorkommt. Lassen Sie sie einfach im Verzeichnis!</p>"},{"location":"git/#aliases","title":"Aliases","text":"<p>Es ist ganz hilfreich, sich f\u00fcr einige Optionen Aliase zu definieren, da diese oft verwendet werden. Dazu nutzen Sie <code>git config</code>. Hier einige Beispiele von n\u00fctzlichen Aliases (aus dem Git-Buch):</p> <pre><code>git config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n</code></pre>"},{"location":"git/#git-als-kollaborationswerkzeug","title":"Git als Kollaborationswerkzeug","text":"<p>Im vorherigen Abschnitt haben wir diskutiert, wie wir Git zur Versionsverwaltung verwenden k\u00f6nnen. Dazu haben wir ein lokales Git-Repository angelegt. Nun wollen wir betrachten, wie Git als Kollaborationswerkzeug eingesetzt werden kann, d.h. wie mehere Entwicklerinnen zusammen an einem (globalen) Git-Repository arbeiten k\u00f6nnen. Dazu ben\u00f6tigen wir einen Host (Bereitsteller netzbasierter Dienste), der ein zentrales Git-Repository zur Verf\u00fcgung stellen kann. Es gibt mehrere solcher Git-Hosts. Die bekanntesten sind: </p> <ul> <li>GitHub</li> <li>GitLab</li> <li>Bibucket </li> </ul> <p>Wir zeigen das Verwenden eines zentralen Repositories exemplarisch f\u00fcr <code>GitHub</code>. Sie m\u00fcssen sich in <code>GitHub</code> registrieren. Die Verwendung von <code>GitHub</code> ist kostenlos. Die Idee eines zentralen Repositorys ist die, dass daran mehrere lokale Repositories angebunden sein k\u00f6nnen:</p> <p></p> <p>\u00dcber das zentrale Repository werden alle lokalen Repositories synchronisiert, so dass alle Repositories \u00fcber den gleichen Stand, d.h. alle Dateien und Ordner sowie die gleiche Commit-Historie verf\u00fcgen. Wichtig ist jedoch, dass man zum Entwickeln nicht permanent online sein muss. Vielmehr kann man beliebig lange offline auf dem eigenen lokalen Repository arbeiten, bis man irgendwann seine \u00c4nderungen in das zentrale Repository schreiben (push) bzw. dort abgelegte \u00c4nderungen aus anderen lokalen Repositories lesen (pull) m\u00f6chte.</p>"},{"location":"git/#ein-zentrales-repository-anlegen","title":"Ein zentrales Repository anlegen","text":"<p>Sie loggen sich in <code>GitHub</code> (oder dem von Ihnen gew\u00e4hlten Diensteanbieter) ein und klicken auf \"New\":</p> <p></p> <p>Dann geben Sie einen sprechenden Namen f\u00fcr das Repository ein. Sie k\u00f6nnen w\u00e4hlen, ob das Repository <code>Public</code> (f\u00fcr alle lesbar) oder <code>Private</code> (nur f\u00fcr Eingeladene lesbar) sein soll. Die darunter stehenden Checkboxen sollten Sie nicht anklicken, da Sie ein bereits existierendes lokales Repository mit diesem zentralen Repository verbinden wollen. In Ihrem lokalen Repository haben Sie ja wahrscheinlich bereits eine <code>.gitignore</code>-Datei. W\u00fcrden Sie diese Checkboxen markieren, m\u00fcssten Sie bereits ganz am Anfang mergen. Klicken Sie auf den Button <code>Create repository</code>. </p> <p></p> <p>Das zentrale Repository ist nun erstellt. Nun m\u00fcssen wir nur noch vorgehen, wie auf der Seite angegeben:</p> <p></p> <p>Im Terminal f\u00fchren wir im <code>workspace</code>-Ordner (in unserem lokalen Repository - der Ordner, der den <code>.git</code>-Ordner enth\u00e4lt) den Befehl </p> <pre><code>git remote add origin https://github.com/jfreiheit/einfuehrung-git.git\n</code></pre> <p>aus. <code>https://github.com/jfreiheit/einfuehrung-git.git</code> entspricht dabei der sogenannten Remote-URL  und lautet bei Ihnen nat\u00fcrlich anders. Es ist der Pfad (die URL) zu Ihrem zentralen Git-Repository. Mit diesem Befehl verbinden wir unser lokales Git-Repository mit dem zentralen Git-Repository. Wir geben dem zentralen Git-Repository dabei den Namen <code>origin</code>.</p> <p>Den n\u00e4chsten von <code>GitHub</code> vorgeschlagenen Befehl</p> <pre><code>git branch -M main\n</code></pre> <p>k\u00f6nnen wir ebenfalls ausf\u00fchren. Wir wissen bereits, dass wir damit einen neuen Branch erstellen, n\u00e4mlich <code>main</code>. Wir verlassen also den master-Branch und wechseln zu einem neuen main-Branch. Das kann man machen, muss man aber nicht. Die Option <code>-M</code> steht f\u00fcr <code>--move --force</code>. Damit bestimmen wir, dass wir einen <code>main</code>-Branch erstellen, selbst wenn dieser bereits existierte. Siehe auch die Dokumentation f\u00fcr git branch.</p> <p>Der dritte von <code>GitHub</code> vorgeschlagene Befehl </p> <pre><code>git push -u origin main\n</code></pre> <p>bewirkt, dass unser komplettes lokales Git-Repository auf das zentrale Git-Repository gespielt wird. Das hei\u00dft, der aktuelle Branch <code>main</code> wird auf das zentrale Git-Repository <code>origin</code> gepushed. Nach Ausf\u00fchrung dieses Befehls ist das zentrale Repository auf dem selben Stand wie das lokale Repository. </p>"},{"location":"git/#alltag-mit-git","title":"Alltag mit Git","text":"<p>Ihr lokales Repository ist nun mit dem zentralen Repository verkn\u00fcpft. Wenn Sie jetzt \u00c4nderungen an Ihrem Code (Ihrem lokalen Repository) durchf\u00fchren und diese \u00c4nderungen auf dem zentralen Repository speichern wollen, sieht Ihr \"Alltag\" wie folgt aus. </p>"},{"location":"git/#git-add-eine-neue-datei-hinzufugen","title":"git add - eine neue Datei hinzuf\u00fcgen","text":"<p>Angenommen, Sie erstellen eine neue Klasse (Datei), z.B. <code>Projekt1/src/E.java</code>, dann f\u00fcgen Sie diese neue Datei mit <code>git add &lt;neueDatei&gt;</code> Ihrem lokalen Repository hinzu:</p> <pre><code>git add Projekt1/src/E.java\n</code></pre> <p>Wenn Sie sich dann mit <code>git status</code> den Status des Repositorys anschauen, erhalten Sie</p> <pre><code>Auf Branch main\nIhr Branch ist auf demselben Stand wie 'origin/main'.\n\nZum Commit vorgemerkte \u00c4nderungen:\n  (benutzen Sie \"git restore --staged &lt;Datei&gt;...\" zum Entfernen aus der Staging-Area)\n    neue Datei:     Projekt1/src/E.java\n</code></pre> <p>Neue Dateien f\u00fcgen Sie mittels <code>git add &lt;neueDatei&gt;</code> dem Repository hinzu. </p>"},{"location":"git/#git-commit-anderungen-speichern","title":"git commit - \u00c4nderungen \"speichern\"","text":"<p>Angenommen, Sie haben \u00c4nderungen an Dateien hinzugef\u00fcgt, diese Dateien sind aber bereits Teil des Repositorys (wurden also bereits bei Erstellung mit <code>git add</code> hinzugef\u00fcgt). Dann speichern Sie diese \u00c4nderungen mit <code>git commit -am \"Commit-Message\"</code>. Angenommen, wir haben in <code>Projekt1/src/E.java</code> 2 Zeilen hinzugef\u00fcgt, dann committen wir diese \u00c4nderungen z.B. mit </p> <pre><code>git commit -am \"in E.java 2 Zeilen hinzugefuegt\"\n</code></pre> <p>Die Option <code>-m</code> steht daf\u00fcr, dass wir gleich die Commit-Message mit angeben. Fehlt diese Option, \u00f6ffnet sich ein <code>vi</code> und wir f\u00fcgen die Commit-Message nachtr\u00e4glich hinzu. Den <code>vi</code> verlassen wir mit <code>ZZ</code>. </p> <p>Die Option <code>-a</code> steht f\u00fcr <code>add</code>. Jede \u00c4nderung muss zun\u00e4chst hinzugef\u00fcgt werden. H\u00e4ufig sieht man daf\u00fcr die Verwendung des Befehls <code>git add .</code>. Das l\u00e4sst sich aber mit der Option <code>-a</code> auch beim Commit selbst erledigen. </p> <p>Wenn Sie sich dann mit <code>git status</code> den Status des Repositorys anschauen, erhalten Sie</p> <pre><code>Auf Branch main\nIhr Branch ist 1 Commit vor 'origin/main'.\n  (benutzen Sie \"git push\", um lokale Commits zu publizieren)\n\nnichts zu committen, Arbeitsverzeichnis unver\u00e4ndert\n</code></pre> <p>\u00c4nderungen am Code (Repository) \"committen\" (speichern) Sie mittels <code>git commit -am \"Commit-Message\"</code>. </p>"},{"location":"git/#git-push-anderungen-auf-das-zentrale-repository-spielen","title":"git push - \u00c4nderungen auf das zentrale Repository spielen","text":"<p>Sie k\u00f6nnen beliebig lange und oft Ihr lokales Repository \u00e4ndern, wie im Abschnitt Git als Versionierungswerkzeug beschrieben. Wenn Sie Ihr lokales Repository auf Ihr zentrales Repository spielen m\u00f6chten, verwenden Sie den Befehl <code>git push</code>. Damit stellen Sie das zentrale Repository auf den Stand Ihres lokalen Repositorys. </p> <pre><code>git push\n</code></pre> <p>ergibt folgende Ausgabe:</p> <pre><code>Objekte aufz\u00e4hlen: 8, fertig.\nZ\u00e4hle Objekte: 100% (8/8), fertig.\nDelta-Kompression verwendet bis zu 8 Threads.\nKomprimiere Objekte: 100% (3/3), fertig.\nSchreibe Objekte: 100% (5/5), 439 Bytes | 439.00 KiB/s, fertig.\nGesamt 5 (Delta 1), Wiederverwendet 0 (Delta 0), Pack wiederverwendet 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo https://github.com/jfreiheit/einfuehrung-git.git\n   15d5e0b..6ddd0dc  main -&gt; main\n</code></pre> <p>Damit \u00fcbernimmt das zentrale Repository den Stand des lokalen Repositorys. </p> <p>Um das zentrale Repository auf den Stand Ihres lokalen Repositorys zu bringen, verwenden Sie <code>git push</code>.</p> <p>Das hei\u00dft, wenn Sie alleine an Ihrem zenztralen Repository arbeiten, m\u00fcssen sie sich nur folgende Befehle merken:</p> <ol> <li><code>git add &lt;datei&gt;</code>  // falls die Datei neu erstellt wurde und Ihrem Repository bekannt gemacht (hinzugef\u00fcgt) werden soll</li> <li><code>git commit -am \"Commit-Message\"</code> // um die \u00c4nderungen ins lokale Repository zu \"speichern\"</li> <li><code>git push</code>  // um das zentrale Repository auf den Stand des lokalen Repositorys zu bringen</li> </ol> <p>So sieht einfach sieht der Alltag aus, wenn Sie alleine am (zentralen) Repository arbeiten. </p>"},{"location":"git/#ein-existierendes-zentrales-repository-verwenden","title":"Ein existierendes zentrales Repository verwenden","text":"<p>Angenommen, jemand anderer besitzt ein zentrales Repository und m\u00f6chte den Code mit Ihnen teilen - angenommen, ich m\u00f6chte mit Ihnen den Code aus meinem Repository <code>https://github.com/jfreiheit/einfuehrung-git.git</code> teilen. Sie k\u00f6nnen dieses Repository klonen (kopieren), indem sie einmalig </p> <pre><code>git clone https://github.com/jfreiheit/einfuehrung-git.git\n</code></pre> <p>eingeben. Dadurch erstellen Sie sich ein lokales Repository, das einer identischen Kopie (einem Clone) des zentralen Repositorys <code>https://github.com/jfreiheit/einfuehrung-git.git</code> entspricht. Dieses lokale Repository ist dann bereits auch mit dem zentralen Repository verbunden. </p> <p>Angenommen, ich f\u00fchre nun \u00c4nderungen an diesem zentralen Repository durch und somit einige Commits. Damit diese \u00c4nderungen auch Ihrem lokalen Repository bekannt werden, f\u00fchren Sie</p> <pre><code>git pull\n</code></pre> <p>aus. Damit \"holen\" Sie sich den aktuellen Stand des zentralen Repositories. </p>"},{"location":"git/#git-config","title":"git config","text":"<p>Sollten Sie aufgefordert werden, einige Accountdetails in Ihrer Git-Konfiguration zu speichern, dann machen Sie das. Sie k\u00f6nnen diese Schritte selbst dann vornehmen, wenn Sie nicht dazu aufgefordert werden:</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre> <p>In den Strings geben Sie nat\u00fcrlich Ihre Daten an. Weitere Informationen zur Konfiguration von Git finden Sie auch hier.</p>"},{"location":"git/#nutzliche-links-zu-git","title":"N\u00fctzliche Links zu Git","text":"<ul> <li>Git Dokumentation</li> <li>Git Buch</li> <li>Lerne Git mit Bitbucket Cloud</li> <li>Git-Tutorial: Git und die wichtigsten Befehle kennenlernen</li> <li>Learn Git Branching</li> <li>Git - Der einfache Einstieg</li> <li>Git in Bildern</li> <li>Visualizing Git Concepts</li> <li>Git Kata</li> <li>noch mehr Git Katas</li> </ul>"},{"location":"git/#egit-git-mit-eclipse","title":"EGit - Git mit Eclipse","text":"<p>Mit EGit integrieren Sie Git in Eclipse. Sie k\u00f6nnen pr\u00fcfen, ob Sie EGit bereits in Eclipse installiert haben, indem Sie in Eclipse unter <code>Help</code>\u2192<code>Eclipse Marketplace</code> den Reiter <code>Installed</code> anklicken und schauen, ob <code>EGit</code> in dieser Liste auftaucht. Wenn nicht, w\u00e4hlen Sie den Reiter <code>Search</code> und geben in die Suchleiste <code>EGit</code> ein und installieren das PlugIn. Sie k\u00f6nnen auch unter <code>Help</code>\u2192<code>Install new Software...</code> diese URL eintragen, um EGit zu installieren: http://download.eclipse.org/egit/updates. </p> <p>Sie finden die Installationsanleitung auch unter https://www.eclipse.org/egit/ oder z.B. auch hier und hier.</p> <p>Beim Verbinden Ihres lokalen Repositories mit Eclipse k\u00f6nnen Sie z.B. vorgehen wie hier beschrieben oder hier. </p>"},{"location":"rest/","title":"REST-API mit Spring","text":"<p>Zur Erstellung einer REST-API mit Spring Boot verwenden wir zur Initialisierung des Projektes den Spring Initializr (k\u00f6nnen Sie aber auch direkt in IntelliJ Ultimate machen: File -&gt; New -&gt; Project -&gt; Spring Initializr) und binden zun\u00e4chst folgende Abh\u00e4ngigkeiten in unser Projekt ein:</p> <ul> <li>Spring Web</li> <li>Spring Data JPA </li> <li>PostgreSQL Driver</li> </ul> <p>Klicken Sie auf <code>Generate</code> und speichern Sie die <code>rest.zip</code> in Ihrem Projekte-Ordner und entpacken die Datei dort. </p> Spring Initializr - auch genauso in IntelliJ"},{"location":"rest/#erstellen-einer-postgresql-datenbank","title":"Erstellen einer PostgreSQL-Datenbank","text":"<p>Hier wird gezeigt, wie Sie den HTW-Server ocean.f4.htw-berlin.de verwenden und anbinden k\u00f6nnen. Sie k\u00f6nnen PostgreSQL aber auch einfach lokal installieren (siehe hier). </p> <p>Rufen Sie ocean.f4.htw-berlin.de auf und erstellen sich eine Datenbank, hier <code>rest_jf</code>. Klicken Sie die neu erstellte Datenbank an und w\u00e4hlen dann den Tab <code>Users</code>. Erzeugen Sie dort mithilfe von <code>Add new user</code> einen neuen Nutzer f\u00fcr die Datenbank, hier <code>rest_jf_rest_user</code>. Lassen Sie sich das generierte Passwort anzeigen:</p> Datenbank rest_jf auf Ocean erstellt <p>\u00d6ffnen Sie das Projekt in IntelliJ. Wenn Sie sich bei JetBrains mit Ihrer HTW-E-Mail-Adresse anmelden, erhalten Sie kostenlos die Ultimate-Version der IDEA. </p> <p>Im Ordner <code>src/main/resources</code> finden Sie die <code>applications.properties</code>. \u00d6ffnen Sie diese und f\u00fcgen Sie die Konfigurationsdaten f\u00fcr Ihre Datenbank auf Ocean hinzu:</p> applications.properties <pre><code>spring.application.name=rest\nspring.datasource.url=jdbc:postgresql://psql.f4.htw-berlin.de:5432/rest_jf\nspring.datasource.username=rest_jf_rest_user\nspring.datasource.password=AhzBkc6m0\nspring.jpa.hibernate.ddl-auto=create\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n</code></pre> <p>F\u00fcr die Eigenschaft <code>spring.jpa.hibernate.ddl-auto</code> haben Sie 5 Werte zur Auswahl:</p> <ul> <li><code>create</code> \u2013 Beim Start Ihrer Anwendung werden alle Tabellen, die von Hibernate verwaltet werden, gel\u00f6scht und g\u00e4nzlich neu kreiert. </li> <li><code>create-drop</code> \u2013 Beim Start Ihrer Anwendung werden alle Tabellen, die von Hibernate verwaltet werden, neu kreiert und wenn die Anwendung geschlossen wird, werden die Tabellen gel\u00f6scht.</li> <li><code>update</code> \u2013 Beim Start der Anwendung werden die bereits existierenden Tabllen an die Schemata von Hibernate angepasst, wenn n\u00f6tig. </li> <li><code>validate</code> \u2013 Beim Start der Anwendung wird gepr\u00fcft, ob die existierenden Tabellen mit den Schemata von Hibernate \u00fcbereinstimmen. Wenn nicht, wird eine Exception geworfen. </li> <li><code>none</code> \u2013 Es wird keine automatische Schemata-Verwaltung durchgef\u00fchrt. </li> </ul> <p>Es ist nicht gut, die sensitiven Daten, wie z.B. <code>password</code> in Klarsicht in der <code>application.properties</code> abzulegen. Sie sollten sich dazu eigene Umgebeungsvariablen erstellen, z.B. <code>OCEAN_PASSWORD</code> und k\u00f6nnen dann in der <code>application.properties</code> per <code>${OCEAN_PASSWORD}</code> darauf zugreifen. Siehe z.B. external configuration.</p> <p>Sie k\u00f6nnen Ihre Anwendung jetzt bereits einmal starten. Es sollten keine Fehler auftreten. </p>"},{"location":"rest/#eine-java-entitat-mit-hibernate-erstellen","title":"Eine Java-Entit\u00e4t mit Hibernate erstellen","text":"<p>Wir wollen eine Entit\u00e4t <code>User</code> erstellen. Diese soll folgende Attribute enthalten:</p> <ul> <li><code>id</code></li> <li><code>username</code></li> <li><code>password</code></li> <li><code>email</code></li> <li><code>role</code></li> </ul> <p>Erstellen Sie dazu im Package <code>htw.fiw.rest</code> ein neues Package <code>user</code> und darin eine neue Java-Klasse <code>User</code>. Diese Klasse sieht wie folgt aus:</p> user/User.java <pre><code>package htw.fiw.rest.user;\n\nimport java.util.Objects;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.Id;\n\n@Entity\n@Table(name=\"users\")\npublic class User {\n\n    private @Id\n    @GeneratedValue Long id;\n    private String username;\n    private String password;\n    private String email;\n    private String role;\n\n    public User() {}\n\n    public User(String username, String password, String email, String role) {\n\n        this.username = username;\n        this.password = password;\n        this.email = email;\n        this.role = role;\n    }\n\n    public Long getId() {\n        return this.id;\n    }\n\n    public String getUsername() {\n        return this.username;\n    }\n\n    public String getPassword() {\n        return this.password;\n    }\n    public String getEmail() {\n        return this.email;\n    }\n    public String getRole() {\n        return this.role;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if(o == null) return false;\n        if (this == o) return true;\n        if (!(o instanceof User))  return false;\n        User user = (User) o;\n        return  Objects.equals(this.id, user.id) &amp;&amp;\n                Objects.equals(this.username, user.username) &amp;&amp;\n                Objects.equals(this.email, user.email) &amp;&amp;\n                Objects.equals(this.role, user.role);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(this.id, this.username, this.email, this.role);\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"id=\" + this.id + \", username='\" + this.username + '\\'' +\n                \", email='\" + this.email + '\\'' + \", role='\" + this.role + '\\'' + '}';\n    }\n}\n</code></pre> <p>Wir br\u00e4uchten nur die Annotation <code>@Entity</code>, auf <code>@Table</code> k\u00f6nnte verzichtet werden. Dann w\u00fcrde in PostgreSQL eine Tabelle erstellt werden, die <code>user</code> hei\u00dft. Mit der <code>@Table</code>-Annotation k\u00f6nnen wir z.B. deren Namen (auf <code>users</code>) \u00e4ndern.  </p>"},{"location":"rest/#ein-java-repository-erstellen","title":"Ein Java-Repository erstellen","text":"<p>Wir haben nun eine Entit\u00e4t definiert, f\u00fcr die eine Tabelle in der Datenbank erstellt wird. F\u00fcr diese Tabelle wollen wir die CRUD-Funktionen implementieren, um </p> <ul> <li><code>user</code> der Tabelle hinzuzuf\u00fcgen (**C**reate), </li> <li><code>user</code> auszulesen, einen, alle oder nach bestimmten Eigenschaften suchen (**R**ead),</li> <li><code>user</code>-Daten zu aktualisieren/zu \u00e4ndern (**U**pdate),</li> <li><code>user</code> zu l\u00f6schen (**D**elete).</li> </ul> <p>Daf\u00fcr existieren verschiedene Repository-Implementierungen, die diese CRUD-Funktionen bereits als abstrakte Methoden zur Verf\u00fcgung stellen. Wir bleiben bei Hibernate (JPA) und verwenden das Interface <code>JpaRepository</code>. Wir erstellen uns im package <code>user</code> das Interface <code>UserRepository</code>, welches von <code>JpaRepository</code> erbt. </p> user/UserRepository.java <pre><code>package htw.fiw.rest.user;\n\nimport htw.fiw.rest.entities.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n}\n</code></pre> <p>Damit haben wir bereits ein ausf\u00fchrbares Programm und sind nun in der Lage, CRUD-Funktionlit\u00e4ten konkret zu implementieren. Zun\u00e4chst wollen wir jedoch unsere Tabelle schonmal mit ein paar Daten vorbef\u00fcllen:</p>"},{"location":"rest/#daten-laden","title":"Daten laden","text":"<p>Wir erstellen uns eine Klasse <code>LoadUserData</code> in unserem Package <code>user</code>:</p> user/LoadUserData.java <pre><code>package htw.fiw.rest.user;\n\nimport htw.fiw.rest.entities.User;\nimport htw.fiw.rest.repositories.UserRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class LoadUserData {\n    private static final Logger log = LoggerFactory.getLogger(LoadUserData.class);\n\n    @Bean\n    CommandLineRunner initDatabase(UserRepository repository) {\n\n        return args -&gt; {\n            log.info(\"Preloading \" + repository.save(new User(\"user1\", \"pass1234\", \"user1@test.de\", \"admin\")));\n            log.info(\"Preloading \" + repository.save(new User(\"user2\", \"pass1234\", \"user2@test.de\", \"user\")));\n            log.info(\"Preloading \" + repository.save(new User(\"user3\", \"pass1234\", \"user3@test.de\", \"user\")));\n            log.info(\"Preloading \" + repository.save(new User(\"user4\", \"pass1234\", \"user4@test.de\", \"user\")));\n        };\n    }\n}\n</code></pre> <p>Spring Boot f\u00fchrt automatisch alle <code>CommandLineRunner</code>-Beans aus, sobald die Anwendung. Der <code>CommandLineRunner</code> in <code>LoadUserData</code> erwartet ein <code>UserRepository</code> und kann daf\u00fcr <code>save()</code>-Methode aufrufen, die 4 <code>user</code> in die Tabelle <code>user</code> eintr\u00e4gt. </p>"},{"location":"rest/#pgadmin4","title":"pgAdmin4","text":"<p>Installieren Sie sich pgAdmin und verbinden Sie sich dort mit dem Ocean-Server. Beachten Sie, dass Sie bei der Verbindungsherstellung den Nutzernamen (und das Passwort) verwenden, mit dem Sie sich im Spring-Boot-Projekt authentifiziert haben. In <code>pgAdmin</code> k\u00f6nnen Sie sich anschauen, ob die Daten in die Datenbank eingetragen wurden:</p> pgAdmin4 <p>Sie k\u00f6nnen sich aber auch in IntelliJ direkt mit der Datenbank verbinden, siehe z.B. hier.</p> <p></p>"},{"location":"rest/#passworter-verschlusseln","title":"Passw\u00f6rter verschl\u00fcsseln","text":"<p>An dieser Stelle f\u00e4llt auf, dass wir die Passw\u00f6rter unverschl\u00fcsselt in der Datenbank abspeichern. Das wollen wir nat\u00fcrlich nicht. Wir verwenden BCrypt zur Verschl\u00fcsselung und zum Vergleich von Passw\u00f6rtern mit verschl\u00fcsselten Passw\u00f6rtern. Dazu m\u00fcssen wir zun\u00e4chst folgende dependency unserem <code>pom.xml</code> hinzuf\u00fcgen:</p> pom.xml <pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-core&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n</code></pre> <p>Nun f\u00fcgen wir der (Programm-)Klasse <code>RestApplication</code> ein Bean hinzu. Beans sind Komponenten in unserer Anwendung. Die <code>run()</code>-Methode innerhalb der <code>main()</code>-Methode liefert uns den sogenannten Anwendungskontext. Das sind, vereinfacht gesagt, alle Komponenten, die der Anwendung zur Verf\u00fcgung stehen. Die Anzahl der Komponenten l\u00e4sst sich erweitern. Wir erweitern um die Komponente <code>BCryptPasswordEncoder</code>:</p> RestApplication.java <pre><code>package htw.fiw.rest;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@SpringBootApplication\npublic class RestApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RestApplication.class, args);\n    }\n\n    @Bean\n    public BCryptPasswordEncoder bCryptPasswordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n</code></pre> <p>Dieses Bean l\u00e4sst sich nun \u00fcberall injizieren. Wir injizieren das Bean in unsere Klasse <code>LoadUserData.java</code> und rufen die Methode <code>encode()</code> auf, um unsere Passw\u00f6rter zu verschl\u00fcsseln:</p> user/LoadUserData.java <pre><code>package htw.fiw.rest.user;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@Configuration\npublic class LoadUserData {\n    private static final Logger log = LoggerFactory.getLogger(LoadUserData.class);\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\n\n    public LoadUserData(BCryptPasswordEncoder bCryptPasswordEncoder) {\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\n    }\n\n    @Bean\n    CommandLineRunner initDatabase(UserRepository repository) {\n\n        return args -&gt; {\n            log.info(\"Preloading \" + repository.save(new User(\"user1\", bCryptPasswordEncoder.encode(\"pass1234\"), \"user1@test.de\", \"admin\")));\n            log.info(\"Preloading \" + repository.save(new User(\"user2\", bCryptPasswordEncoder.encode(\"pass1234\"), \"user2@test.de\", \"user\")));\n            log.info(\"Preloading \" + repository.save(new User(\"user3\", bCryptPasswordEncoder.encode(\"pass1234\"), \"user3@test.de\", \"user\")));\n            log.info(\"Preloading \" + repository.save(new User(\"user4\", bCryptPasswordEncoder.encode(\"pass1234\"), \"user4@test.de\", \"user\")));\n        };\n    }\n}\n</code></pre> <p>Die Passw\u00f6rter werden nun verschl\u00fcsselt in der Datenbank abgelegt:</p> <p></p>"},{"location":"rest/#endpunkte-definieren-get-all","title":"Endpunkte definieren - GET all","text":"<p>Nun m\u00fcssen wir nur noch eine HTTP-Anbindung durchf\u00fchren, d.h. unser <code>Repository</code> wird von einer \"Web-Schicht\" umschlossen. Dazu verwenden wir die Annotation <code>@RestController</code> in einer neuen Klasse <code>UserController</code>. In diese Klasse injizieren wir das <code>UserRepository</code>. Dann haben wir passend zu den HTTP-Anfragemethoden die entsprechenden Annotationen, um unsere Routen zu definieren:</p> \u00a0Annotation f\u00fcr die Route \u00a0HTTP-Anfragemethode CRUD-Funktion <code>@GetMapping</code> <code>GET</code> <code>R</code>ead <code>@PostMapping</code> <code>POST</code> <code>C</code>reate <code>@PutMapping</code> <code>PUT</code> <code>U</code>pdate <code>@DeleteMapping</code> <code>DELETE</code> <code>D</code>elete <p>Wir erstellen die Klasse <code>UserController</code> und definieren uns unseren ersten Endpunkt <code>GET /user</code>.</p> user/UserController.java <pre><code>package htw.fiw.rest.user;\n\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\npublic class UserController {\n\n    private final UserRepository userRepository;\n\n    public UserController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @GetMapping(\"/user\")\n    List&lt;User&gt; getAll() {\n        return userRepository.findAll();\n    }\n\n\n    /*\n     * hier definieren wir gleich noch weitere Endpunkte\n     */\n}\n</code></pre> <p>Wir k\u00f6nnen unseren Endpunkt nun bereits testen. Wir f\u00fchren die Anwendung aus und der Webserver <code>http://localhost</code> \"lauscht\" am Port <code>8080</code> auf eingehende <code>Requests</code>. Da es sich um eine <code>GET</code>-Anfrage handelt, k\u00f6nnen wir diese sogar im Browser aufrufen:</p> <p></p> <p>F\u00fcr die anderen HTTP-Anfragemethoden k\u00f6nnen wir den Browser jedoch nicht mehr verwenden. Stattdessen sollten wir einen REST-Client, wie z.B. Postman installieren:</p> <p></p> <p>Eine weitere M\u00f6glichkeit besteht darin, HTTP-Request direkt in IntelliJ auszuf\u00fchren, siehe dazu hier. Klicken Sie dazu links vom <code>GET-Endpunkt</code> auf das kleine Icon <code>Open in HTTP Client</code>. Es \u00f6ffnet sich ein Editorfenster <code>generated-request.htpp</code>. Dort k\u00f6nnen Sie den Endpunkt ausf\u00fchren:</p> <p></p> <p>Wir verwenden im Folgenden Postman.</p>"},{"location":"rest/#get-one-by-id","title":"GET one by id","text":"<p>Wir wollen einen weiteren Endpunkt erstellen, <code>GET /user/:id</code>, d.h. wir wollen den <code>user</code> als Response erhalten, der in der Datenbank unter einer bestimmten <code>id</code> gespeichert ist. Es handelt sich dabei um eine parametrisierte Route. Wir f\u00fchren zwei Neuerungen ein:</p> <ul> <li>die Behandlung von parametrisierten Routen und</li> <li>die Behandlung von nicht gefundenen Ressourcen. Es kann ja sein, dass eine <code>id</code> angefragt wird, f\u00fcr die es keinen passenden Datensatz in der Datenbank gibt.</li> </ul> <p>Zun\u00e4chst der Endpunkt:</p> user/UserController.java <pre><code>@GetMapping(\"/user/{id}\")\nUser one(@PathVariable Long id) {\n\n    return userRepository.findById(id)\n            .orElseThrow(() -&gt; new UserNotFoundException(id));\n}\n</code></pre> <p>Wir \u00fcbergeben der <code>one()</code>-Methode die gesuchte <code>id</code> als <code>@PathVariable</code>. Es wird in der Datenbank nach einem <code>user</code> mit der <code>id</code> gesucht (<code>findById()</code>) und dieser <code>user</code> als Response zur\u00fcckgegeben. Falls ein solcher <code>user</code> (die <code>id</code>) jedoch nicht existiert, werfen wir eine <code>UserNotFoundException</code>. Diese definieren wir uns im Folgenden:</p> user/UserNotFoundException.java <pre><code>package htw.fiw.rest.user;\n\npublic class UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(Long id) {\n        super(\"Could not find user with id=\" + id);\n    }\n}\n</code></pre> <p>Die Klasse erbt von <code>RunTimeException</code> und \u00fcbergibt dem Konstruktor von <code>RunTimeException</code> die error-Message <code>\"Could not find user with id=\" + id</code>. Damit dieser <code>404</code>-Fehler auch in der Response erscheint (derzeit wird einfach nur eine Exception geworfen), ben\u00f6tigen wir noch eine <code>@RestControllerAdvice</code>. </p> user/UserNotFoundAdvice.java <pre><code>package htw.fiw.rest.user;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class UserNotFoundAdvice {\n\n    @ExceptionHandler(UserNotFoundException.class)\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    String userNotFoundHandler(UserNotFoundException ex) {\n        return ex.getMessage();\n    }\n}\n</code></pre> <p>Der <code>@ExceptionHandler</code> sorgt daf\u00fcr, dass der <code>@RestControllerAdvice</code> genau dann in das Response-Objekt eingef\u00fcgt wird, wenn eine <code>UserNotFoundException</code> geworfen wird. Der <code>@ResponseStatus</code> wird auf die vordefinierte Konstatnte <code>HttpStatus.NOT_Found</code> gesetzt, das ist der <code>404</code>-Http-Status.</p> <p>Nach Neustart der Anwendung k\u00f6nnen wir diesen Endpunkt nun ausprobieren. Wenn die <code>id</code> existiert  (hier <code>GET http://localhost:8080/user/2</code>), dann wird der entsprechende Datensatz zur\u00fcckgegeben (Http-Status <code>200</code>):</p> gefundener Datensatz als Response - 200 OK <p>Existiert der Datensatz jedoch nicht (hier <code>GET http://localhost:8080/user/5</code>), dann erscheint eine Fehlermeldung mit Http-Status <code>404</code>:</p> Http-Status-Code 404 Not Found"},{"location":"rest/#post-new-user","title":"POST new user","text":"<p>Wir erzeugen einen Endpunkt, mit dem wir einen neuen <code>user</code> in der Datenbank anlegen k\u00f6nnen. Dazu wird als Http-Anfragemethode <code>POST</code> verwendet, d.h. wir nutzen die Annotation <code>@PostMapping</code>. Au\u00dferdem m\u00fcssen nun die Daten \u00fcber den neuen <code>user</code> im <code>Body</code> des <code>Request</code>-Objektes mitgesendet werden. Dazu verwenden wir als Annotation des Parameters der Methode nun <code>@RequestBody</code>. Eine sehr einfache Implementierung w\u00fcrde wie folgt aussehen:</p> user/UserController.java <pre><code>@PostMapping(\"/user\")\nUser newEmployee(@RequestBody User newUser) {\n    return userRepository.save(newUser);\n}\n</code></pre> <p>Das w\u00fcrde auch bereits funktionieren:</p> speichert bereits, aber noch problematisch <p>In der oberen H\u00e4lfte in Postman wird das <code>Request</code>-Objekt spezifiziert. Wir haben dort im <code>Body</code> (beachte <code>raw</code> und <code>JSON</code>) den zu erzeugenden Datensatz definiert:</p> <pre><code>{\n    \"username\": \"user5\",\n    \"password\": \"pass1234\",\n    \"email\": \"user5@test.de\",\n    \"role\" : \"admin\"\n}\n</code></pre> <p>Au\u00dferdem wurde als Anfragemethode <code>POST</code> gew\u00e4hlt und die Route ist <code>/user</code>. Als <code>Response</code> erhalten wir den neu erzeugten Datensatz in der Datenbank. PostgreSQL vergibt beim Einf\u00fcgen automatisch eine eindeutige <code>id</code>, diese wird uns in der <code>Response</code> mitgeschickt.</p> <p>Zwei Dinge st\u00f6ren jedoch an dieser einfachen Implementierung:</p> <ul> <li>das Password wird nicht verschl\u00fcsselt und</li> <li>es wird nicht gepr\u00fcft, ob der <code>username</code> und/oder die <code>email</code> eventuell bereits existier_t/en. F\u00fcr den Fall soll der neue <code>user</code> nicht angelegt werden. </li> </ul> <p>Wir k\u00fcmmern uns zun\u00e4chst um die Verschl\u00fcsselung des Passwortes. Wie bereits in der Klasse <code>LoadUserData</code> injizieren wir das Bean <code>BCryptPasswordEncoder</code> in die Klasse <code>UserController</code>:</p> user/UserController.java <pre><code>private final UserRepository userRepository;\nprivate final BCryptPasswordEncoder bCryptPasswordEncoder;\n\npublic UserController(UserRepository userRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {\n    this.userRepository = userRepository;\n    this.bCryptPasswordEncoder = bCryptPasswordEncoder;\n}\n</code></pre> <p>und k\u00f6nnen damit das Passwort verschl\u00fcsseln:</p> user/UserController.java <pre><code>@PostMapping(\"/user\")\nUser newEmployee(@RequestBody User newUser) {\n    String hashPassword = bCryptPasswordEncoder.encode(newUser.getPassword());\n    newUser.setPassword(hashPassword);\n    return userRepository.save(newUser);\n}\n</code></pre> Passwort nun verschl\u00fcsselt in der Datenbank <p>Um herauszubekommen, ob ein bestimmter <code>username</code> oder eine <code>email</code> bereits in der Datenbank existiert, br\u00e4uchten wir eine Methode <code>findByUsername()</code> und/oder <code>findByEmail()</code>. Wir haben beim <code>GET /user/id</code>-Endpunkt bereits mit der <code>findById()</code>-Methode gearbeitet. Es existiert im <code>JpaRepository</code> jedoch weder die Methode <code>findByUsername()</code> noch <code>findByEmail()</code>. Diese m\u00fcssen wir uns erst erstellen. Dazu erg\u00e4nzen wir diese Methoden im <code>UserRepository</code>:</p> user/UserRepository.java <pre><code>package htw.fiw.rest.user;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\n\nimport java.util.List;\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    List&lt;User&gt; findByUsername(String username);\n\n    @Query(\"select u from User u where u.email = ?1\")\n    List&lt;User&gt; findByEmail(String email);\n\n    @Query(\"select u from User u where u.username = :username or u.email = :email\")\n    List&lt;User&gt; findByUsernameOrEmail(@Param(\"username\") String username,\n                                     @Param(\"email\") String email);\n}\n</code></pre> <p>Wir haben gleich drei Methoden hinzugef\u00fcgt, um die unterschiedlichen Prinzipien zu zeigen. </p> <ul> <li>Das Erstaunliche ist, dass bereits die Methode <code>findByUsername(String username)</code> funktioniert, ohne dass eine <code>@Query</code> daf\u00fcr angegeben wurde. Spring erkennt an den Namen (der Methode und des Parameters), dass nach <code>username</code> gesucht wird. </li> <li>Die Methode <code>List&lt;User&gt; findByEmail(String email)</code> w\u00fcrde deshalb auch ohne <code>@Query</code> funktionieren, aber wir haben hier die Verwendung mal gezeigt. F\u00fcr den namenlosen Parameter <code>?1</code> wird <code>String email</code> eingesetzt. </li> <li>Bei der Definition der Methode <code>findByUsernameOrEmail()</code> haben wir in der <code>@Query</code> benannte Parameter verwendet (<code>:username</code> und <code>:email</code>). Das Binding an diese Parameter erfolgt mittels <code>@Param()</code>.</li> </ul> <p>Wir verwenden jetzt die <code>findByUsernameOrEmail()</code>-Methode, um zu verhindern, dass ein <code>user</code> neu hinzugef\u00fcgt wird, dessen <code>username</code> und/oder <code>email</code> bereits in der Datenbank enthalten ist:</p> user/UserController.java <pre><code>@PostMapping(\"/user\")\nUser newUser(@RequestBody User newUser) {\n    List&lt;User&gt; response = userRepository.findByUsernameOrEmail(newUser.getUsername(), newUser.getEmail());\n    if (response.isEmpty()) {\n        String hashPassword = bCryptPasswordEncoder.encode(newUser.getPassword());\n        newUser.setPassword(hashPassword);\n        return userRepository.save(newUser);\n    } else throw new UserAlreadyExistsException(newUser.getUsername(), newUser.getEmail());\n}\n</code></pre> <p>Wir werfen eine <code>UserAlreadyExistsException</code>, falls der <code>username</code> und/oder die <code>email</code> bereits existiert. Diese <code>UserAlreadyExistsException</code>-Klasse m\u00fcssen wir uns erst noch erstellen:</p> user/UserAlreadyExistsException.java <pre><code>package htw.fiw.rest.user;\n\npublic class UserAlreadyExistsException extends RuntimeException {\n    public UserAlreadyExistsException(String username, String email) {\n\n        super(\"user with username \" + username + \" and/or with email \" + email + \" already exists\");\n    }\n}\n</code></pre> <p>und sie mit in die Klasse <code>UserNotFoundAdvice</code> integrieren:</p> user/UserNotFoundAdvice.java <pre><code>package htw.fiw.rest.user;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class UserNotFoundAdvice {\n\n    @ExceptionHandler(UserNotFoundException.class)\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    String userNotFoundHandler(UserNotFoundException ex) {\n        return ex.getMessage();\n    }\n\n\n    @ExceptionHandler(UserAlreadyExistsException.class)\n    @ResponseStatus(HttpStatus.CONFLICT)\n    String userExistsFoundHandler(UserAlreadyExistsException ex) {\n        return ex.getMessage();\n    }\n}\n</code></pre> <p>Ganz optimal ist der Name der Klasse nun nicht mehr, aber sobald eine <code>UserAlreadyExistsException</code> wird der Http-Status <code>409</code> in der Response \u00fcbermittelt und die Nachricht (Beispiel) <code>user with username user5 and/or with email user5@test.de already exists</code>.</p> <p>Wenn wir spezieller darauf reagieren wollen, ob genau der <code>username</code> oder genau die <code>email</code> bereits verwendet wird, m\u00fcssen wir die Methode <code>findByUsername()</code> und <code>findByEmail()</code> verwenden. Derzeit benutzen wir diese gar nicht. </p> <p>Eine weitere Verbesserungsm\u00f6glichkeit des Endpunktes besteht darin, dass die <code>save()</code>-Methode den Http-Status <code>200</code> zur\u00fcckgibt. F\u00fcr das Erzeugen neuer daten gibt es jedoch extra den Http-Status <code>201 - Created</code>. Um diesen in der Response zur\u00fcckzugeben, f\u00fchren wir folgende \u00c4nderung durch:</p> user/UserController.java <pre><code>@PostMapping(\"/user\")\nResponseEntity&lt;User&gt; newUser(@RequestBody User newUser) {\n    List&lt;User&gt; response = userRepository.findByUsernameOrEmail(newUser.getUsername(), newUser.getEmail());\n    if (response.isEmpty()) {\n        String hashPassword = bCryptPasswordEncoder.encode(newUser.getPassword());\n        newUser.setPassword(hashPassword);\n        return new ResponseEntity&lt;&gt;(userRepository.save(newUser), HttpStatus.CREATED);\n    } else throw new UserAlreadyExistsException(newUser.getUsername(), newUser.getEmail());\n}\n</code></pre> <p>Unsere Methode gibt nun eine <code>ResponseEntity</code> typisiert mit <code>User</code> zur\u00fcck. Diese erzeugen wir mithilfe von <code>new ResponseEntity&lt;&gt;()</code>, wobei der erste Parameter den Body unserer Response f\u00fcllt und der zweite den Http-Status \u00fcbertr\u00e4gt. Nun passt es:</p> Http-Status-Code nun 201 Created"},{"location":"rest/#put-user","title":"PUT user","text":"<p>Wir erstellen uns einen Endpunkt, um die Daten eines bereits existierenden Nutzers zu \u00e4ndern. Eine einfache Implementierung k\u00f6nnte wie folgt aussehen:</p> user/UserController.java <pre><code>@PutMapping(\"/user/{id}\")\nUser replaceUser(@RequestBody User newUser, @PathVariable Long id) {\n\n    return userRepository.findById(id)\n            .map(user -&gt; {\n                user.setUsername(newUser.getUsername());\n                user.setEmail(newUser.getEmail());\n                user.setRole(newUser.getRole());\n                return userRepository.save(user);\n            })\n            .orElseGet(() -&gt; userRepository.save(newUser));\n}\n</code></pre> <p>Es wird nach der <code>id</code> (wird als Parameter der Route hinzugef\u00fcgt) gesucht und wenn der Datensatz gefunden wird, werden die Eigenschaften (<code>username</code>, <code>email</code> und <code>role</code>) mit den Daten aus dem Request-Body aktualisiert. Wird der <code>user</code> jedoch nicht \u00fcber seine <code>id</code> gefunden, wird er der Datenbank neu hinzugef\u00fcgt. Das beinhaltet jedoch mehrere Probleme:</p> <ul> <li>Der Endpunkt sollte genau nur zur \u00c4nderung eines bereits bestehenden <code>user</code> genutzt werden und nicht f\u00fcr ein Erzeugen eines neuen. <code>orElseGet()</code> sollte also besser eine <code>UserNotFoundException</code> werfen.</li> <li>Die Daten aus dem Request-Body werden ungepr\u00fcft eingelesen. Dabei k\u00f6nnte es z.B. vorkommen, dass ein <code>user</code> auf einen <code>username</code> bzw. auf eine <code>email</code> g\u00e4ndert wird, die bereits existiert. Das wollten wir ja genau vermeiden (siehe oben Post new user).</li> <li>Au\u00dferdem w\u00e4re es sinnvoll, dass sich der <code>user</code> mit seinem Passwort autorisiert, um \u00fcberhaupt die \u00c4nderungen durchf\u00fchren zu d\u00fcrfen. </li> </ul> <p>Die erste einfache \u00c4nderung ist das Werfen der <code>UserNotFoundException</code>:</p> user/UserController.java <pre><code>@PutMapping(\"/user/{id}\")\nUser replaceUser(@RequestBody User newUser, @PathVariable Long id) {\n\n    return userRepository.findById(id)\n            .map(user -&gt; {\n                user.setUsername(newUser.getUsername());\n                user.setEmail(newUser.getEmail());\n                user.setRole(newUser.getRole());\n                return userRepository.save(user);\n            })\n            .orElseThrow(() -&gt; new UserNotFoundException(id));\n}\n</code></pre> <p>Nun pr\u00fcfen wir, ob der neue <code>username</code> bzw. die neue <code>email</code> nicht bereits existiert:</p> user/UserController.java <pre><code>@PutMapping(\"/user/{id}\")\nUser replaceUser(@RequestBody User newUser, @PathVariable Long id) {\n\n    return userRepository.findById(id)\n            .map(user -&gt; {\n                List&lt;User&gt; response = userRepository.findByUsernameOrEmail(newUser.getUsername(), newUser.getEmail());\n                if (response.isEmpty() || (response.size() == 1 &amp;&amp; response.getFirst().getId().equals(id))) {\n                    user.setUsername(newUser.getUsername());\n                    user.setEmail(newUser.getEmail());\n                    user.setRole(newUser.getRole());\n                    return userRepository.save(user);\n                } else throw new UserAlreadyExistsException(newUser.getUsername(), newUser.getEmail());\n            })\n            .orElseThrow(() -&gt; new UserNotFoundException(id));\n}\n</code></pre> <p>Dabei ist zu beachten, dass es ja sein kann, dass der <code>user</code> seinen <code>username</code> und/oder seine <code>email</code> behalten m\u00f6chte und z.B. nur die Rolle \u00e4ndern. Dann w\u00e4re ja die <code>response-List</code> nicht leer, sondern w\u00fcrde den <code>user</code> selbst enthalten. Wir pr\u00fcfen deshalb neben <code>response.isEmpty()</code> auch noch den Fall <code>response.size() == 1 &amp;&amp; response.getFirst().getId().equals(id)</code>. </p> <p>Nun pr\u00fcfen wir noch, ob das Passwort \u00fcberhaupt korrekt ist. Das Passwort im Request-Body (<code>newUser</code>) wird in Klarsicht \u00fcbertragen (sp\u00e4ter per <code>https</code>, deshalb ist es okay) und muss mit dem in der Datenbank verschl\u00fcsselt abgelegten Passwort \u00fcbereinstimmen. Daf\u00fcr beietet BCrypt die Methode <code>matches(plain, hashed)</code>.</p> user/UserController.java <pre><code>@PutMapping(\"/user/{id}\")\nUser replaceUser(@RequestBody User newUser, @PathVariable Long id) {\n\n    return userRepository.findById(id)\n            .map(user -&gt; {\n                if(bCryptPasswordEncoder.matches(newUser.getPassword(), user.getPassword())) {\n                    List&lt;User&gt; response = userRepository.findByUsernameOrEmail(newUser.getUsername(), newUser.getEmail());\n                    if (response.isEmpty() || (response.size() == 1 &amp;&amp; response.getFirst().getId().equals(id))) {\n                        user.setUsername(newUser.getUsername());\n                        user.setEmail(newUser.getEmail());\n                        user.setRole(newUser.getRole());\n                        return userRepository.save(user);\n                    } else throw new UserAlreadyExistsException(newUser.getUsername(), newUser.getEmail());\n                }\n                else throw new UserNotAuthorizedException();\n            })\n            .orElseThrow(() -&gt; new UserNotFoundException(id));\n}\n</code></pre> <p>Falls das Passwort nicht \u00fcbereinstimmt, werfen wir eine <code>UserNotAuthorizedException</code>. Die Erstellung kennen wir bereits:</p> user/UserAlreadyExistsException.javauser/UserNotFoundAdvice.java <pre><code>package htw.fiw.rest.user;\n\npublic class UserNotAuthorizedException extends RuntimeException {\n    public UserNotAuthorizedException() {\n        super(\"user not authorized\");\n    }\n}\n</code></pre> <pre><code>package htw.fiw.rest.user;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class UserNotFoundAdvice {\n\n    @ExceptionHandler(UserNotFoundException.class)\n    @ResponseStatus(HttpStatus.NOT_FOUND)\n    String userNotFoundHandler(UserNotFoundException ex) {\n        return ex.getMessage();\n    }\n\n    @ExceptionHandler(UserAlreadyExistsException.class)\n    @ResponseStatus(HttpStatus.CONFLICT)\n    String userExistsFoundHandler(UserAlreadyExistsException ex) {\n        return ex.getMessage();\n    }\n\n    @ExceptionHandler(UserNotAuthorizedException.class)\n    @ResponseStatus(HttpStatus.FORBIDDEN)\n    String userNotAuthorizedHandler(UserNotAuthorizedException ex) {\n        return ex.getMessage();\n    }\n}\n</code></pre> <p>Angenommen, in unserer Datenbank existiert folgender <code>user</code>:</p> <pre><code>{\n    \"id\": 5,\n    \"username\": \"user5\",\n    \"password\": \"$2a$10$ngnQ0uPtXfc6QIihLHOjGu11DngHr3NesAjY7XKzUOFKC6cCgE7hi\",\n    \"email\": \"user5@test.de\",\n    \"role\": \"admin\"\n}\n</code></pre> <p>Das verschl\u00fcsselte Passwort entspricht <code>pass1234</code>. Wir k\u00f6nnen nun folgende Anfragen stellen, um den Endpunkt zu testen:</p> Falsches Passwort - Http-Status 403 E-Mail existiert bereits - Http-Status 409 id existiert nicht - Http-Status 404 E-Mail und Rolle ge\u00e4ndert - Http-Status 200"},{"location":"rest/#delete-one-by-id","title":"DELETE one by id","text":"<p>Jetzt ben\u00f6tigen wir nur noch einen Endpunkt, um die CRUD-Funktionalit\u00e4ten vollst\u00e4ndig abgebildet zu haben: einen DELETE-Endpunkt, um einen Datensatz zu l\u00f6schen. Wir l\u00f6schen einen <code>user</code>, indem wir seine <code>id</code> als Parameter der Route hinzuf\u00fcgen:</p> user/UserController.java <pre><code>@PutMapping(\"/user/{id}\")\nUser replaceUser(@RequestBody User newUser, @PathVariable Long id) {\n\n    return userRepository.findById(id)\n            .map(user -&gt; {\n                if(bCryptPasswordEncoder.matches(newUser.getPassword(), user.getPassword())) {\n                    List&lt;User&gt; response = userRepository.findByUsernameOrEmail(newUser.getUsername(), newUser.getEmail());\n                    if (response.isEmpty() || (response.size() == 1 &amp;&amp; response.getFirst().getId().equals(id))) {\n                        user.setUsername(newUser.getUsername());\n                        user.setEmail(newUser.getEmail());\n                        user.setRole(newUser.getRole());\n                        return userRepository.save(user);\n                    } else throw new UserAlreadyExistsException(newUser.getUsername(), newUser.getEmail());\n                }\n                else throw new UserNotAuthorizedException();\n            })\n            .orElseThrow(() -&gt; new UserNotFoundException(id));\n}\n</code></pre> <p>REST-API</p> <p>Wir haben unsere erste REST-API mit Spring Boot erstellt. Es handelt sich um eine einfache Nutzerverwaltung. Wesentliche Bestandteile sind <ul> <li> die Entit\u00e4t <code>User</code> (Klasse <code>User</code>) zur Erstellung einer Tabelle <code>users</code>, </li> <li> ein <code>UserRepository</code> (Interface <code>UserRepository</code>) zur Bereitstellung der wesentlichen Datenbankmethoden (<code>find(), save(), ...</code>), </li> <li> ein <code>UserController</code> (Klasse <code>UserController</code>) zur Bereitstellung der Endpunkte (HTTP-Anfragemethoden + Routen) </li> </ul> Dar\u00fcber hinaus haben wir noch einige Hilfsklassen implementiert: <ul> <li> eine Klasse <code>LoadUserData</code>, um bereits Daten bei Start der Anwendung in die Tabelle einzuf\u00fcgen, </li> <li> mehrere Exception-Klassen (<code>UserNotFoundException</code>, <code>UserAlreadyExistsException</code>, <code>UserNotAuthorizedException</code>) und </li> <li> eine Advice-Klasse (Klasse <code>UserNotFoundAdvice</code>), die daf\u00fcr sorgt, dass bei Werfen einer Exception ein geeigneter Fehlercode als Response gesendet wird (und eine Fehlermeldung).</li> </ul> Die hier beschriebenen Prinzipien lassen sich f\u00fcr die meisten F\u00e4lle bei der Erstellung von REST-APIs mithilfe von Spring Boot anwenden. </p>"},{"location":"server/","title":"Virtuellen Server einrichten","text":"<p>Wir wollen erl\u00e4utern, wie Sie sich einen Virtuellen Server einrichten k\u00f6nnen. Einen solchen Server erhalten Sie auf Antrag bei den Laboringenieuren in der 6. Etage des C-Geb\u00e4udes. Wir beschreiben hier die Einrichtung eines solchen Servers, der hier die IP <code>141.45.146.202</code> und den Namen <code>htwfb5.f4.htw-berlin.de</code> hat. Nach Einrichtung durch die Laboringenieure hat ein solcher Server zwei User: <code>local</code> und <code>root</code>. Sie k\u00f6nnen sich baer weder per <code>ssh</code> noch per <code>sftp</code> als <code>root</code> auf dem Server einloggen. </p>"},{"location":"server/#einloggen-per-ssh","title":"Einloggen per <code>ssh</code>","text":"<p>Sie k\u00f6nnen sich nur als <code>local</code> einloggen. Geben Sie dazu im Terminal </p> <pre><code> % ssh local@141.45.146.202\nThe authenticity of host '141.45.146.202 (141.45.146.202)' can't be established.\nECDSA key fingerprint is SHA256:Kh3JNWKv1J29LDdFn12p2p+cKzP8zzQHpwuhVoQqOio.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '141.45.146.202' (ECDSA) to the list of known hosts.\nlocal@141.45.146.202's password: \nLinux htwfb5 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64\n\nThe programs included with the Debian GNU/Linux system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\npermitted by applicable law.\nLast login: Mon Oct 19 10:19:16 2020 from 141.45.154.161\nlocal@htwfb5:~$ \n</code></pre> <p>und auf Nachfrage das Passwort des Users <code>local</code> ein. Anstelle von <code>ssh local@141.45.146.202</code> h\u00e4tten Sie auch <code>ssh local@htwfb5.f4.htw-berlin.de</code> verwenden k\u00f6nnen. Um nun <code>root</code>-Rechte zu erlangen, geben Sie <code>su -</code> (super user - Minus nicht vergessen!) und das Passwort f\u00fcr <code>root</code> ein. </p> <pre><code>local@htwfb5:~$ su -\nPassword: \nroot@htwfb5:/home/local# \n</code></pre> <p>Sie sind nun als <code>root</code> auf dem Server eingeloggt. </p>"},{"location":"server/#systeminformationen","title":"Systeminformationen","text":"<p>Probieren Sie ein paar Befehle aus, um Informationen \u00fcber das Sytem zu ermitteln. Zun\u00e4chst Details \u00fcber das Betriebssystem:</p> <pre><code>root@htwfb5:~# hostnamectl\n   Static hostname: htwfb5\n         Icon name: computer-vm\n           Chassis: vm\n        Machine ID: 8074a4fe7a1e4160882b8739fc91ff6b\n           Boot ID: 1289d3137b284315b3e780bae4672d53\n    Virtualization: xen\n  Operating System: Debian GNU/Linux 10 (buster)\n            Kernel: Linux 4.19.0-5-amd64\n      Architecture: x86-64\nroot@htwfb5:~# \n</code></pre> <p>Und so fragen Sie laufende Prozesse ab:</p> <pre><code>ps aux \n</code></pre> <p>Liste aller Nutzer (<code>less</code> mit <code>q</code>beenden):</p> <pre><code>less /etc/passwd \n</code></pre> <p>Liste aller Gruppen:</p> <pre><code>less /etc/group q\n</code></pre>"},{"location":"server/#die-firewall-anpassen","title":"Die Firewall anpassen","text":"<p>Als erstes passen wir die firewall an, da es standardm\u00e4\u00dfig nicht erlaubt ist, sich von au\u00dferhalb des HTW-Netzes auf einen solchen Server einzuloggen (Sie m\u00fcssten dann immer erst einen VPN-Tunnel aufmachen). </p> <pre><code>root@htwfb5:/home/local# cd /root\nroot@htwfb5:~# ls -la\ntotal 36\ndrwx------  2 root root 4096 Oct 19 13:40 .\ndrwxr-xr-x 22 root root 4096 Oct 19 09:20 ..\n-rw-------  1 root root  417 Oct 19 10:19 .bash_history\n-rw-r--r--  1 root root  570 Jan 31  2010 .bashrc\n-rw-r--r--  1 root root  148 Aug 17  2015 .profile\n-rw-------  1 root root 1587 Oct 19 13:40 .viminfo\n-rwxr-xr-x  1 root root   90 Jul  8  2019 firewall-disable.sh\n-rwxr-xr-x  1 root root 4112 Jul  8  2019 firewall.sh\nroot@htwfb5:~# \n</code></pre> <p>\u00d6ffnen Sie die <code>firewall.sh</code> mit <code>vim</code> (ist bereits installiert), also <code>vim firewall.sh</code> und entfernen Sie dann in folgenden Zeilen das <code>#</code> (den Kommentar): </p> <pre><code>iptables -A INPUT -p tcp --dport 22 -j ACCEPT\niptables -A OUTPUT -p tcp --dport 22 -j ACCEPT\n\niptables -A INPUT -p tcp --dport 443 -j ACCEPT\niptables -A OUTPUT -p tcp --dport 443 -j ACCEPT\n\niptables -A INPUT -p tcp --dport 8080 -j ACCEPT\niptables -A OUTPUT -p tcp --dport 8080 -j ACCEPT\n</code></pre> <p>jeweils 2 Mal (f\u00fcr au\u00dferhalb und innerhalb). Alles andere sollte zun\u00e4chst so bleiben. Lesen Sie die aktualisierte <code>firewall.sh</code> ein (als <code>root</code>):</p> <pre><code>./firewall.sh\n</code></pre> <p>Jetzt k\u00f6nnen Sie sich auch von au\u00dfen als <code>local</code> einloggen und k\u00f6nnen auch von au\u00dfen <code>sftp</code> verwenden.</p>"},{"location":"server/#installationen","title":"Installationen","text":"<p>Wir wollen im folgenden ein System aus </p> <ul> <li>Apache Webserver</li> <li>MySQL (und phpMyAdmin)</li> </ul> <p>erstellen und installieren daf\u00fcr nun die entsprechenden Komponenten. Vor jeder Neuinstallation geben wir zun\u00e4chst (als <code>root</code>)</p> <p><pre><code>apt update\n</code></pre>  ein und falls es etwas zu upgraden gibt:</p> <pre><code>apt full-upgrade\n</code></pre>"},{"location":"server/#apche-webserver","title":"Apche Webserver","text":"<p>Um den Apache Webserver zu installieren, geben wir </p> <pre><code>apt install apache2\n</code></pre> <p>ein und dr\u00fccken bei Nachfragen einfach <code>Enter</code>. Nach der Installation k\u00f6nnen Sie den Status des Webservers abfragen: </p> <pre><code>root@htwfb5:~# systemctl status apache2\n* apache2.service - The Apache HTTP Server\n   Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-10-19 14:51:24 UTC; 26min ago\n     Docs: https://httpd.apache.org/docs/2.4/\n Main PID: 24209 (apache2)\n    Tasks: 55 (limit: 1074)\n   Memory: 4.6M\n   CGroup: /system.slice/apache2.service\n           |-24209 /usr/sbin/apache2 -k start\n           |-24211 /usr/sbin/apache2 -k start\n           `-24212 /usr/sbin/apache2 -k start\n\nOct 19 14:51:23 htwfb5 systemd[1]: Starting The Apache HTTP Server...\nOct 19 14:51:24 htwfb5 systemd[1]: Started The Apache HTTP Server.\nroot@htwfb5:~# \n</code></pre> <p>und auch die URL <code>http://htwfb5.f4.htw-berlin.de/</code> in den Browser eingeben. Es erscheint: </p> <p>Falls Sie den Webserver neu starten wollen/m\u00fcssen, geben Sie einfach</p> <pre><code>systemctl restart apache2\n</code></pre> <p>ein. Sollte es Probleme mit dem Webserver geben, schauen Sie sich die <code>*.log</code>-Dateien unter <code>/var/log/apache2</code> an:</p> <pre><code>root@htwfb5:/var/log/apache2# ls -la\ntotal 16\ndrwxr-x--- 2 root adm  4096 Oct 19 14:51 .\ndrwxr-xr-x 6 root root 4096 Oct 19 14:51 ..\n-rw-r----- 1 root adm  1024 Oct 19 15:22 access.log\n-rw-r----- 1 root adm   281 Oct 19 14:51 error.log\n-rw-r----- 1 root adm     0 Oct 19 14:51 other_vhosts_access.log\nroot@htwfb5:/var/log/apache2# \n</code></pre>"},{"location":"server/#php-installieren","title":"PHP installieren","text":"<p>Um zum Beispiel <code>phpMyAdmin</code> f\u00fcr unsere <code>MySQL</code>-Datenbank nutzen zu k\u00f6nnen, ben\u00f6tigen wir PHP. Dazu installieren wir</p> <pre><code>apt install php php-cgi php-mysqli php-pear php-mbstring php-gettext libapache2-mod-php php-common php-phpseclib php-mysql\n</code></pre> <p>und dr\u00fccken bei Nachfragen einfach <code>Enter</code>. Die erfolgreiche Installation k\u00f6nnen Sie \u00fcberpr\u00fcfen, indem Sie </p> <pre><code>root@htwfb5:~# php --version\nPHP 7.3.19-1~deb10u1 (cli) (built: Jul  5 2020 06:46:45) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.19, Copyright (c) 1998-2018 Zend Technologies\n    with Zend OPcache v7.3.19-1~deb10u1, Copyright (c) 1999-2018, by Zend Technologies\nroot@htwfb5:~# \n</code></pre> <p>eingeben. </p>"},{"location":"server/#mysql-installieren","title":"MySQL installieren","text":"<p>Es spricht gar nichts dagegen, anstelle von MySQL MariaDB zu installieren. In der Verwendung sind beide Datenbankmanagementsysteme kompatibel. Wir zeigen hier die Installation von MySQL. </p> <p>Zun\u00e4chst ben\u00f6tigen wir das GnuPG Package, eine Open-Source-Implementierung des OpenPGP-Standards. Geben Sie </p> <pre><code>apt install gnupg\n</code></pre> <p>ein und dr\u00fccken bei Nachfragen einfach <code>Enter</code>.</p> <p>\u00d6ffnen Sie im Browser nun die Seite <code>https://dev.mysql.com/downloads/repo/apt/</code> und klicken dort den \"Download\"-Button. Auf der folgenden Seite klicken Sie weder auf den \"Login\"- noch auf den \"Sign Up\"-Button, sondern rechts-klicken(!) auf den Link No thanks, just start my download. Kopieren Sie diesen Link in Ihre Zwischenablage. Geben Sie nun im Terminal ein:</p> <pre><code>wget https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb\n</code></pre> <p>Die <code>https://...</code>-Adresse ist der kopierte Link! Ihr Ordner enth\u00e4lt dann die <code>mysql-...deb</code>-Datei. Geben Sie nun </p> <pre><code>dpkg -i mysql-apt-config*\n</code></pre> <p>in Ihr Terminal ein. Es erscheint ein blaues Fenster. Durch die Men\u00fcpunkte k\u00f6nnen Sie mit den Pfeiltasten navigieren. Sie k\u00f6nnen aber alles so lassen (den oberen Men\u00fcpunkt) und mit der <code>Tab-Taste</code> zu <code>&lt;Ok&gt;</code> wechseln. Dr\u00fccken Sie <code>Enter</code>. Auch auf der n\u00e4chsten Seite. Geben Sie nun </p> <p><pre><code>root@htwfb5:~# apt-get update\nGet:1 http://repo.mysql.com/apt/debian buster InRelease [21.5 kB]\nHit:2 http://security.debian.org buster/updates InRelease      \nHit:3 http://httpredir.debian.org/debian buster InRelease      \nGet:4 http://repo.mysql.com/apt/debian buster/mysql-8.0 Sources [951 B]\nGet:5 http://repo.mysql.com/apt/debian buster/mysql-apt-config amd64 Packages [563 B]\nGet:6 http://repo.mysql.com/apt/debian buster/mysql-8.0 amd64 Packages [7542 B]\nGet:7 http://repo.mysql.com/apt/debian buster/mysql-tools amd64 Packages [5210 B]\nFetched 35.8 kB in 1s (69.7 kB/s)                \nReading package lists... Done\nroot@htwfb5:~# \n</code></pre> ein. Nun haben wir die Pakete verf\u00fcgbar und k\u00f6nnen installieren:</p> <pre><code>apt install mysql-server\n</code></pre> <p>W\u00e4hrend der Installation werden Sie nach dem <code>root</code>-Passwort f\u00fcr MySQL gefragt, d.h. Sie sollen sich eins \u00fcberlegen. Notieren Sie sich dieses Passwort! Sie k\u00f6nnen auch das Passwort des <code>local</code>-Users des Virtuellen Servers verwenden (um sich nicht so viele Passw\u00f6rter merken zu m\u00fcssen). W\u00e4hlen Sie danach \"Strong password encryption\" aus und dr\u00fccken <code>&lt;Ok&gt;</code>. </p> <p>Pr\u00fcfen, ob MySQL korrekt installiert ist und l\u00e4uft:</p> <pre><code>root@htwfb5:~# systemctl status mysql\n* mysql.service - MySQL Community Server\n   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)\n   Active: active (running) since Mon 2020-10-19 15:55:55 UTC; 17h ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 6290 ExecStartPre=/usr/share/mysql-8.0/mysql-systemd-start pre (code=exited, status=0/S\n Main PID: 6325 (mysqld)\n   Status: \"Server is operational\"\n    Tasks: 37 (limit: 1074)\n   Memory: 331.3M\n   CGroup: /system.slice/mysql.service\n           `-6325 /usr/sbin/mysqld\n\nOct 19 15:55:54 htwfb5 systemd[1]: Starting MySQL Community Server...\nOct 19 15:55:55 htwfb5 systemd[1]: Started MySQL Community Server.\n</code></pre> <p>Sie k\u00f6nnen die MySQL-Konfiguration noch absichern, um die Nutzerinnen zu zwingen, relativ starke Passw\u00f6rter zu verwenden. Dazu gibt es das Tool <code>mysql_secure_installation</code>, welches mit dem MySQL-Server geliefert wird. Sie k\u00f6nnen darin entscheiden, ob Sie eine Passwortvalidierung verwenden wollen und welche St\u00e4rke das Passwort haben soll. ob Sie anonyme User und das <code>root</code>-Login von au\u00dfen verbieten wollen und ob die <code>test</code>-Datenbank, auf die jeder Zugriff hat, gel\u00f6scht werden soll. Wir werden dieses Werkzeug jetzt (noch) nicht ausf\u00fchren, sp\u00e4testens aber, wenn wir mit einer Webanwendung auf dem Server in Produktion gehen. </p> <p>Sie k\u00f6nnen nun aber das MySQL-Administrationstool <code>mysqladmin</code> verwenden:</p> <pre><code>mysqladmin -u root -p version\n</code></pre> <p><code>-u root</code> gibt an, dass Sie sich als <code>root</code> (MySQL-<code>root</code>) anmelden und <code>-p</code> gibt an, dass das (MySQL-)<code>root</code>-Passwort eingegeben werden muss. </p> <p>F\u00fcr <code>mysqladmin -u root -p version</code> erhalten Sie ungef\u00e4hr folgende Ausgabe: </p> <pre><code>root@htwfb5:~# mysqladmin -u root -p version\nEnter password: \nmysqladmin  Ver 8.0.22 for Linux on x86_64 (MySQL Community Server - GPL)\nCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nServer version      8.0.22\nProtocol version    10\nConnection      Localhost via UNIX socket\nUNIX socket     /var/run/mysqld/mysqld.sock\nUptime:         18 hours 7 min 43 sec\n\nThreads: 2  Questions: 8  Slow queries: 0  Opens: 127  Flush tables: 3  Open tables: 48  Queries per second avg: 0.000\nroot@htwfb5:~# \n</code></pre> <p><code>mysqladmin</code> ist ein recht m\u00e4chtiges Tool. Insbesondere k\u00f6nnen Sie damit auch alle Nutzerinnen-Passw\u00f6rter \u00e4ndern (auch das von <code>root</code>). Weitere Informationen zu <code>mysqladmin</code> finden Sie hier</p>"},{"location":"server/#phpmyadmin","title":"phpMyAdmin","text":"<p>Wir k\u00f6nnten nun Datenbanken, Tabellen usw. \u00fcber die Kommandozeile des MySQl-Servers anlegen, \u00e4ndern und l\u00f6schen, aber wir verwenden daf\u00fcr lieber die grafische Weboberfl\u00e4che <code>phpMyAdmin</code>. Wir laden die aktuelle Version von <code>phpMyAdmin</code> zun\u00e4chst herunter: </p> <pre><code>wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz\n</code></pre> <p>Mit der Option <code>Downloads</code> geben wir an, dass der Download in einen Download-Ordner in dem aufrufenden Ordner erfolgt, d.h. in dem aufrufenden Ordner wird ein Ordner <code>Downloads</code> angelegt, falls er noch nicht existiert. Um die Signatur der heruntergeladenen Datei zu \u00fcberpr\u00fcfen, laden wir uns noch den GPG key f\u00fcr <code>phpMyAdmin</code> herunter (ebenfalls in das <code>Downloads</code>- Verzeichnis:</p> <pre><code>wget -P Downloads https://files.phpmyadmin.net/phpmyadmin.keyring\n</code></pre> <p>Wir wechseln in den <code>Downloads</code>- Ordner und importieren den <code>keyring</code>:</p> <pre><code>root@htwfb5:~# cd Downloads/\nroot@htwfb5:~/Downloads# gpg --import phpmyadmin.keyring\ngpg: directory '/root/.gnupg' created\ngpg: keybox '/root/.gnupg/pubring.kbx' created\ngpg: /root/.gnupg/trustdb.gpg: trustdb created\ngpg: key 9C27B31342B7511D: public key \"Michal \\xc4\\x8ciha\\xc5\\x99 &lt;michal@cihar.com&gt;\" imported\ngpg: key FEFC65D181AF644A: public key \"Marc Delisle &lt;marc@infomarc.info&gt;\" imported\ngpg: key CE752F178259BD92: public key \"Isaac Bennetch &lt;bennetch@gmail.com&gt;\" imported\ngpg: key DA68AB39218AB947: public key \"phpMyAdmin Security Team &lt;security@phpmyadmin.net&gt;\" imported\ngpg: Total number processed: 4\ngpg:               imported: 4\n</code></pre> <p>Wir verlassen den <code>Downloads</code>-Ordner wieder und laden uns das <code>.asc</code>- File von <code>phpmyadmin</code>herunter. asc-Dateien sind ASCII-Skript-Dateien. Hier enth\u00e4lt es eine digitale Signatur als Text und kann von Ver- und Entschl\u00fcsselungsprogrammen, wie z.B. * Pretty Good Privacy (PGP)* gepr\u00fcft werden. </p> <pre><code>root@htwfb5:~/Downloads# cd ..\nroot@htwfb5:~# wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc\n--2020-10-20 10:41:33--  https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc\nResolving www.phpmyadmin.net (www.phpmyadmin.net)... 195.181.175.48\nConnecting to www.phpmyadmin.net (www.phpmyadmin.net)|195.181.175.48|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://files.phpmyadmin.net/phpMyAdmin/5.0.4/phpMyAdmin-5.0.4-all-languages.tar.gz.asc [following]\n--2020-10-20 10:41:33--  https://files.phpmyadmin.net/phpMyAdmin/5.0.4/phpMyAdmin-5.0.4-all-languages.tar.gz.asc\nResolving files.phpmyadmin.net (files.phpmyadmin.net)... 195.181.175.55\nConnecting to files.phpmyadmin.net (files.phpmyadmin.net)|195.181.175.55|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 833 [application/octet-stream]\nSaving to: 'Downloads/phpMyAdmin-latest-all-languages.tar.gz.asc'\n\nphpMyAdmin-latest-all-languages 100%[=====================================================&gt;]     833  --.-KB/s    in 0s      \n\n2020-10-20 10:41:33 (12.5 MB/s) - 'Downloads/phpMyAdmin-latest-all-languages.tar.gz.asc' saved [833/833]\n</code></pre> <p>Nun k\u00f6nnen wir die <code>phpmyadmin</code>- Signatur \u00fcberpr\u00fcfen:</p> <pre><code>root@htwfb5:~# cd Downloads\nroot@htwfb5:~/Downloads# gpg --verify phpMyAdmin-latest-all-languages.tar.gz.asc\ngpg: assuming signed data in 'phpMyAdmin-latest-all-languages.tar.gz'\ngpg: Signature made Thu Oct 15 18:10:40 2020 UTC\ngpg:                using RSA key 3D06A59ECE730EB71B511C17CE752F178259BD92\ngpg: Good signature from \"Isaac Bennetch &lt;bennetch@gmail.com&gt;\" [unknown]\ngpg:                 aka \"Isaac Bennetch &lt;isaac@bennetch.org&gt;\" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: 3D06 A59E CE73 0EB7 1B51  1C17 CE75 2F17 8259 BD92\n</code></pre>"},{"location":"server/#zugriff-auf-phpmyadmin-uber-den-webserver","title":"Zugriff auf phpMyAdmin \u00fcber den Webserver","text":"<p>Wir haben <code>phpMyAdmin</code> nun heruntergeladen und den Download verifiziert. Jetzt wollen wir es f\u00fcr die Nutzung zur Verf\u00fcgung stellen. Damit es \u00fcber eine URL, wie z.B. <code>http://htwfb5.f4.htw-berlin.de/phpmyadmin</code> erreichbar ist, kopieren wir <code>phpmyadmin</code> in unser * DocumentRoot* . Das ist in Linux-Systemen typischerweise <code>var/www/html</code>. Wir wechesln in dieses Verzeichnis und erstellen dort den Ordner <code>phpmyadmin</code>:</p> <pre><code>root@htwfb5:~/Downloads# cd /var/www/html\nroot@htwfb5:/var/www/html# ls -la\ntotal 20\ndrwxr-xr-x 2 root root  4096 Oct 19 14:51 .\ndrwxr-xr-x 3 root root  4096 Oct 19 14:51 ..\n-rw-r--r-- 1 root root 10701 Oct 19 14:51 index.html\nroot@htwfb5:/var/www/html# mkdir phpmyadmin\nroot@htwfb5:/var/www/html# ls -la\ntotal 24\ndrwxr-xr-x 3 root root  4096 Oct 20 10:53 .\ndrwxr-xr-x 3 root root  4096 Oct 19 14:51 ..\n-rw-r--r-- 1 root root 10701 Oct 19 14:51 index.html\ndrwxr-xr-x 2 root root  4096 Oct 20 10:53 phpmyadmin\n</code></pre> <p>Danach wechseln wir wieder in unseren <code>Downloads</code>-Ordner zur\u00fcck und entpacken dort unsere gezippte <code>phpmyadmin</code>-Datei direkt in den <code>/var/www/html/phpmyadmin</code>-Ordner:</p> <pre><code>root@htwfb5:/var/www/html# cd /root/Downloads/\nroot@htwfb5:~/Downloads# tar xvf phpMyAdmin-latest-all-languages.tar.gz --strip-components=1 -C /var/www/html/phpmyadmin\n</code></pre> <p>Es erscheint eine sehr lange Liste von Dateien, die alle in den <code>/var/www/html/phpmyadmin</code>-Ordner entpackt werden. Jetzt k\u00f6nnte man die URL <code>http://htwfb5.f4.htw-berlin.de/phpmyadmin/</code> bereits in den Browser eingeben und es k\u00e4me bereits das Anmeldeformular f\u00fcr <code>phpmyadmin</code>: </p> <p>Wir wollen uns aber zun\u00e4chst noch um eine sichere Anmeldung k\u00fcmmern. Dazu wechseln wir in das <code>/var/www/html/phpmyadmin</code>-Verzeichnis. Darin gibt es eine Datei <code>config.sample.inc.php</code>, welche eine Beispiel-Konfiguration f\u00fcr <code>phpmyadmin</code> enth\u00e4lt. Diese Datei kopieren wir in eine <code>config.inc.php</code>-Datei (diese wird erstellt):  </p> <pre><code>cd /var/www/html/phpmyadmin\ncp config.sample.inc.php config.inc.php\n</code></pre> <p>Wir \u00f6ffnen diese <code>config.inc.php</code>mit einem Terminaleditor (z.B. <code>nano</code> oder <code>vim</code>). IN Zeile <code>18</code>in dieser Datei gibt es folgenden Eintrag:</p> <pre><code>$cfg['blowfish_secret'] = '';  /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */\n</code></pre> <p>Wir ben\u00f6tigen eine Passphrase f\u00fcr den Blowfish-Verschl\u00fcsselungsalgorithmus, der f\u00fcr die Authentifikation mithilfe von Cookies verwendet wird. Diese Passphrase soll mindestens 32 Zeichen lang sein. Sie tragen diese Passphrase direkt in die Datei <code>config.inc.php</code> ein, deshalb m\u00fcssen Sie sich diese auch gar nicht merken, da sie dort ja jederzeit f\u00fcr Sie lesbar ist. Geben Sie also ein Satz dort ein, der aus mindestens 32 Zeichen besteht (kann Sonderzeichen, Leerzeichen usw. enthalten). Speichern Sie dann die Datei <code>config.inc.php</code>. Wir wechseln die Zugriffsrechte der Datei <code>config.inc.php</code> von <code>644</code> auf <code>660</code> (schreib- und lesbar durch User und Group, aber weder noch f\u00fcr die Welt):</p> <pre><code>root@htwfb5:/var/www/html/phpmyadmin# chmod 660 config.inc.php\nroot@htwfb5:/var/www/html/phpmyadmin# ls -la config.inc.php\n-rw-rw---- 1 root root 4590 Oct 20 11:18 config.inc.php\n</code></pre> <p>Wir haben das gesamte Verzeichnis <code>phpmyadmin</code> in <code>/var/www/html</code> als <code>root</code>angelegt. Dadurch ist <code>root</code> dort auch Owner. Das wollen wir \u00e4ndern. Rekursiv wird das gesamte Verzeichnis dem User (und der Group) <code>www-data</code> zugeordnet. </p> <pre><code>chown -R www-data:www-data phpmyadmin\n</code></pre> <p>Jetzt starten wir noch unseren Webserver neu und dann k\u00f6nnen wir <code>phpmyadmin</code> im Browser aufrufen:</p> <pre><code>systemctl restart apache2\n</code></pre> M\u00f6gliche Login-Probleme phpmyadmin <ul> <li>eventuelle Fehlerausschrift: <code>mysqli::real_connect(): The server requested authentication method unknown to the client [caching_sha2_password]</code> </li> <li>und/oder <code>mysqli::real_connect(): (HY000/2054): The server requested authentication method unknown to the client</code></li> <li>m\u00f6gliche L\u00f6sungen: PHP-Update auf 7.4 (davor hat <code>mysqli</code> <code>caching_sha2</code> nicht unterst\u00fctzt)</li> <li>wenn das auch nicht hilft:<ul> <li>per <code>mysql -u root -p</code> als <code>root</code> auf den MySQl-Server anmelden</li> <li>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'hierDasRootPasswort';</li> <li>dann wird wieder native Passwort gepr\u00fcft</li> </ul> </li> </ul>"},{"location":"server/#eine-testdatenbank","title":"Eine Testdatenbank","text":"<p>Rufen Sie <code>phpmyadmin</code> im Browser auf und loggen sich als <code>root</code> ein. In der linken Spalte sind alle bisherigen Datenbanken aufgelistet. Klicken Sie dort auf <code>Neu</code> und erstellen Sie eine neue Datenbank <code>Test20</code>. W\u00e4hlen Sie diese Datenbank links aus, indem Sie sie anklicken. Gehen Sie auf den Reiter <code>SQL</code> und kopieren Sie folgenden Inhalt in das <code>SQL</code>-Terminal:</p> Test20.sql <pre><code>-- phpMyAdmin SQL Dump\n-- version 5.0.4\n-- https://www.phpmyadmin.net/\n--\n-- Host: localhost\n-- Erstellungszeit: 20. Okt 2020 um 15:44\n-- Server-Version: 8.0.22\n-- PHP-Version: 7.3.19-1~deb10u1\n\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\nSTART TRANSACTION;\nSET time_zone = \"+00:00\";\n\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n\n--\n-- Datenbank: `Test20`\n--\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `assistenten`\n--\n\nCREATE TABLE `assistenten` (\n  `pers_nr` int NOT NULL,\n  `name` varchar(30) NOT NULL,\n  `fachgebiet` varchar(30) DEFAULT NULL,\n  `von` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Daten f\u00fcr Tabelle `assistenten`\n--\n\nINSERT INTO `assistenten` (`pers_nr`, `name`, `fachgebiet`, `von`) VALUES\n(3002, 'Sokrates', 'Ideenlehre', 2125),\n(3003, 'Aristoteles', 'Syllogistik', 2125),\n(3004, 'Wittgenstein', 'Sprachtheorie', 2126),\n(3005, 'Mitchell', 'Planetenbewegung', 2127),\n(3006, 'Newton', 'Keplersche Gesetze', 2134),\n(3007, 'Whitehead', 'analytische Philosophie', 2134);\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `hoeren`\n--\n\nCREATE TABLE `hoeren` (\n  `matr_nr` int NOT NULL,\n  `vorl_nr` int NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Daten f\u00fcr Tabelle `hoeren`\n--\n\nINSERT INTO `hoeren` (`matr_nr`, `vorl_nr`) VALUES\n(25403, 5022),\n(26120, 5001),\n(27550, 4052),\n(27550, 5001),\n(28106, 5041),\n(28106, 5052),\n(28106, 5216),\n(28106, 5259),\n(29120, 5001),\n(29120, 5041),\n(29120, 5049),\n(29555, 5001),\n(29555, 5022);\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `professoren`\n--\n\nCREATE TABLE `professoren` (\n  `pers_nr` int NOT NULL,\n  `name` varchar(30) NOT NULL,\n  `rang` char(2) DEFAULT NULL,\n  `raum` int DEFAULT NULL\n) ;\n\n--\n-- Daten f\u00fcr Tabelle `professoren`\n--\n\nINSERT INTO `professoren` (`pers_nr`, `name`, `rang`, `raum`) VALUES\n(2125, 'Hypathia', 'C4', 226),\n(2126, 'Russel', 'C4', 232),\n(2127, 'Meitner', 'C3', 310),\n(2133, 'Gauss', 'C3', 52),\n(2134, 'Kepler', 'C3', 309),\n(2136, 'Curie', 'C4', 36),\n(2137, 'Galileo', 'C4', 7);\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `pruefen`\n--\n\nCREATE TABLE `pruefen` (\n  `matr_nr` int NOT NULL,\n  `vorl_nr` int NOT NULL,\n  `pers_nr` int DEFAULT NULL,\n  `note` decimal(2,1) DEFAULT NULL\n) ;\n\n--\n-- Daten f\u00fcr Tabelle `pruefen`\n--\n\nINSERT INTO `pruefen` (`matr_nr`, `vorl_nr`, `pers_nr`, `note`) VALUES\n(25403, 5041, 2125, '2.0'),\n(27550, 4630, 2137, '2.0'),\n(28106, 5001, 2126, '1.0');\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `studenten`\n--\n\nCREATE TABLE `studenten` (\n  `matr_nr` int NOT NULL,\n  `name` varchar(30) NOT NULL,\n  `semester` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Daten f\u00fcr Tabelle `studenten`\n--\n\nINSERT INTO `studenten` (`matr_nr`, `name`, `semester`) VALUES\n(24002, 'Dijkstra', 18),\n(25403, 'Einstein', 12),\n(26120, 'Goeppert-Mayer', 10),\n(26830, 'Noether', 8),\n(27550, 'Goedel', 6),\n(28106, 'Lovelace', 3),\n(29120, 'Bartik', 2),\n(29555, 'Pasteur', 2);\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `voraussetzen`\n--\n\nCREATE TABLE `voraussetzen` (\n  `vorgaenger` int NOT NULL,\n  `nachfolger` int NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Daten f\u00fcr Tabelle `voraussetzen`\n--\n\nINSERT INTO `voraussetzen` (`vorgaenger`, `nachfolger`) VALUES\n(5041, 5052),\n(5041, 5216),\n(5043, 5052),\n(5052, 5022),\n(5259, 5041),\n(5259, 5043),\n(5259, 5049);\n\n-- --------------------------------------------------------\n\n--\n-- Tabellenstruktur f\u00fcr Tabelle `vorlesungen`\n--\n\nCREATE TABLE `vorlesungen` (\n  `vorl_nr` int NOT NULL,\n  `titel` varchar(30) DEFAULT NULL,\n  `sws` int DEFAULT NULL,\n  `gelesen_von` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n--\n-- Daten f\u00fcr Tabelle `vorlesungen`\n--\n\nINSERT INTO `vorlesungen` (`vorl_nr`, `titel`, `sws`, `gelesen_von`) VALUES\n(4052, 'Medizin', 4, 2125),\n(4630, 'Mechanik', 4, 2137),\n(5001, 'Physik', 4, 2137),\n(5022, 'Astronomie', 2, 2134),\n(5041, 'Ethik', 4, 2125),\n(5043, 'Erkenntnistheorie', 3, 2126),\n(5049, 'Philosophie', 2, 2125),\n(5052, 'Wissenschaftstheorie', 3, 2126),\n(5216, 'Logik', 2, 2126),\n(5259, 'Mathematik', 2, 2133);\n\n--\n-- Indizes der exportierten Tabellen\n--\n\n--\n-- Indizes f\u00fcr die Tabelle `assistenten`\n--\nALTER TABLE `assistenten`\n  ADD PRIMARY KEY (`pers_nr`),\n  ADD KEY `von` (`von`);\n\n--\n-- Indizes f\u00fcr die Tabelle `hoeren`\n--\nALTER TABLE `hoeren`\n  ADD PRIMARY KEY (`matr_nr`,`vorl_nr`);\n\n--\n-- Indizes f\u00fcr die Tabelle `professoren`\n--\nALTER TABLE `professoren`\n  ADD PRIMARY KEY (`pers_nr`),\n  ADD UNIQUE KEY `raum` (`raum`);\n\n--\n-- Indizes f\u00fcr die Tabelle `pruefen`\n--\nALTER TABLE `pruefen`\n  ADD PRIMARY KEY (`matr_nr`,`vorl_nr`);\n\n--\n-- Indizes f\u00fcr die Tabelle `studenten`\n--\nALTER TABLE `studenten`\n  ADD PRIMARY KEY (`matr_nr`);\n\n--\n-- Indizes f\u00fcr die Tabelle `voraussetzen`\n--\nALTER TABLE `voraussetzen`\n  ADD PRIMARY KEY (`vorgaenger`,`nachfolger`);\n\n--\n-- Indizes f\u00fcr die Tabelle `vorlesungen`\n--\nALTER TABLE `vorlesungen`\n  ADD PRIMARY KEY (`vorl_nr`);\n\n--\n-- Constraints der exportierten Tabellen\n--\n\n--\n-- Constraints der Tabelle `assistenten`\n--\nALTER TABLE `assistenten`\n  ADD CONSTRAINT `assistenten_ibfk_1` FOREIGN KEY (`von`) REFERENCES `professoren` (`pers_nr`);\nCOMMIT;\n\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n</code></pre> <p>Klicken Sie dann auf <code>OK</code>. Es werden mehrere Tabellen erstellt und diese bef\u00fcllt. Pr\u00fcfen Sie das Ergebnis. Anstelle des Hineinkopierens des SQL-Codes k\u00f6nnen Sie auch unter dem Reiter <code>Importieren</code> die Datei <code>Test20.sql</code> hochladen und ausf\u00fchren lassen. Laden Sie sich dazu die Datei Test20.sql herunter, speichern Sie ab und laden Sie dann unter dem Reiter <code>Importieren</code> hoch. </p>"},{"location":"server/#git","title":"git","text":"<p>Damit Sie Ihr Repository / Ihre Repositories auch auf den virtuellen Server \"pullen\" k\u00f6nnen, ben\u00f6tigen Sie noch git. Die Installation ist einfach:</p> <pre><code>apt install git\n</code></pre> <p>Beantworten Sie eventuelle Fragen einfach mit <code>Enter</code>. Testen Sie, ob die Installation erfolgreich war:</p> <pre><code>git --version\n</code></pre> <p>Es sollte etwas wie <code>git version 2.20.1</code> ausgegeben werden. </p>"},{"location":"server/#verwendung-von-git","title":"Verwendung von git","text":"<p>Sie m\u00fcssen nun Ihr Remote Rpository (die entsprechende URL erhalten Sie bei GitHub oder GitLab oder welchen git-Host Sie auch verwenden) genau ein Mal clonen (<code>git clone RemoteRepositoryCloneURL</code>). Meistens wollen Sie genau in den Ordner <code>/var/www/html</code> clonen, da dort dann Ihr lokales Repository angelegt wird und Sie gleichzeitig im DocumentRoot sind. </p> <p>Wir zeigen hier einmal exemplarisch das Clonen des GitHub-Repositories mit der Clone_URL <code>https://github.com/jfreiheit/projekte.git</code>. Wir wechseln zun\u00e4chst in das Verzeichnis <code>/var/www/html/</code> und clonen dorthin unser Repository. </p> <pre><code>root@htwfb5:/# cd /var/www/html \nroot@htwfb5:/var/www/html# git clone https://github.com/jfreiheit/projekte.git\nCloning into 'projekte'...\nremote: Enumerating objects: 12, done.\nremote: Counting objects: 100% (12/12), done.\nremote: Compressing objects: 100% (11/11), done.\nremote: Total 12 (delta 1), reused 11 (delta 0), pack-reused 0\nUnpacking objects: 100% (12/12), done.\nroot@htwfb5:/var/www/html#  \n</code></pre> <p>Es entsteht ein Ordner <code>projekte</code> innerhalb von <code>/var/www/html</code>. Um \u00fcber den Browser auf diesen Ordner zuzugreifen, m\u00fcssen Sie jetzt nur noch die URL <code>http://htwfb5.f4.htw-berlin.de/projekte</code> in Ihrem Browser aufrufen. </p> <p>Nachdem Sie einmal geclont haben, m\u00fcssen Sie stets nur noch innerhalb des <code>projekte</code>-Ordners (<code>cd /var/www/html/projekte</code>) aufrufen:</p> <pre><code>git pull\n</code></pre> <p>, um sich die neueste Version Ihres Repositories auf den virtuellen Server zu ziehen. </p>"},{"location":"spring/","title":"Spring","text":"<p>Spring ist ein Open-Source-Java-Framework, um gro\u00dfe Anwendungen zu schreiben. Spring Boot ist eine Konfigurationsplattform, die bei der Erstellung einer Spring-Anwendung hilft. Wesentliche Konzepte bzw. Kernfunktionalit\u00e4ten von Spring sind</p> <ul> <li>Dependency Injection</li> <li>Model View Controller (MVC) Webanwendungen</li> <li>RESTful Webservices</li> <li>Datenbankanbindungen (Java Database Connectivity - JDBC) </li> </ul> <p>Wir werden alle diese Konzepte im Laufe der Verwendung von Spring kennenlernen. Wir beginnen mit einer ganz einfachen Anwendung. </p>"},{"location":"spring/#intellij","title":"IntelliJ","text":"<p>Die Screenshots von Programmcode zeigen die IDE IntelliJ. es wird empfohlen, diese IDE f\u00fcr die Java-Entwicklung zu verwenden. Gute Alternativen sind die aus der Prog-Vorlesung bekannte IDE Eclipse oder Visual Studio Code. Letzteres eignet sich insbesondere f\u00fcr die Entwicklung von Webanwendungen. In WebTech und IKT verwenden wir es auch. </p> <p>Um die Ultimate-Version von IntelliJ kostenlos verwenden zu k\u00f6nnen, m\u00fcssen Sie bei JetBrains einen Account unter Verwendung Ihrer HTW-E-Mail-Adresse anlegen. Dann erhalten Sie \u00fcber die Student Pack License eine kostenlose Version von IntelliJ IDEA Ultimate. </p>"},{"location":"spring/#firstapplication","title":"FirstApplication","text":"<ol> <li> <p>Um ein Spring Boot Projekt anzulegen, bietet sich der Spring Initializr an. Dies ist eine Webanwendung, in der sich mit einigen Auswahlklicks ein Projekt vorkonfigurieren l\u00e4sst. Spring Boot gibt es seit einiger Zeit in Version <code>3</code>. Diese wollen wir auch nutzen. Wir ben\u00f6tigen dazu die JDK in Version <code>17</code> oder h\u00f6her. Wir rufen die Webseite https://start.spring.io/ (den * Initializr* auf):</p> <p></p> </li> <li> <p>W\u00e4hlen Sie in <code>Group</code> ein passendes <code>package</code>, hier z.B. <code>htw.freiheit</code>. W\u00e4hlen Sie in <code>Artifact</code> (ist gleich mit <code>Name</code>) einen passenden Namen f\u00fcr Ihr Projekt, hier z.B. <code>first</code>. </p> </li> <li> <p><code>GENERATE</code> klicken. Die Datei <code>first.zip</code> wird heruntergeladen. Die Datei entpacken und den Ordner <code>first</code> in Ihren workspace schieben. </p> </li> <li> <p>\u00d6ffnen Sie das Projekt <code>first</code> in Ihrer IDE und \u00f6ffnen Sie dann die <code>FirstApplication.java</code> im Editor:</p> <p></p> </li> <li> <p>Erg\u00e4nzen Sie die <code>FirstApplication.java</code> wie folgt:</p> <pre><code>package htw.freiheit.first;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\npublic class FirstApplication {\n\n    public static void main(String[] args) {\n\n        SpringApplication.run(FirstApplication.class, args);\n    }\n\n    @GetMapping(\"/hello\")\n    public String hello(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n        return String.format(\"Hello %s!\", name);\n    }\n\n}\n</code></pre> <p>Erl\u00e4uterungen zum Code:</p> <ul> <li>Die <code>@RestController</code>-Annotation gibt an, dass die Anwendung Endpunkte (hier einen Endpunkt) einer RESTful API definiert, die \u00fcber das Web verf\u00fcgbar sind. Durch die Annotation wird die Klasse als Bean zur Verf\u00fcgung gestellt. Beans werden per dependency injection (auch Inversion of Control (IoC)) automatisch dort injiziert, wo sie ben\u00f6tigt werden.</li> <li>Die <code>@GetMapping(\"/hello\")</code>-Annotation gibt an, dass die folgende <code>hello()</code>-Methode verwendet wird, um den GET-Request (die GET-Anfrage) an den Endpunkt <code>http://localhost:8080/hello</code> zu beantworten.</li> <li>Die <code>@RequestParam</code>-Annotation gibt an, dass der folgende Parameter <code>name</code> einen Wert in der Anfrage erwartet. Sollte f\u00fcr <code>name</code> kein Wert \u00fcbergeben werden, dann wird der Standardwert <code>\"World\"</code> verwendet.</li> </ul> </li> <li> <p>Das Projekt \u00fcbersetzen und ausf\u00fchren. Im Ordner <code>first</code> im Terminal <code>./mvnw spring-boot:run</code> ausf\u00fchren (unter Windows ruft man den Maven-Wrapper mit <code>mvnw.cmd spring-boot:run</code> auf). Der Befehl muss in dem Ordner ausgef\u00fchrt werden, in dem sich die <code>pom.xml</code> befindet. Zun\u00e4chst wird das Projekt kompiliert und gepackt und dann wird die Anwendung ausgef\u00fchrt. Es erscheinen ungef\u00e4hr folgende Ausgaben:</p> <pre><code>jornfreiheit@MB-JF first % ./mvnw spring-boot:run\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -------------------------&lt; htw.freiheit:first &gt;-------------------------\n[INFO] Building first 0.0.1-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] &gt;&gt;&gt; spring-boot:3.1.2:run (default-cli) &gt; test-compile @ first &gt;&gt;&gt;\n[INFO] \n[INFO] --- resources:3.3.1:resources (default-resources) @ first ---\n[INFO] Copying 1 resource from src/main/resources to target/classes\n[INFO] Copying 0 resource from src/main/resources to target/classes\n[INFO] \n[INFO] --- compiler:3.11.0:compile (default-compile) @ first ---\n[INFO] Changes detected - recompiling the module! :source\n[INFO] Compiling 1 source file with javac [debug release 17] to target/classes\n[INFO] \n[INFO] --- resources:3.3.1:testResources (default-testResources) @ first ---\n[INFO] skip non existing resourceDirectory /Users/jornfreiheit/Documents/HTW/04_Projekte/Code/first/src/test/resources\n[INFO] \n[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ first ---\n[INFO] Changes detected - recompiling the module! :dependency\n[INFO] Compiling 1 source file with javac [debug release 17] to target/test-classes\n[INFO] \n[INFO] &lt;&lt;&lt; spring-boot:3.1.2:run (default-cli) &lt; test-compile @ first &lt;&lt;&lt;\n[INFO] \n[INFO] \n[INFO] --- spring-boot:3.1.2:run (default-cli) @ first ---\n[INFO] Attaching agents: []\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.1.2)\n\n2023-07-27T15:48:46.288+02:00  INFO 72114 --- [           main] htw.freiheit.first.FirstApplication      : Starting FirstApplication using Java 20.0.1 with PID 72114 (/Users/jornfreiheit/Documents/HTW/04_Projekte/Code/first/target/classes started by jornfreiheit in /Users/jornfreiheit/Documents/HTW/04_Projekte/Code/first)\n2023-07-27T15:48:46.289+02:00  INFO 72114 --- [           main] htw.freiheit.first.FirstApplication      : No active profile set, falling back to 1 default profile: \"default\"\n2023-07-27T15:48:46.614+02:00  INFO 72114 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2023-07-27T15:48:46.619+02:00  INFO 72114 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2023-07-27T15:48:46.619+02:00  INFO 72114 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.11]\n2023-07-27T15:48:46.669+02:00  INFO 72114 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2023-07-27T15:48:46.670+02:00  INFO 72114 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 358 ms\n2023-07-27T15:48:46.795+02:00  INFO 72114 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n2023-07-27T15:48:46.800+02:00  INFO 72114 --- [           main] htw.freiheit.first.FirstApplication      : Started FirstApplication in 0.654 seconds (process running for 0.781)\n</code></pre> </li> </ol> <p>Nun im Browser <code>http://localhost:8080/hello</code> eingeben. Es erscheint:</p> <p></p> <p>Nun im Browser <code>http://localhost:8080/hello?name=FIW</code> und es erscheint <code>Hello FIW!</code>.</p>"},{"location":"spring/#maven","title":"Maven","text":"<p>Das erste Spring-Projekt <code>first</code> haben wir mithilfe von Maven \u00fcbersetzt und ausgef\u00fchrt. Maven ist ein Build-Werkzeug, \u00e4hnlich wie make f\u00fcr C-Programme oder Gradle, ebenfalls f\u00fcr Java.</p> <p>Maven erwartet folgende einheitliche Projektstruktur des Java-Projektes:</p> <pre><code>projekt \n+- pom.xml\n+- src/\n   +- main/\n      +- java/\n      +- resources/\n   +- test/\n      +- java/\n      +- resources/\n+- target/\n</code></pre> <p>In der <code>pom.xml</code> werden alle Abh\u00e4ngigkeiten definiert. Die <code>pom.xml</code> aus dem <code>first</code>-Projekt sieht z.B. so aus:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.1.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;htw.freiheit&lt;/groupId&gt;\n    &lt;artifactId&gt;first&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;first&lt;/name&gt;\n    &lt;description&gt;Erstes Spring Boot Beispiel&lt;/description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;/java.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <p>Es handelt sich um eine XML-Datei, die alle zur Ausf\u00fchrung des Projektes notwendigen Informationen (Abh\u00e4ngigkeiten - dependencies) enth\u00e4lt. POM steht f\u00fcr Project Object Model. </p>"},{"location":"spring/#testgetriebene-entwicklung","title":"Testgetriebene Entwicklung","text":"<p>Spring Boot unterst\u00fctzt sehr gut Unit-Tests. Die Testklassen liegen unterhalb des Pfades <code>src/test/java</code> und die f\u00fcr die Tests ben\u00f6tigten Ressourcen werden typischer Weise unter <code>src/test/resources</code> abgelegt (Letzteres existiert aber noch nicht). Ein gutes Vorgehen zur Erstellung einer REST-API ist das Beschreiben der Anforderungen in Unit-Tests. Diese schlagen zun\u00e4chst fehl. Die Implementierung wird dann so gestaltet, dass diese Tests irgendwann erfolgreich durchlaufen werden. Diese Vorgehen nennt sich testgetriebene Entwicklung (test-driven development). Siehe dazu auch Test-Driven Development im Prog2-Skript.</p> <p>Die Tests werden mithilfe des Befehls <code>./mvnw test</code> (unter Windows <code>mvnw.cmd test</code>) ausgef\u00fchrt. Wir betrachten ein einfaches Beispiel. Zun\u00e4chst erstellen wir ein Unterpaket <code>rest</code> und darin eine Klasse <code>UserController.java</code>:</p> src/main/java/htw.freiheit.first.rest/UserController.java <pre><code>package htw.freiheit.first.rest;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    public ResponseEntity&lt;?&gt; getUsers() {\n        return ResponseEntity.ok(\"\");\n    }\n\n}\n</code></pre> <p>Darin vereinbaren wir einen Endpunkt <code>/user</code> \u00fcber den wir alle eingetragenen Nutzerinnen aus der Datenbank (die wir sp\u00e4ter anlegen) auslesen wollen. Dieses Auslesen \u00fcbernimmt die Methode <code>getUsers()</code>. Derzeit liefert dieses Methode jedoch nur den Http-Statuscode der Anfrage zur\u00fcck. Die Methode macht also noch nicht wirklich etwas, wir wollen jedoch einen entsprechenden Unit-Test daf\u00fcr schreiben:</p> src/test/java/htw.freiheit.first.rest/UserControllerTest.java <pre><code>package htw.freiheit.first.rest;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void testGetUsers() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/user\"))\n                .andExpect(MockMvcResultMatchers.status().isOk());\n    }\n}\n</code></pre> <p>Wenn wir nun den Test mithilfe von <code>/mvnw test</code> (bzw. <code>mvnw.cmd test</code>) starten, dann werden die Tests erfolgreich durchlaufen, da unsere Implementierung des <code>UserController</code> sehr rudiment\u00e4r ist. Es wird lediglich der Statuscode <code>200 - OK</code> zur\u00fcckgegeben und das ist auch genau das, was im Test abgefragt wird. Die Terminalausgabe sieht ungef\u00e4hr so aus:</p> <pre><code>./mvnw test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  18:26 h\n[INFO] Finished at: 2023-07-28T10:15:14+02:00\n[INFO] ------------------------------------------------------------------------\njornfreiheit@MB-JF first % ./mvnw test\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -------------------------&lt; htw.freiheit:first &gt;-------------------------\n[INFO] Building first 0.0.1-SNAPSHOT\n[INFO]   from pom.xml\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- resources:3.3.1:resources (default-resources) @ first ---\n[INFO] Copying 1 resource from src/main/resources to target/classes\n[INFO] Copying 0 resource from src/main/resources to target/classes\n[INFO] \n[INFO] --- compiler:3.11.0:compile (default-compile) @ first ---\n[INFO] Changes detected - recompiling the module! :input tree\n[INFO] Compiling 2 source files with javac [debug release 17] to target/classes\n[INFO] \n[INFO] --- resources:3.3.1:testResources (default-testResources) @ first ---\n[INFO] skip non existing resourceDirectory /Users/jornfreiheit/Documents/HTW/04_Projekte/Code/first/src/test/resources\n[INFO] \n[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ first ---\n[INFO] Changes detected - recompiling the module! :dependency\n[INFO] Compiling 2 source files with javac [debug release 17] to target/test-classes\n[INFO] \n[INFO] --- surefire:3.0.0:test (default-test) @ first ---\n[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit-platform/3.0.0/surefire-junit-platform-3.0.0.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit-platform/3.0.0/surefire-junit-platform-3.0.0.pom (4.5 kB at 24 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/3.0.0/surefire-providers-3.0.0.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/3.0.0/surefire-providers-3.0.0.pom (2.5 kB at 127 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/3.0.0/common-java5-3.0.0.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/3.0.0/common-java5-3.0.0.pom (2.7 kB at 76 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.pom (2.2 kB at 117 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.pom (2.4 kB at 120 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.pom (2.0 kB at 106 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit-platform/3.0.0/surefire-junit-platform-3.0.0.jar\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit-platform/3.0.0/surefire-junit-platform-3.0.0.jar (27 kB at 938 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/3.0.0/common-java5-3.0.0.jar\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.jar\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.jar\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.jar\nDownloaded from central: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/3.0.0/common-java5-3.0.0.jar (18 kB at 763 kB/s)\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-commons/1.3.2/junit-platform-commons-1.3.2.jar (78 kB at 1.0 MB/s)\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.3.2/junit-platform-launcher-1.3.2.jar (95 kB at 1.2 MB/s)\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-engine/1.3.2/junit-platform-engine-1.3.2.jar (138 kB at 1.5 MB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.pom\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.pom (3.0 kB at 159 kB/s)\nDownloading from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.jar\nDownloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.jar (169 kB at 2.0 MB/s)\n[INFO] \n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running htw.freiheit.first.rest.UserControllerTest\n10:15:28.194 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [htw.freiheit.first.rest.UserControllerTest]: UserControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.\n10:15:28.241 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration htw.freiheit.first.FirstApplication for test class htw.freiheit.first.rest.UserControllerTest\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.1.2)\n\n2023-07-28T10:15:28.396+02:00  INFO 34264 --- [           main] h.f.first.rest.UserControllerTest        : Starting UserControllerTest using Java 20.0.1 with PID 34264 (started by jornfreiheit in /Users/jornfreiheit/Documents/HTW/04_Projekte/Code/first)\n2023-07-28T10:15:28.396+02:00  INFO 34264 --- [           main] h.f.first.rest.UserControllerTest        : No active profile set, falling back to 1 default profile: \"default\"\n2023-07-28T10:15:28.821+02:00  INFO 34264 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''\n2023-07-28T10:15:28.821+02:00  INFO 34264 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''\n2023-07-28T10:15:28.822+02:00  INFO 34264 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms\n2023-07-28T10:15:28.831+02:00  INFO 34264 --- [           main] h.f.first.rest.UserControllerTest        : Started UserControllerTest in 0.54 seconds (process running for 0.917)\nOpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.17 s - in htw.freiheit.first.rest.UserControllerTest\n[INFO] Running htw.freiheit.first.FirstApplicationTests\n2023-07-28T10:15:29.290+02:00  INFO 34264 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [htw.freiheit.first.FirstApplicationTests]: FirstApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.\n2023-07-28T10:15:29.293+02:00  INFO 34264 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration htw.freiheit.first.FirstApplication for test class htw.freiheit.first.FirstApplicationTests\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.1.2)\n\n2023-07-28T10:15:29.302+02:00  INFO 34264 --- [           main] h.freiheit.first.FirstApplicationTests   : Starting FirstApplicationTests using Java 20.0.1 with PID 34264 (started by jornfreiheit in /Users/jornfreiheit/Documents/HTW/04_Projekte/Code/first)\n2023-07-28T10:15:29.302+02:00  INFO 34264 --- [           main] h.freiheit.first.FirstApplicationTests   : No active profile set, falling back to 1 default profile: \"default\"\n2023-07-28T10:15:29.392+02:00  INFO 34264 --- [           main] h.freiheit.first.FirstApplicationTests   : Started FirstApplicationTests in 0.097 seconds (process running for 1.478)\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.106 s - in htw.freiheit.first.FirstApplicationTests\n[INFO] \n[INFO] Results:\n[INFO] \n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\n[INFO] \n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  3.157 s\n[INFO] Finished at: 2023-07-28T10:15:29+02:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Beachten Sie, dass zwei Tests durchgef\u00fchrt werden, da auch bereits eine <code>FirstApplicationTests.java</code> existiert. MockMvc ist ein Spring MVC Test Framework. Wir erweitern noch um einen weiteren Test mit MockUp-Daten, um ein wenig komplexere Anfragen zu erl\u00e4utern. Sp\u00e4ter werden diese Daten in einer Datenbank vorgehalten. </p>"},{"location":"spring/#statische-importe","title":"Statische Importe","text":"<p>Zun\u00e4chst wollen wir den Code jedoch noch insofern vereinfachen, als dass wir nicht immer die verwendeten Klassen, von denen wir statische Methoden aufrufen, explizit aufrufen m\u00fcssen. Das betrifft z.B. folgenden Code: </p> <pre><code>@Test\npublic void testGetUsers() throws Exception {\n  mockMvc.perform(MockMvcRequestBuilders.get(\"/user\"))\n          .andExpect(MockMvcResultMatchers.status().isOk());\n}\n</code></pre> <p>Hier werden <code>MockMvcRequestBuilders</code> und <code>MockMvcResultMatchers</code> immer explizit aufgerufen (qualifizieren). Es hat sich jedoch bew\u00e4hrt, die statischen Methoden dieser Klassen statisch zu importieren, um die Lesbarkeit des Codes zu verbessern. Wir passen also den Import durch das Hinzuf\u00fcgen der Deklaration <code>static</code> und der zu verwendenden Methoden an:</p> src/test/java/htw.freiheit.first.rest/UserControllerTest.java <pre><code>package htw.freiheit.first.rest;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.web.servlet.MockMvc;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void testGetUsers() throws Exception {\n        mockMvc.perform(get(\"/user\"))\n                .andExpect(status().isOk());\n    }\n}\n</code></pre> <p>und vereinfachen somit die Lesbarkeit des Codes. </p>"},{"location":"spring/#ein-record-useritem","title":"Ein record <code>UserItem</code>","text":"<p>Wir betrachten nochmals den Code von <code>UserController</code> und darin insbesondere Zeile <code>11</code>:</p> src/main/java/htw.freiheit.first.rest/UserController.java <pre><code>package htw.freiheit.first.rest;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    public ResponseEntity&lt;?&gt; getUsers() {\n        return ResponseEntity.ok(\"\");\n    }\n\n}\n</code></pre> <p>Der R\u00fcckgabetyp der Methode <code>getUsers()</code> ist derzeit <code>ResponseEntity&lt;?&gt;</code>. Das hei\u00dft, dass der Typ <code>ResponseEntity</code> (siehe hier) zwar typisiert werden muss, wir jedoch den Typ hier nicht angeben, sondern stattdessen ein <code>?</code>. Die R\u00fcckgabe kann somit mit jedem beliebigen Referenztypen typisiert sein. Tats\u00e4chlich wollen wir aber sicherstellen, dass die R\u00fcckgabe einen konkreten Typ beinhaltet, n\u00e4mlich <code>UserItem</code>. Diesen Typ erstellen wir uns:</p> src/main/java/htw.freiheit.first.rest/UserItem.java <pre><code>package htw.freiheit.first.rest;\n\npublic record UserItem(String username, String email, String role, String password) {}\n</code></pre> <p>Records stehen seit Java 17 zur Verf\u00fcgung. Records sind Klassen f\u00fcr immutable (unver\u00e4nderliche) Daten. Das bedeutet, das \u00c4quivalent zu dem oben angegebenen Record  w\u00e4re eine Klasse mit </p> <ul> <li>als <code>private</code> und <code>final</code> deklarierten Objektvariablen <code>username</code>, <code>email</code>, <code>password</code>,</li> <li>einem <code>public</code> Konstruktor, dem Werte f\u00fcr die Objektvariablen \u00fcbergeben werden und mit diesen Werten werden die Objektvariablen belegt,</li> <li>getter  f\u00fcr die Objektvariablen (aber keine setter! - die Daten sollen ja unver\u00e4nderlich sein),</li> <li>Implementierungen f\u00fcr <code>equals(Object o)</code>, <code>hashCode()</code> und <code>toString()</code>.</li> </ul> <p>Ein Record enth\u00e4lt alle diese Eigenschaften automatisch, d.h. f\u00fcr <code>UserItem</code> existiert automatisch ein Konstruktor sowie die Implementierungen von  <code>equals(Object o)</code>, <code>hashCode()</code> und <code>toString()</code>. Die getter hei\u00dfen wie die Objektvariablen, also <code>username()</code>, <code>email()</code> und <code>password()</code> und sind Objektmethoden. Von Records kann nicht geerbt werden. Alles ist <code>final</code>. </p> <p>Mithilfe dieser Klasse k\u00f6nnen wir <code>ResponseEntity</code> nun typisieren (mit <code>List&lt;UserItem&gt;</code>). Dann m\u00fcssen wir aber auch darauf achten, dass tats\u00e4chlich eine <code>List&lt;UserItem&gt;</code> zur\u00fcckgegeben wird. Diese erzeugen wir uns als MackUp-Daten:</p> src/main/java/htw.freiheit.first.rest/UserController.java <pre><code>package htw.freiheit.first.rest;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@RestController\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    public ResponseEntity&lt;List&lt;UserItem&gt;&gt; getUsers() {\n\n        List&lt;UserItem&gt; result = List.of(\n            new UserItem(\"nameone\", \"one@mail.de\", \"admin\", \"x1%3\"),\n            new UserItem(\"nametwo\", \"two@mail.de\", \"user\", \"y4!2\")\n        );\n\n        return ResponseEntity.ok(result);\n    }\n\n}\n</code></pre> <p>Die Passw\u00f6rter werden sp\u00e4ter verschl\u00fcsselt (in der Datenbank) abgelegt. </p>"},{"location":"spring/#test-einer-response","title":"Test einer Response","text":"<p>Die <code>GET</code>-Anfrage an den Endpunkt <code>/user</code> sendet nun eine zun\u00e4chst hart codierte Liste (ein Array) von zwei <code>UserItem</code>-Objekten zur\u00fcck. Sp\u00e4ter wird diese Methode eine Datenbankabfrage durchf\u00fchren. Wir k\u00f6nnen den Inhalt dieser Response mithilfe des Matchers Hamcrest verifizieren. Dieser Matcher stellt einfache Methoden, wie z.B. <code>is()</code> und <code>hasSize()</code> zur Verf\u00fcgung (neben vielen anderen, siehe hier). Im folgenden Test sind diese Methoden verwendet:</p> src/test/java/htw.freiheit.first.rest/UserControllerTest.java <pre><code>package htw.freiheit.first.rest;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.web.servlet.MockMvc;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.CoreMatchers.is;\n\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void testGetUsers() throws Exception {\n        mockMvc.perform(get(\"/user\"))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\").isArray())\n                .andExpect(jsonPath(\"$\", hasSize(2)))\n                .andExpect(jsonPath(\"$[0].username\", is(\"nameone\")))\n                .andExpect(jsonPath(\"$[0].email\", is(\"one@mail.de\")))\n                .andExpect(jsonPath(\"$[0].role\", is(\"admin\")))\n                .andExpect(jsonPath(\"$[1].username\", is(\"nametwo\")))\n                .andExpect(jsonPath(\"$[1].email\", is(\"two@mail.de\")))\n                .andExpect(jsonPath(\"$[1].role\", is(\"user\")));\n    }\n}\n</code></pre> <p>JSON steht f\u00fcr JavaScript Object Notation und <code>jsonPath</code> ist eine Abfragesprache in Java f\u00fcr JSON. Die Response wird im JSON-Format zur\u00fcckgegeben. Mithilfe von <code>\"$\"</code> wird auf die Response, also das zur\u00fcckgegebene JSON zugegriffen. </p>"},{"location":"spring/#neues-useritem-erzeugen","title":"Neues <code>UserItem</code> erzeugen","text":""},{"location":"vaadin/","title":"Vaadin","text":""},{"location":"vaadin/#neues-projekt-erstellen","title":"Neues Projekt erstellen","text":"<p>Der empfohlene (siehe hier) Weg, ein neues Vaadin-Projekt zu erstellen, ist Vaadin Start. Erstellen Sie ruhig schon 2-3 weitere Views, z.B. eine mit dem Hello-World-Beispiel, eine mit dem Personen-Formular und eine mit Adress-Formular. Dann sieht man auch schon das Prinzip mit den Routen. </p> <p></p> <p>Klicken Sie dann auf den Button <code>Download Project</code>. Passen Sie die Daten eventuell an, z.B.:</p> <p></p> <p>Entpacken Sie die heruntergeladene Datei und schieben Sie den Ordner in Ihren Workspace. </p>"}]}