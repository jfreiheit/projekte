{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Anleitungen f\u00fcr Projekte \u00b6 Hier werden einige Anleitungen, Hilfen und Informationen f\u00fcr und \u00fcber die Projekte in der Wirtschaft abgelegt werden. Es soll ein Sammelsurium immer wieder auftretender technischer Fragestellungen beantwortet werden. Bisherige Anleitungen \u00b6 Einrichten eines Virtuellen Servers Beginn Erstellung Frontend mit Angular Beginn Erstellung Backend mit node.js Schauen Sie auch im WebTech-Skript (Zugang: webtech:webtech2021) nach, da werden im Laufe des Semsters viele Details zu den Themen Angular und node.js erl\u00e4utert.","title":"Home"},{"location":"#anleitungen-fur-projekte","text":"Hier werden einige Anleitungen, Hilfen und Informationen f\u00fcr und \u00fcber die Projekte in der Wirtschaft abgelegt werden. Es soll ein Sammelsurium immer wieder auftretender technischer Fragestellungen beantwortet werden.","title":"Anleitungen f\u00fcr Projekte"},{"location":"#bisherige-anleitungen","text":"Einrichten eines Virtuellen Servers Beginn Erstellung Frontend mit Angular Beginn Erstellung Backend mit node.js Schauen Sie auch im WebTech-Skript (Zugang: webtech:webtech2021) nach, da werden im Laufe des Semsters viele Details zu den Themen Angular und node.js erl\u00e4utert.","title":"Bisherige Anleitungen"},{"location":"backend/","text":"Backend \u00b6","title":"Backend"},{"location":"backend/#backend","text":"","title":"Backend"},{"location":"frontend/","text":"Frontend \u00b6 Um das Frontend zu erstellen, k\u00f6nnen Sie auf verschiedene JavaScript-Frameworks zur\u00fcckgreifen, die sich in den letzten Jahren etabliert haben: Angular React.js Vue.js Electron Diese geh\u00f6ren zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Wir zeigen hier exemplarisch den Beginn der Erstellung eines Frontends am Beispiel von Angular. Installationen \u00b6 Sie ben\u00f6tigen den Paketmanager npm . Laden sie sich daf\u00fcr node.js hier herunter und installieren Sie es. Nach erfolgreicher Installation sollte sowohl node -v funktionieren und eine Versionsnummer ausgeben (z.B. v13.3.0 - aktuell stabile Version ist aber v12.19.x ) als auch npm -v (z.B. 6.14.8 ). Au\u00dferdem ben\u00f6tigen Sie das Angular-Command-Line-Interface (CLI) , das Sie mithilfe des Befehls npm install -g angular-cli installieren. Danach sollte ng --version funktionieren und Ihnen etwas in dieser Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 9 .0.1 Node: 13 .3.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .900.1 @angular-devkit/core 9 .0.1 @angular-devkit/schematics 9 .0.1 @schematics/angular 9 .0.1 @schematics/update 0 .900.1 rxjs 6 .5.3 Jetzt k\u00f6nnen wir unser erstes Projekt erstellen. Projekt erstellen \u00b6 Wir wollen ein Projekt namens frontend erstellen. Wechseln Sie in den Ordner, in dem Sie dieses Projekt erstellen wollen. Geben Sie dann ein: ng new frontend Sie werden nun gefragt, ob verschiedene Pakete hinzugef\u00fcgt werden sollen, z.B. ? Would you like to add Angular routing? Yes ? Which stylesheet format would you like to use? CSS IDE \u00b6 Dieses Projekt k\u00f6nnen Sie mit der IDE Ihrer Wahl \u00f6ffnen. Ich empfehle IntelliJ IDEA Visual Studio Code WebStorm PhpStorm Sublime Text Atom git \u00b6 Beachten Sie, dass das neue erstellte Projekt bereits von git verwaltet wird, d.h. frontend entspricht bereits Ihrem lokalen Repository. Auch die .gitignore ist bereits erstellt und passt so. Um dieses Repository nach z.B. GitHub zu pushen, erstellen Sie sich dort ein Repository frontend (hier lautet die Remote-Repository-URL https://github.com/jfreiheit/frontend.git - bei Ihnen nat\u00fcrlich anders.) Im Ordner projekte f\u00fchren Sie dann aus: git add . git commit -m \"first commit\" git remote add origin https://github.com/jfreiheit/frontend.git git push -u origin master Dort, wo https://github.com/jfreiheit/frontend.git steht, setzen Sie Ihre Remote-Repository-URL ein. Von nun an m\u00fcssen Sie stets nur noch git add . git commit -m \"commit-message\" git push ausf\u00fchren, um Ihre aktuelle Version auf das Remote-Repository zu pushen. Anwendung starten \u00b6 Um die Anwendung zu starten, w\u00e4hlen Sie entweder in Ihrer IDE den entsprechenden Run-Button aus (neben dem gr\u00fcnen Pfeil steht so etwas wie Angular CLI Server ) oder Sie rufen in Ihrem frontend -Ordner ng serve auf. Nachdem das Compilieren erfolgreich war, geben Sie in den Browser die URL http://localhost:4200/ ein. Es erscheint: Um diese Ansicht zu \u00e4ndern, \u00f6ffnen wir in unserer IDE die Datei /frontend/src/app/app.component.html , d.h. in Ihrem Projekt frontend klappen Sie src auf und dann app . Darin befinden sich verschiedene app.* -dateien. Sie \u00f6ffnen app.component.html im Editor-Fenster. L\u00f6schen Sie nun den gesamten Inhalt der Datei au\u00dfer <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> eine \u00dcberschrift <h1>This is app</h1> hinzu. Die app.component.html sieht jetzt so aus: app.component.html < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Beachten Sie, dass Sie im Browser die Seite gar nicht selbst neu laden m\u00fcssen, sondern dass diese sich selbst\u00e4ndig aktualisiert. Single Page Application \u00b6 Wenn wir eine Anwendung mit Angular erstellen, dann handelt es sich dabei um eine sogenannte Single Page Application (SPA) , d.h. es wird genau eine Seite vom Webserver geladen und alle Inhalte werden in diese Seite (nach-)geladen, je nach Nutzerinteraktion. Die hier geladene Seite ist die index.html , die in unserem Projekte-Ordner frontend liegt. Sie sieht so aus: index.html <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < app-root ></ app-root > </ body > </ html > Das Element <app-root> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor ). Prefix \u00e4ndern - optional \u00b6 app ist dabei ein Prefix, der f\u00fcr die gesamte Anwendung gilt. Diesen Prefix k\u00f6nnen Sie \u00e4ndern. \u00d6ffnen Sie dazu die Datei angular.json , die sich im Projekt-Ordner frontend befindet. Diese Datei enth\u00e4lt die zentrale Konfiguration Ihres Projektes. Sie sieht wie folgt aus (Ausschnitt): angular.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"$schema\" : \"./node_modules/@angular/cli/lib/config/schema.json\" , \"version\" : 1 , \"newProjectRoot\" : \"projects\" , \"projects\" : { \"frontend\" : { \"projectType\" : \"application\" , \"schematics\" : {}, \"root\" : \"\" , \"sourceRoot\" : \"src\" , \"prefix\" : \"app\" , \"architect\" : { \"build\" : { \"builder\" : \"@angular-devkit/build-angular:browser\" , \"options\" : { \"outputPath\" : \"dist/frontend\" , \"index\" : \"src/index.html\" , \u00c4ndern Sie den Prefix in der hell markierten Zeile auf z.B. \"htw\" (andere Projekte vielleicht auf \"bvg\" oder \"bsr\"). Au\u00dferdem muss auch noch die tslint.json angepasst werden: tslint.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"extends\" : \"tslint:recommended\" , \"rules\" : { \"array-type\" : false , \"arrow-parens\" : false , \"deprecation\" : { \"severity\" : \"warning\" }, \"component-class-suffix\" : true , \"contextual-lifecycle\" : true , \"directive-class-suffix\" : true , \"directive-selector\" : [ true , \"attribute\" , \"htw\" , \"camelCase\" ], \"component-selector\" : [ true , \"element\" , \"htw\" , \"kebab-case\" ], \"import-blacklist\" : [ true , Dort wo in den hervorgehobenen Zeilen nun das neue Prefix \"htw\" steht, stand vorher \"app\". In der index.html und in der app.component.ts auch noch \u00e4ndern. Ab dann ist die Verwendung von \"htw\" als Prefix einegrichtet. Sie k\u00f6nnen es aber auch bei \"app\" belassen. Es soll an dieser Stelle einem besseren Verst\u00e4ndnis des Prinzips dienen. index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < htw-root ></ htw-root > </ body > </ html > app/app.component.ts 1 2 3 4 5 6 7 8 9 import { Component } from '@angular/core' ; @ Component ({ selector : 'htw-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'frontend' ; } Komponenten-Selektoren \u00b6 Nochmal zur\u00fcck zu unserer index.html - der single page, die vom Webserver geladen wird und in die alle weiteren Komponenten eingebunden werden. Wir haben dort nun also den Komponenten-Selektor <htw-root></htw-root> . In diesen Selektor wird nun dir root -Komponente ( app.component ) geladen. Dieser Selektor wird durch die root -Komponente ersetzt. Das ist unsere app/app.component.* . Eine solche Komponente besteht immer aus einer css -, einer html - und einer ts -Datei. Es wird also in diesen Komponenten-Selektor der HTML-Code der app.component.html eingebunden. Das sehen Sie auch, wenn Sie die Developer-Tools an Ihrem Browser \u00f6ffnen und sich den Quellcode der aktuellen Anwendung anschauen: neue Komponente erzeugen \u00b6 Wir erzeugen uns eine neue Komponente mit dem Namen liste und verwenden daf\u00fcr die Angular-CLI. Im Terminal geben Sie innerhalb des Projektordners frontend dazu den Befehl ng generate component liste In dem Befehl k\u00f6nnen Sie generate auch durch g und component durch c abk\u00fcrzen. Es h\u00e4tte also auch ng g c liste gereicht. Dadurch entsteht im src/app -Ordner eine neue Komponente liste (ein neuer Ordner liste ), die folgende Dateien enth\u00e4lt: liste.component.css - spezielle CSS-Definitionen nur f\u00fcr die Komponente liste.component.html - HTML-Inhalt der Komponente (Ansicht, View oder Template genannt) liste.component.spec.ts - Spezifikation f\u00fcr das Testen liste.component.ts - die TypeScript-Datei der Komponente Angenommen, wir definieren uns f\u00fcr unsere neue Komponente in liste.component.css CSS-Eigenschfaten und angenommen, binden in app.component.html die neue Komponente \u00fcber ihren Komponenten-Selektor <htw-liste></htw-liste> ein: src/app/app.component.html 1 2 3 < h1 > This is app </ h1 > < htw-liste ></ htw-liste > < router-outlet ></ router-outlet > src/app/liste/liste.component.css 1 2 3 4 p { border: red 3px solid; color: red; } , dann sieht unsere Anwenung so aus: In die index.html wird also die app.component.* (\u00fcber den Komponenten-Selektor <htw-root> ) eingebunden und in die app.component.html wird die liste.component.* (\u00fcber den Komponenten-Selektor <htw-liste> ) eingebunden. So k\u00f6nnen Sie Komponenten beliebig verschachteln. CSS-Framework verwenden \u00b6 Es ist empfehlenswert, f\u00fcr ein mordernes und einheitliches Design ein CSS-Framework zu verwenden. Die Auswahl unter solchen Frameworks ist gro\u00df. Hier einige Empfehlungen: Bootstrap SemanticUI Materialize CSS Foundation Wir wollen hier exemplarisch einmal SemanticUI einbinden. Geben Sie dazu im Terminal in dem frontend -Verzeichnis npm install semantic-ui-css ein. Sollten Sie die Meldung bekommen, dass Paket bedenklich ist ( found 1 high severity vulnerability ), geben Sie danach noch npm audit fix ein. Durch diese Anweisung werden die ben\u00f6tigten Style-Dateien geladen und unter dem Ordner node_modules/semantic-ui-css gespeichert. Diese m\u00fcssen jetzt nur noch in das Projekt eingebunden werden. \u00d6ffnen Sie dazu in Ihrer IDE die Datei angular.json . Bei dieser Datei handelt es sich um eine JSON -Datei, die f\u00fcr die Konfiguration unserer Angular-Anwendung zust\u00e4ndig ist. In der angular.json -Datei \u00e4ndern wir unter \"projects\"\u2192\"frontend\"\u2192\"architect\"\u2192\"build\"\u2192\"options\"\u2192\"styles\" den Eintrag von \"styles\" : [ \"src/styles.css\" ] , auf \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , Sie k\u00f6nnen auch beides angeben. Die gleiche \u00c4nderung f\u00fchren wir in angular.json unter \"test\" (statt \"build\" ) durch, um die Styles auch beim Testen einzubeziehen. Also unter \"projects\"\u2192\"frontend\"\u2192\"architect\"\u2192\"test\"\u2192\"options\"\u2192\"styles\" ebenfalls nach \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , \u00e4ndern. Um zu testen, ob das Einbinden der Semantic-UI-Styles geklappt hat, \u00f6ffnen wir in der IDE die Datei app.component.html und geben die hervorgehobenen Zeilen ein (Listing zeigt die vollst\u00e4ndige Datei app.component.html ): app/app.component.html 1 2 3 4 5 6 < h1 > This is app </ h1 > < htw-liste ></ htw-liste > < div class = \"ui active inverted dimmer\" > < div class = \"ui text loader large\" > Lade Seite ... </ div > </ div > < router-outlet ></ router-outlet > Wir gestalten also das Template unserer App-Komponente als ein div im div . Beiden div s werden CSS-Klassen aus dem Semantic-UI-Framework zugeordnet (siehe z.B. Klasse loader ). Als Beweis, dass die CSS-Eigenschaften des Frameworks auch in allen anderen Komponenten genutzt werden k\u00f6nnen, \u00e4ndern wir auch noch unsere liste.component.html : app/liste/liste.component.html 1 2 3 4 5 6 < p > liste works! </ p > < div class = \"ui three buttons\" > < button class = \"ui active button\" > One </ button > < button class = \"ui button\" > Two </ button > < button class = \"ui button\" > Three </ button > </ div > Routing \u00b6 Routing spielt eine zentrale Rolle in einer Applikation. Durch das Routing sind wir in der Lage, zwischen Komponenten hin- und her zu wechseln. Derzeit haben wir unsere Komponenten jeweils statisch \u00fcber die Komponenten-Selektoren eingebunden. Nun soll ein dynamisches Einbinden erfolgen. Wenn wir uns nochmal die app.component.html anschauen, dann befindet sich darin eine Komponenten-Selektor <router-outlet></router-outlet> . In diesen werden durch Routing nun dynamisch Komponenten eingebunden. Wir haben bei der Erstellung des Projektes bei der Frage, ? Would you like to add Angular routing? Yes mit \"yes\" geantwortet. Deshalb m\u00fcssen wir das Routing-Modul nun nicht mehr einbinden. Sollte dies jedoch noch nicht geschehen sein, k\u00f6nnen Sie das mithilfe von npm install @angular/router --save nachholen. Um das Routing zu erl\u00e4utern, erstellen wir uns drei weitere Komponenten dashboard , about und tasks . ng g c dashboard ng g c about ng g c tasks Die dashboard und die about -Komponente definieren wir jeweils als \"Top-Level\"-Routen. Das bedeutet, dass wir diese Komponenten \u00fcber localhost:4200/dashboard bzw localhost:4200/about erreichen werden. Dazu \u00f6ffnen wir die app.routing.module.ts -Datei, die sich im app -Ordner befindet und erg\u00e4nzen sie wie folgt (hinzugef\u00fcgte Zeilen hervorgehoben): app/app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { DashboardComponent } from './dashboard/dashboard.component' ; import { AboutComponent } from './about/about.component' ; const routes : Routes = [ { path : 'dashboard' , component : DashboardComponent }, { path : 'about' , component : AboutComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In den Zeilen 4 und 5 wurden die Komponenten importiert, f\u00fcr die wir Routen anlegen wollen. Diese Routen wurden in den Zeilen 8 und 9 definiert. Die URL ( localhost:4200 ) wird um den path /dashboard erweitert, um die dashboard -Komponente aufzurufen und um den path /about , um die about -Komponente einzubinden. Wir passen jetzt noch die Views der root -Komponente udn der liste -Komponente an, um das Ergebnis des Routings zu veranschaulichen (es sind jeweils die vollst\u00e4ndigen *.component.html -Dateien angegeben: app/app.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 < div style = \"border: black solid 2px; padding: 20px;\" > < h1 > This is app </ h1 > < htw-liste ></ htw-liste > < div class = \"ui page grid\" > < div class = \"computer tablet only row\" > < div class = \"ui inverted menu navbar\" > < a class = \"active item\" routerLink = \"/dashboard\" routerLinkActive = \"active\" > Dashboard </ a > < a class = \"item\" routerLink = \"/about\" routerLinkActive = \"active\" > About </ a > < a class = \"item\" routerLink = \"/\" routerLinkActive = \"active\" > Home </ a > </ div > </ div > < div class = \"row\" > < div class = \"column padding-reset\" > < div class = \"ui large message\" > < h1 class = \"ui huge header\" > This is app </ h1 > < p > Das ist die < code > app </ code > -Komponente </ p > < a href = \"http://freiheit.f4.htw-berlin.de/projekte\" class = \"ui blue button\" > Anleitung Projekte &raquo; </ a > </ div > </ div > </ div > </ div > < router-outlet ></ router-outlet > </ div > app/liste/liste.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 < div style = \"margin: 20px; border: red solid 2px; padding: 20px;\" > < div class = \"ui page grid\" > < div class = \"computer tablet only row\" > < div class = \"ui inverted menu navbar\" > < a class = \"active item\" routerLink = \"/dashboard\" routerLinkActive = \"active\" > Dashboard </ a > < a class = \"item\" routerLink = \"/about\" routerLinkActive = \"active\" > About </ a > < a class = \"item\" routerLink = \"/\" routerLinkActive = \"active\" > Home </ a > </ div > </ div > < div class = \"row\" > < div class = \"column padding-reset\" > < div class = \"ui large message\" > < h1 class = \"ui huge header\" > This is liste </ h1 > < p > Das ist die < code > liste </ code > -Komponente </ p > < a href = \"http://freiheit.f4.htw-berlin.de/projekte\" class = \"ui blue button\" > Anleitung Projekte &raquo; </ a > </ div > </ div > </ div > </ div > </ div > app/liste/liste.component.css 1 /* diese Datei wieder leeren, also die Definition f\u00fcr p loeschen */ Grob ist unsere HTML-Struktur nun wie folgt: In der index.html wird die root -Komponente ( app.component.html ) eingebunden. Ich habe extra einen schwarzen Rahmen um diese View gemacht, damit man erkennen kann, welche Inhalte diese Komponente hat. In der app.component.html wird die liste.component.html eingebunden. Um diese View habe ich einen roten Rahmen definiert. In beiden Komponenten gibt es Links auf die drei Routen: / - localhost:4200 /dashboard - localhost:4200/dashboard /about - localhost:4200/about und darunter einen grauen Kasten. Der Selektor <router-outlet></div>router-outlet> ist Teil der app.component.html . Hier wird nun dynamisch die entsprechende Komponente eingef\u00fcgt, je nach Route. Das hei\u00dft, unter der URL localhost:4200/dashboard erscheint dort die View von dashboard (also dashboard.component.html ) und unter der URL localhost:4200/about erscheint dort die View von about (also about.component.html ). Ansicht f\u00fcr http://localhost:4200/ : Ansicht f\u00fcr http://localhost:4200/dashboard : Ansicht f\u00fcr http://localhost:4200/about : Sie k\u00f6nnen nun ein Angular-Projekt erzeugen, ein externes CSS-Framework einbinden, Komponenten erstellen und einbinden sowie Routen definieren. Damit haben Sie erstmal die notwendigsten Hilfsmittel in der Hand, um loszulegen, denke ich. Viel Spa\u00df mit Angular und viel Erfolg im Projekt!","title":"Frontend"},{"location":"frontend/#frontend","text":"Um das Frontend zu erstellen, k\u00f6nnen Sie auf verschiedene JavaScript-Frameworks zur\u00fcckgreifen, die sich in den letzten Jahren etabliert haben: Angular React.js Vue.js Electron Diese geh\u00f6ren zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Wir zeigen hier exemplarisch den Beginn der Erstellung eines Frontends am Beispiel von Angular.","title":"Frontend"},{"location":"frontend/#installationen","text":"Sie ben\u00f6tigen den Paketmanager npm . Laden sie sich daf\u00fcr node.js hier herunter und installieren Sie es. Nach erfolgreicher Installation sollte sowohl node -v funktionieren und eine Versionsnummer ausgeben (z.B. v13.3.0 - aktuell stabile Version ist aber v12.19.x ) als auch npm -v (z.B. 6.14.8 ). Au\u00dferdem ben\u00f6tigen Sie das Angular-Command-Line-Interface (CLI) , das Sie mithilfe des Befehls npm install -g angular-cli installieren. Danach sollte ng --version funktionieren und Ihnen etwas in dieser Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 9 .0.1 Node: 13 .3.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .900.1 @angular-devkit/core 9 .0.1 @angular-devkit/schematics 9 .0.1 @schematics/angular 9 .0.1 @schematics/update 0 .900.1 rxjs 6 .5.3 Jetzt k\u00f6nnen wir unser erstes Projekt erstellen.","title":"Installationen"},{"location":"frontend/#projekt-erstellen","text":"Wir wollen ein Projekt namens frontend erstellen. Wechseln Sie in den Ordner, in dem Sie dieses Projekt erstellen wollen. Geben Sie dann ein: ng new frontend Sie werden nun gefragt, ob verschiedene Pakete hinzugef\u00fcgt werden sollen, z.B. ? Would you like to add Angular routing? Yes ? Which stylesheet format would you like to use? CSS","title":"Projekt erstellen"},{"location":"frontend/#ide","text":"Dieses Projekt k\u00f6nnen Sie mit der IDE Ihrer Wahl \u00f6ffnen. Ich empfehle IntelliJ IDEA Visual Studio Code WebStorm PhpStorm Sublime Text Atom","title":"IDE"},{"location":"frontend/#git","text":"Beachten Sie, dass das neue erstellte Projekt bereits von git verwaltet wird, d.h. frontend entspricht bereits Ihrem lokalen Repository. Auch die .gitignore ist bereits erstellt und passt so. Um dieses Repository nach z.B. GitHub zu pushen, erstellen Sie sich dort ein Repository frontend (hier lautet die Remote-Repository-URL https://github.com/jfreiheit/frontend.git - bei Ihnen nat\u00fcrlich anders.) Im Ordner projekte f\u00fchren Sie dann aus: git add . git commit -m \"first commit\" git remote add origin https://github.com/jfreiheit/frontend.git git push -u origin master Dort, wo https://github.com/jfreiheit/frontend.git steht, setzen Sie Ihre Remote-Repository-URL ein. Von nun an m\u00fcssen Sie stets nur noch git add . git commit -m \"commit-message\" git push ausf\u00fchren, um Ihre aktuelle Version auf das Remote-Repository zu pushen.","title":"git"},{"location":"frontend/#anwendung-starten","text":"Um die Anwendung zu starten, w\u00e4hlen Sie entweder in Ihrer IDE den entsprechenden Run-Button aus (neben dem gr\u00fcnen Pfeil steht so etwas wie Angular CLI Server ) oder Sie rufen in Ihrem frontend -Ordner ng serve auf. Nachdem das Compilieren erfolgreich war, geben Sie in den Browser die URL http://localhost:4200/ ein. Es erscheint: Um diese Ansicht zu \u00e4ndern, \u00f6ffnen wir in unserer IDE die Datei /frontend/src/app/app.component.html , d.h. in Ihrem Projekt frontend klappen Sie src auf und dann app . Darin befinden sich verschiedene app.* -dateien. Sie \u00f6ffnen app.component.html im Editor-Fenster. L\u00f6schen Sie nun den gesamten Inhalt der Datei au\u00dfer <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> eine \u00dcberschrift <h1>This is app</h1> hinzu. Die app.component.html sieht jetzt so aus: app.component.html < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Beachten Sie, dass Sie im Browser die Seite gar nicht selbst neu laden m\u00fcssen, sondern dass diese sich selbst\u00e4ndig aktualisiert.","title":"Anwendung starten"},{"location":"frontend/#single-page-application","text":"Wenn wir eine Anwendung mit Angular erstellen, dann handelt es sich dabei um eine sogenannte Single Page Application (SPA) , d.h. es wird genau eine Seite vom Webserver geladen und alle Inhalte werden in diese Seite (nach-)geladen, je nach Nutzerinteraktion. Die hier geladene Seite ist die index.html , die in unserem Projekte-Ordner frontend liegt. Sie sieht so aus: index.html <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < app-root ></ app-root > </ body > </ html > Das Element <app-root> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor ).","title":"Single Page Application"},{"location":"frontend/#prefix-andern-optional","text":"app ist dabei ein Prefix, der f\u00fcr die gesamte Anwendung gilt. Diesen Prefix k\u00f6nnen Sie \u00e4ndern. \u00d6ffnen Sie dazu die Datei angular.json , die sich im Projekt-Ordner frontend befindet. Diese Datei enth\u00e4lt die zentrale Konfiguration Ihres Projektes. Sie sieht wie folgt aus (Ausschnitt): angular.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"$schema\" : \"./node_modules/@angular/cli/lib/config/schema.json\" , \"version\" : 1 , \"newProjectRoot\" : \"projects\" , \"projects\" : { \"frontend\" : { \"projectType\" : \"application\" , \"schematics\" : {}, \"root\" : \"\" , \"sourceRoot\" : \"src\" , \"prefix\" : \"app\" , \"architect\" : { \"build\" : { \"builder\" : \"@angular-devkit/build-angular:browser\" , \"options\" : { \"outputPath\" : \"dist/frontend\" , \"index\" : \"src/index.html\" , \u00c4ndern Sie den Prefix in der hell markierten Zeile auf z.B. \"htw\" (andere Projekte vielleicht auf \"bvg\" oder \"bsr\"). Au\u00dferdem muss auch noch die tslint.json angepasst werden: tslint.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"extends\" : \"tslint:recommended\" , \"rules\" : { \"array-type\" : false , \"arrow-parens\" : false , \"deprecation\" : { \"severity\" : \"warning\" }, \"component-class-suffix\" : true , \"contextual-lifecycle\" : true , \"directive-class-suffix\" : true , \"directive-selector\" : [ true , \"attribute\" , \"htw\" , \"camelCase\" ], \"component-selector\" : [ true , \"element\" , \"htw\" , \"kebab-case\" ], \"import-blacklist\" : [ true , Dort wo in den hervorgehobenen Zeilen nun das neue Prefix \"htw\" steht, stand vorher \"app\". In der index.html und in der app.component.ts auch noch \u00e4ndern. Ab dann ist die Verwendung von \"htw\" als Prefix einegrichtet. Sie k\u00f6nnen es aber auch bei \"app\" belassen. Es soll an dieser Stelle einem besseren Verst\u00e4ndnis des Prinzips dienen. index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < htw-root ></ htw-root > </ body > </ html > app/app.component.ts 1 2 3 4 5 6 7 8 9 import { Component } from '@angular/core' ; @ Component ({ selector : 'htw-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'frontend' ; }","title":"Prefix \u00e4ndern - optional"},{"location":"frontend/#komponenten-selektoren","text":"Nochmal zur\u00fcck zu unserer index.html - der single page, die vom Webserver geladen wird und in die alle weiteren Komponenten eingebunden werden. Wir haben dort nun also den Komponenten-Selektor <htw-root></htw-root> . In diesen Selektor wird nun dir root -Komponente ( app.component ) geladen. Dieser Selektor wird durch die root -Komponente ersetzt. Das ist unsere app/app.component.* . Eine solche Komponente besteht immer aus einer css -, einer html - und einer ts -Datei. Es wird also in diesen Komponenten-Selektor der HTML-Code der app.component.html eingebunden. Das sehen Sie auch, wenn Sie die Developer-Tools an Ihrem Browser \u00f6ffnen und sich den Quellcode der aktuellen Anwendung anschauen:","title":"Komponenten-Selektoren"},{"location":"frontend/#neue-komponente-erzeugen","text":"Wir erzeugen uns eine neue Komponente mit dem Namen liste und verwenden daf\u00fcr die Angular-CLI. Im Terminal geben Sie innerhalb des Projektordners frontend dazu den Befehl ng generate component liste In dem Befehl k\u00f6nnen Sie generate auch durch g und component durch c abk\u00fcrzen. Es h\u00e4tte also auch ng g c liste gereicht. Dadurch entsteht im src/app -Ordner eine neue Komponente liste (ein neuer Ordner liste ), die folgende Dateien enth\u00e4lt: liste.component.css - spezielle CSS-Definitionen nur f\u00fcr die Komponente liste.component.html - HTML-Inhalt der Komponente (Ansicht, View oder Template genannt) liste.component.spec.ts - Spezifikation f\u00fcr das Testen liste.component.ts - die TypeScript-Datei der Komponente Angenommen, wir definieren uns f\u00fcr unsere neue Komponente in liste.component.css CSS-Eigenschfaten und angenommen, binden in app.component.html die neue Komponente \u00fcber ihren Komponenten-Selektor <htw-liste></htw-liste> ein: src/app/app.component.html 1 2 3 < h1 > This is app </ h1 > < htw-liste ></ htw-liste > < router-outlet ></ router-outlet > src/app/liste/liste.component.css 1 2 3 4 p { border: red 3px solid; color: red; } , dann sieht unsere Anwenung so aus: In die index.html wird also die app.component.* (\u00fcber den Komponenten-Selektor <htw-root> ) eingebunden und in die app.component.html wird die liste.component.* (\u00fcber den Komponenten-Selektor <htw-liste> ) eingebunden. So k\u00f6nnen Sie Komponenten beliebig verschachteln.","title":"neue Komponente erzeugen"},{"location":"frontend/#css-framework-verwenden","text":"Es ist empfehlenswert, f\u00fcr ein mordernes und einheitliches Design ein CSS-Framework zu verwenden. Die Auswahl unter solchen Frameworks ist gro\u00df. Hier einige Empfehlungen: Bootstrap SemanticUI Materialize CSS Foundation Wir wollen hier exemplarisch einmal SemanticUI einbinden. Geben Sie dazu im Terminal in dem frontend -Verzeichnis npm install semantic-ui-css ein. Sollten Sie die Meldung bekommen, dass Paket bedenklich ist ( found 1 high severity vulnerability ), geben Sie danach noch npm audit fix ein. Durch diese Anweisung werden die ben\u00f6tigten Style-Dateien geladen und unter dem Ordner node_modules/semantic-ui-css gespeichert. Diese m\u00fcssen jetzt nur noch in das Projekt eingebunden werden. \u00d6ffnen Sie dazu in Ihrer IDE die Datei angular.json . Bei dieser Datei handelt es sich um eine JSON -Datei, die f\u00fcr die Konfiguration unserer Angular-Anwendung zust\u00e4ndig ist. In der angular.json -Datei \u00e4ndern wir unter \"projects\"\u2192\"frontend\"\u2192\"architect\"\u2192\"build\"\u2192\"options\"\u2192\"styles\" den Eintrag von \"styles\" : [ \"src/styles.css\" ] , auf \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , Sie k\u00f6nnen auch beides angeben. Die gleiche \u00c4nderung f\u00fchren wir in angular.json unter \"test\" (statt \"build\" ) durch, um die Styles auch beim Testen einzubeziehen. Also unter \"projects\"\u2192\"frontend\"\u2192\"architect\"\u2192\"test\"\u2192\"options\"\u2192\"styles\" ebenfalls nach \"styles\" : [ \"node_modules/semantic-ui-css/semantic.css\" ] , \u00e4ndern. Um zu testen, ob das Einbinden der Semantic-UI-Styles geklappt hat, \u00f6ffnen wir in der IDE die Datei app.component.html und geben die hervorgehobenen Zeilen ein (Listing zeigt die vollst\u00e4ndige Datei app.component.html ): app/app.component.html 1 2 3 4 5 6 < h1 > This is app </ h1 > < htw-liste ></ htw-liste > < div class = \"ui active inverted dimmer\" > < div class = \"ui text loader large\" > Lade Seite ... </ div > </ div > < router-outlet ></ router-outlet > Wir gestalten also das Template unserer App-Komponente als ein div im div . Beiden div s werden CSS-Klassen aus dem Semantic-UI-Framework zugeordnet (siehe z.B. Klasse loader ). Als Beweis, dass die CSS-Eigenschaften des Frameworks auch in allen anderen Komponenten genutzt werden k\u00f6nnen, \u00e4ndern wir auch noch unsere liste.component.html : app/liste/liste.component.html 1 2 3 4 5 6 < p > liste works! </ p > < div class = \"ui three buttons\" > < button class = \"ui active button\" > One </ button > < button class = \"ui button\" > Two </ button > < button class = \"ui button\" > Three </ button > </ div >","title":"CSS-Framework verwenden"},{"location":"frontend/#routing","text":"Routing spielt eine zentrale Rolle in einer Applikation. Durch das Routing sind wir in der Lage, zwischen Komponenten hin- und her zu wechseln. Derzeit haben wir unsere Komponenten jeweils statisch \u00fcber die Komponenten-Selektoren eingebunden. Nun soll ein dynamisches Einbinden erfolgen. Wenn wir uns nochmal die app.component.html anschauen, dann befindet sich darin eine Komponenten-Selektor <router-outlet></router-outlet> . In diesen werden durch Routing nun dynamisch Komponenten eingebunden. Wir haben bei der Erstellung des Projektes bei der Frage, ? Would you like to add Angular routing? Yes mit \"yes\" geantwortet. Deshalb m\u00fcssen wir das Routing-Modul nun nicht mehr einbinden. Sollte dies jedoch noch nicht geschehen sein, k\u00f6nnen Sie das mithilfe von npm install @angular/router --save nachholen. Um das Routing zu erl\u00e4utern, erstellen wir uns drei weitere Komponenten dashboard , about und tasks . ng g c dashboard ng g c about ng g c tasks Die dashboard und die about -Komponente definieren wir jeweils als \"Top-Level\"-Routen. Das bedeutet, dass wir diese Komponenten \u00fcber localhost:4200/dashboard bzw localhost:4200/about erreichen werden. Dazu \u00f6ffnen wir die app.routing.module.ts -Datei, die sich im app -Ordner befindet und erg\u00e4nzen sie wie folgt (hinzugef\u00fcgte Zeilen hervorgehoben): app/app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { DashboardComponent } from './dashboard/dashboard.component' ; import { AboutComponent } from './about/about.component' ; const routes : Routes = [ { path : 'dashboard' , component : DashboardComponent }, { path : 'about' , component : AboutComponent }, ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In den Zeilen 4 und 5 wurden die Komponenten importiert, f\u00fcr die wir Routen anlegen wollen. Diese Routen wurden in den Zeilen 8 und 9 definiert. Die URL ( localhost:4200 ) wird um den path /dashboard erweitert, um die dashboard -Komponente aufzurufen und um den path /about , um die about -Komponente einzubinden. Wir passen jetzt noch die Views der root -Komponente udn der liste -Komponente an, um das Ergebnis des Routings zu veranschaulichen (es sind jeweils die vollst\u00e4ndigen *.component.html -Dateien angegeben: app/app.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 < div style = \"border: black solid 2px; padding: 20px;\" > < h1 > This is app </ h1 > < htw-liste ></ htw-liste > < div class = \"ui page grid\" > < div class = \"computer tablet only row\" > < div class = \"ui inverted menu navbar\" > < a class = \"active item\" routerLink = \"/dashboard\" routerLinkActive = \"active\" > Dashboard </ a > < a class = \"item\" routerLink = \"/about\" routerLinkActive = \"active\" > About </ a > < a class = \"item\" routerLink = \"/\" routerLinkActive = \"active\" > Home </ a > </ div > </ div > < div class = \"row\" > < div class = \"column padding-reset\" > < div class = \"ui large message\" > < h1 class = \"ui huge header\" > This is app </ h1 > < p > Das ist die < code > app </ code > -Komponente </ p > < a href = \"http://freiheit.f4.htw-berlin.de/projekte\" class = \"ui blue button\" > Anleitung Projekte &raquo; </ a > </ div > </ div > </ div > </ div > < router-outlet ></ router-outlet > </ div > app/liste/liste.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 < div style = \"margin: 20px; border: red solid 2px; padding: 20px;\" > < div class = \"ui page grid\" > < div class = \"computer tablet only row\" > < div class = \"ui inverted menu navbar\" > < a class = \"active item\" routerLink = \"/dashboard\" routerLinkActive = \"active\" > Dashboard </ a > < a class = \"item\" routerLink = \"/about\" routerLinkActive = \"active\" > About </ a > < a class = \"item\" routerLink = \"/\" routerLinkActive = \"active\" > Home </ a > </ div > </ div > < div class = \"row\" > < div class = \"column padding-reset\" > < div class = \"ui large message\" > < h1 class = \"ui huge header\" > This is liste </ h1 > < p > Das ist die < code > liste </ code > -Komponente </ p > < a href = \"http://freiheit.f4.htw-berlin.de/projekte\" class = \"ui blue button\" > Anleitung Projekte &raquo; </ a > </ div > </ div > </ div > </ div > </ div > app/liste/liste.component.css 1 /* diese Datei wieder leeren, also die Definition f\u00fcr p loeschen */ Grob ist unsere HTML-Struktur nun wie folgt: In der index.html wird die root -Komponente ( app.component.html ) eingebunden. Ich habe extra einen schwarzen Rahmen um diese View gemacht, damit man erkennen kann, welche Inhalte diese Komponente hat. In der app.component.html wird die liste.component.html eingebunden. Um diese View habe ich einen roten Rahmen definiert. In beiden Komponenten gibt es Links auf die drei Routen: / - localhost:4200 /dashboard - localhost:4200/dashboard /about - localhost:4200/about und darunter einen grauen Kasten. Der Selektor <router-outlet></div>router-outlet> ist Teil der app.component.html . Hier wird nun dynamisch die entsprechende Komponente eingef\u00fcgt, je nach Route. Das hei\u00dft, unter der URL localhost:4200/dashboard erscheint dort die View von dashboard (also dashboard.component.html ) und unter der URL localhost:4200/about erscheint dort die View von about (also about.component.html ). Ansicht f\u00fcr http://localhost:4200/ : Ansicht f\u00fcr http://localhost:4200/dashboard : Ansicht f\u00fcr http://localhost:4200/about : Sie k\u00f6nnen nun ein Angular-Projekt erzeugen, ein externes CSS-Framework einbinden, Komponenten erstellen und einbinden sowie Routen definieren. Damit haben Sie erstmal die notwendigsten Hilfsmittel in der Hand, um loszulegen, denke ich. Viel Spa\u00df mit Angular und viel Erfolg im Projekt!","title":"Routing"},{"location":"server/","text":"Virtuellen Server einrichten \u00b6 Wir wollen erl\u00e4utern, wie Sie sich einen Virtuellen Server einrichten k\u00f6nnen. Einen solchen Server erhalten Sie auf Antrag bei den Laboringenieuren in der 6. Etage des C-Geb\u00e4udes. Wir beschreiben hier die Einrichtung eines solchen Servers, der hier die IP 141.45.146.202 und den Namen htwfb5.f4.htw-berlin.de hat. Nach Einrichtung durch die Laboringenieure hat ein solcher Server zwei User: local und root . Sie k\u00f6nnen sich baer weder per ssh noch per sftp als root auf dem Server einloggen. Einloggen per ssh \u00b6 Sie k\u00f6nnen sich nur als local einloggen. Geben Sie dazu im Terminal % ssh local@141.45.146.202 The authenticity of host '141.45.146.202 (141.45.146.202)' can 't be established. ECDSA key fingerprint is SHA256:Kh3JNWKv1J29LDdFn12p2p+cKzP8zzQHpwuhVoQqOio. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added ' 141 .45.146.202 ' (ECDSA) to the list of known hosts. local@141.45.146.202' s password: Linux htwfb5 4 .19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64 The programs included with the Debian GNU/Linux system are free software ; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Mon Oct 19 10 :19:16 2020 from 141 .45.154.161 local@htwfb5:~$ und auf Nachfrage das Passwort des Users local ein. Anstelle von ssh local@141.45.146.202 h\u00e4tten Sie auch ssh local@htwfb5.f4.htw-berlin.de verwenden k\u00f6nnen. Um nun root -Rechte zu erlangen, geben Sie su - (super user - Minus nicht vergessen!) und das Passwort f\u00fcr root ein. local@htwfb5:~$ su - Password: root@htwfb5:/home/local# Sie sind nun als root auf dem Server eingeloggt. Systeminformationen \u00b6 Probieren Sie ein paar Befehle aus, um Informationen \u00fcber das Sytem zu ermitteln. Zun\u00e4chst Details \u00fcber das Betriebssystem: root@htwfb5:~# hostnamectl Static hostname: htwfb5 Icon name: computer-vm Chassis: vm Machine ID: 8074a4fe7a1e4160882b8739fc91ff6b Boot ID: 1289d3137b284315b3e780bae4672d53 Virtualization: xen Operating System: Debian GNU/Linux 10 ( buster ) Kernel: Linux 4 .19.0-5-amd64 Architecture: x86-64 root@htwfb5:~# Und so fragen Sie laufende Prozesse ab: ps aux Liste aller Nutzer ( less mit q beenden): less /etc/passwd Liste aller Gruppen: less /etc/group q Die Firewall anpassen \u00b6 Als erstes passen wir die firewall an, da es standardm\u00e4\u00dfig nicht erlaubt ist, sich von au\u00dferhalb des HTW-Netzes auf einen solchen Server einzuloggen (Sie m\u00fcssten dann immer erst einen VPN-Tunnel aufmachen). root@htwfb5:/home/local# cd /root root@htwfb5:~# ls -la total 36 drwx------ 2 root root 4096 Oct 19 13 :40 . drwxr-xr-x 22 root root 4096 Oct 19 09 :20 .. -rw------- 1 root root 417 Oct 19 10 :19 .bash_history -rw-r--r-- 1 root root 570 Jan 31 2010 .bashrc -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw------- 1 root root 1587 Oct 19 13 :40 .viminfo -rwxr-xr-x 1 root root 90 Jul 8 2019 firewall-disable.sh -rwxr-xr-x 1 root root 4112 Jul 8 2019 firewall.sh root@htwfb5:~# \u00d6ffnen Sie die firewall.sh mit vim (ist bereits installiert), also vim firewall.sh und entfernen Sie dann in folgenden Zeilen das # (den Kommentar): iptables -A INPUT -p tcp --dport 22 -j ACCEPT iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT iptables -A INPUT -p tcp --dport 443 -j ACCEPT iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT iptables -A INPUT -p tcp --dport 8080 -j ACCEPT iptables -A OUTPUT -p tcp --dport 8080 -j ACCEPT jeweils 2 Mal (f\u00fcr au\u00dferhalb und innerhalb). Alles andere sollte zun\u00e4chst so bleiben. Lesen Sie die aktualisierte firewall.sh ein (als root ): ./firewall.sh Jetzt k\u00f6nnen Sie sich auch von au\u00dfen als local einloggen und k\u00f6nnen auch von au\u00dfen sftp verwenden. Installationen \u00b6 Wir wollen im folgenden ein System aus Apache Webserver MySQL (und phpMyAdmin) erstellen und installieren daf\u00fcr nun die entsprechenden Komponenten. Vor jeder Neuinstallation geben wir zun\u00e4chst (als root ) apt update ein und falls es etwas zu upgraden gibt: apt full-upgrade Apche Webserver \u00b6 Um den Apache Webserver zu installieren, geben wir apt install apache2 ein und dr\u00fccken bei Nachfragen einfach Enter . Nach der Installation k\u00f6nnen Sie den Status des Webservers abfragen: root@htwfb5:~# systemctl status apache2 * apache2.service - The Apache HTTP Server Loaded: loaded ( /lib/systemd/system/apache2.service ; enabled ; vendor preset: enabled ) Active: active ( running ) since Mon 2020 -10-19 14 :51:24 UTC ; 26min ago Docs: https://httpd.apache.org/docs/2.4/ Main PID: 24209 ( apache2 ) Tasks: 55 ( limit: 1074 ) Memory: 4 .6M CGroup: /system.slice/apache2.service | -24209 /usr/sbin/apache2 -k start | -24211 /usr/sbin/apache2 -k start ` -24212 /usr/sbin/apache2 -k start Oct 19 14 :51:23 htwfb5 systemd [ 1 ] : Starting The Apache HTTP Server... Oct 19 14 :51:24 htwfb5 systemd [ 1 ] : Started The Apache HTTP Server. root@htwfb5:~# und auch die URL http://htwfb5.f4.htw-berlin.de/ in den Browser eingeben. Es erscheint: Falls Sie den Webserver neu starten wollen/m\u00fcssen, geben Sie einfach systemctl restart apache2 ein. Sollte es Probleme mit dem Webserver geben, schauen Sie sich die *.log -Dateien unter /var/log/apache2 an: root@htwfb5:/var/log/apache2# ls -la total 16 drwxr-x--- 2 root adm 4096 Oct 19 14 :51 . drwxr-xr-x 6 root root 4096 Oct 19 14 :51 .. -rw-r----- 1 root adm 1024 Oct 19 15 :22 access.log -rw-r----- 1 root adm 281 Oct 19 14 :51 error.log -rw-r----- 1 root adm 0 Oct 19 14 :51 other_vhosts_access.log root@htwfb5:/var/log/apache2# PHP installieren \u00b6 Um zum Beispiel phpMyAdmin f\u00fcr unsere MySQL -Datenbank nutzen zu k\u00f6nnen, ben\u00f6tigen wir PHP. Dazu installieren wir apt install php php-cgi php-mysqli php-pear php-mbstring php-gettext libapache2-mod-php php-common php-phpseclib php-mysql und dr\u00fccken bei Nachfragen einfach Enter . Die erfolgreiche Installation k\u00f6nnen Sie \u00fcberpr\u00fcfen, indem Sie root@htwfb5:~# php --version PHP 7 .3.19-1~deb10u1 ( cli ) ( built: Jul 5 2020 06 :46:45 ) ( NTS ) Copyright ( c ) 1997 -2018 The PHP Group Zend Engine v3.3.19, Copyright ( c ) 1998 -2018 Zend Technologies with Zend OPcache v7.3.19-1~deb10u1, Copyright ( c ) 1999 -2018, by Zend Technologies root@htwfb5:~# eingeben. MySQL installieren \u00b6 Es spricht gar nichts dagegen, anstelle von MySQL MariaDB zu installieren. In der Verwendung sind beide Datenbankmanagementsysteme kompatibel. Wir zeigen hier die Installation von MySQL. Zun\u00e4chst ben\u00f6tigen wir das GnuPG Package, eine Open-Source-Implementierung des OpenPGP-Standards. Geben Sie apt install gnupg ein und dr\u00fccken bei Nachfragen einfach Enter . \u00d6ffnen Sie im Browser nun die Seite https://dev.mysql.com/downloads/repo/apt/ und klicken dort den \"Download\"-Button. Auf der folgenden Seite klicken Sie weder auf den \"Login\"- noch auf den \"Sign Up\"-Button, sondern rechts-klicken (!) auf den Link No thanks, just start my download . Kopieren Sie diesen Link in Ihre Zwischenablage. Geben Sie nun im Terminal ein: wget https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb Die https://... -Adresse ist der kopierte Link! Ihr Ordner enth\u00e4lt dann die mysql-...deb -Datei. Geben Sie nun dpkg -i mysql-apt-config* in Ihr Terminal ein. Es erscheint ein blaues Fenster. Durch die Men\u00fcpunkte k\u00f6nnen Sie mit den Pfeiltasten navigieren. Sie k\u00f6nnen aber alles so lassen (den oberen Men\u00fcpunkt) und mit der Tab-Taste zu <Ok> wechseln. Dr\u00fccken Sie Enter . Auch auf der n\u00e4chsten Seite. Geben Sie nun root@htwfb5:~# apt-get update Get:1 http://repo.mysql.com/apt/debian buster InRelease [ 21 .5 kB ] Hit:2 http://security.debian.org buster/updates InRelease Hit:3 http://httpredir.debian.org/debian buster InRelease Get:4 http://repo.mysql.com/apt/debian buster/mysql-8.0 Sources [ 951 B ] Get:5 http://repo.mysql.com/apt/debian buster/mysql-apt-config amd64 Packages [ 563 B ] Get:6 http://repo.mysql.com/apt/debian buster/mysql-8.0 amd64 Packages [ 7542 B ] Get:7 http://repo.mysql.com/apt/debian buster/mysql-tools amd64 Packages [ 5210 B ] Fetched 35 .8 kB in 1s ( 69 .7 kB/s ) Reading package lists... Done root@htwfb5:~# ein. Nun haben wir die Pakete verf\u00fcgbar und k\u00f6nnen installieren: apt install mysql-server W\u00e4hrend der Installation werden Sie nach dem root -Passwort f\u00fcr MySQL gefragt, d.h. Sie sollen sich eins \u00fcberlegen. Notieren Sie sich dieses Passwort! Sie k\u00f6nnen auch das Passwort des local -Users des Virtuellen Servers verwenden (um sich nicht so viele Passw\u00f6rter merken zu m\u00fcssen). W\u00e4hlen Sie danach \"Strong password encryption\" aus und dr\u00fccken <Ok> . Pr\u00fcfen, ob MySQL korrekt installiert ist und l\u00e4uft: root@htwfb5:~# systemctl status mysql * mysql.service - MySQL Community Server Loaded: loaded ( /lib/systemd/system/mysql.service ; enabled ; vendor preset: enabled ) Active: active ( running ) since Mon 2020 -10-19 15 :55:55 UTC ; 17h ago Docs: man:mysqld ( 8 ) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 6290 ExecStartPre = /usr/share/mysql-8.0/mysql-systemd-start pre ( code = exited, status = 0 /S Main PID: 6325 ( mysqld ) Status: \"Server is operational\" Tasks: 37 ( limit: 1074 ) Memory: 331 .3M CGroup: /system.slice/mysql.service ` -6325 /usr/sbin/mysqld Oct 19 15 :55:54 htwfb5 systemd [ 1 ] : Starting MySQL Community Server... Oct 19 15 :55:55 htwfb5 systemd [ 1 ] : Started MySQL Community Server. Sie k\u00f6nnen die MySQL-Konfiguration noch absichern, um die Nutzerinnen zu zwingen, relativ starke Passw\u00f6rter zu verwenden. Dazu gibt es das Tool mysql_secure_installation , welches mit dem MySQL-Server geliefert wird. Sie k\u00f6nnen darin entscheiden, ob Sie eine Passwortvalidierung verwenden wollen und welche St\u00e4rke das Passwort haben soll. ob Sie anonyme User und das root -Login von au\u00dfen verbieten wollen und ob die test -Datenbank, auf die jeder Zugriff hat, gel\u00f6scht werden soll. Wir werden dieses Werkzeug jetzt (noch) nicht ausf\u00fchren, sp\u00e4testens aber, wenn wir mit einer Webanwendung auf dem Server in Produktion gehen. Sie k\u00f6nnen nun aber das MySQL-Administrationstool mysqladmin verwenden: mysqladmin -u root -p version -u root gibt an, dass Sie sich als root (MySQL- root ) anmelden und -p gibt an, dass das (MySQL-) root -Passwort eingegeben werden muss. F\u00fcr mysqladmin -u root -p version erhalten Sie ungef\u00e4hr folgende Ausgabe: root@htwfb5:~# mysqladmin -u root -p version Enter password: mysqladmin Ver 8 .0.22 for Linux on x86_64 ( MySQL Community Server - GPL ) Copyright ( c ) 2000 , 2020 , Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Server version 8 .0.22 Protocol version 10 Connection Localhost via UNIX socket UNIX socket /var/run/mysqld/mysqld.sock Uptime: 18 hours 7 min 43 sec Threads: 2 Questions: 8 Slow queries: 0 Opens: 127 Flush tables: 3 Open tables: 48 Queries per second avg: 0 .000 root@htwfb5:~# mysqladmin ist ein recht m\u00e4chtiges Tool. Insbesondere k\u00f6nnen Sie damit auch alle Nutzerinnen-Passw\u00f6rter \u00e4ndern (auch das von root ). Weitere Informationen zu mysqladmin finden Sie hier phpMyAdmin \u00b6 Wir k\u00f6nnten nun Datenbanken, Tabellen usw. \u00fcber die Kommandozeile des MySQl-Servers anlegen, \u00e4ndern und l\u00f6schen, aber wir verwenden daf\u00fcr lieber die grafische Weboberfl\u00e4che phpMyAdmin . Wir laden die aktuelle Version von phpMyAdmin zun\u00e4chst herunter: wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz Mit der Option Downloads geben wir an, dass der Download in einen Download-Ordner in dem aufrufenden Ordner erfolgt, d.h. in dem aufrufenden Ordner wird ein Ordner Downloads angelegt, falls er noch nicht existiert. Um die Signatur der heruntergeladenen Datei zu \u00fcberpr\u00fcfen, laden wir uns noch den GPG key f\u00fcr phpMyAdmin herunter (ebenfalls in das Downloads - Verzeichnis: wget -P Downloads https://files.phpmyadmin.net/phpmyadmin.keyring Wir wechseln in den Downloads - Ordner und importieren den keyring : root@htwfb5:~# cd Downloads/ root@htwfb5:~/Downloads# gpg --import phpmyadmin.keyring gpg: directory '/root/.gnupg' created gpg: keybox '/root/.gnupg/pubring.kbx' created gpg: /root/.gnupg/trustdb.gpg: trustdb created gpg: key 9C27B31342B7511D: public key \"Michal \\xc4\\x8ciha\\xc5\\x99 <michal@cihar.com>\" imported gpg: key FEFC65D181AF644A: public key \"Marc Delisle <marc@infomarc.info>\" imported gpg: key CE752F178259BD92: public key \"Isaac Bennetch <bennetch@gmail.com>\" imported gpg: key DA68AB39218AB947: public key \"phpMyAdmin Security Team <security@phpmyadmin.net>\" imported gpg: Total number processed: 4 gpg: imported: 4 Wir verlassen den Downloads -Ordner wieder und laden uns das .asc - File von phpmyadmin herunter. asc-Dateien sind ASCII-Skript-Dateien. Hier enth\u00e4lt es eine digitale Signatur als Text und kann von Ver- und Entschl\u00fcsselungsprogrammen, wie z.B. * Pretty Good Privacy (PGP)* gepr\u00fcft werden. root@htwfb5:~/Downloads# cd .. root@htwfb5:~# wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc --2020-10-20 10 :41:33-- https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc Resolving www.phpmyadmin.net ( www.phpmyadmin.net ) ... 195 .181.175.48 Connecting to www.phpmyadmin.net ( www.phpmyadmin.net ) | 195 .181.175.48 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://files.phpmyadmin.net/phpMyAdmin/5.0.4/phpMyAdmin-5.0.4-all-languages.tar.gz.asc [ following ] --2020-10-20 10 :41:33-- https://files.phpmyadmin.net/phpMyAdmin/5.0.4/phpMyAdmin-5.0.4-all-languages.tar.gz.asc Resolving files.phpmyadmin.net ( files.phpmyadmin.net ) ... 195 .181.175.55 Connecting to files.phpmyadmin.net ( files.phpmyadmin.net ) | 195 .181.175.55 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 833 [ application/octet-stream ] Saving to: 'Downloads/phpMyAdmin-latest-all-languages.tar.gz.asc' phpMyAdmin-latest-all-languages 100 % [===================================================== > ] 833 --.-KB/s in 0s 2020 -10-20 10 :41:33 ( 12 .5 MB/s ) - 'Downloads/phpMyAdmin-latest-all-languages.tar.gz.asc' saved [ 833 /833 ] Nun k\u00f6nnen wir die phpmyadmin - Signatur \u00fcberpr\u00fcfen: root@htwfb5:~# cd Downloads root@htwfb5:~/Downloads# gpg --verify phpMyAdmin-latest-all-languages.tar.gz.asc gpg: assuming signed data in 'phpMyAdmin-latest-all-languages.tar.gz' gpg: Signature made Thu Oct 15 18 :10:40 2020 UTC gpg: using RSA key 3D06A59ECE730EB71B511C17CE752F178259BD92 gpg: Good signature from \"Isaac Bennetch <bennetch@gmail.com>\" [ unknown ] gpg: aka \"Isaac Bennetch <isaac@bennetch.org>\" [ unknown ] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 3D06 A59E CE73 0EB7 1B51 1C17 CE75 2F17 8259 BD92 Zugriff auf phpMyAdmin \u00fcber den Webserver \u00b6 Wir haben phpMyAdmin nun heruntergeladen und den Download verifiziert. Jetzt wollen wir es f\u00fcr die Nutzung zur Verf\u00fcgung stellen. Damit es \u00fcber eine URL, wie z.B. http://htwfb5.f4.htw-berlin.de/phpmyadmin erreichbar ist, kopieren wir phpmyadmin in unser * DocumentRoot* . Das ist in Linux-Systemen typischerweise var/www/html . Wir wechesln in dieses Verzeichnis und erstellen dort den Ordner phpmyadmin : root@htwfb5:~/Downloads# cd /var/www/html root@htwfb5:/var/www/html# ls -la total 20 drwxr-xr-x 2 root root 4096 Oct 19 14 :51 . drwxr-xr-x 3 root root 4096 Oct 19 14 :51 .. -rw-r--r-- 1 root root 10701 Oct 19 14 :51 index.html root@htwfb5:/var/www/html# mkdir phpmyadmin root@htwfb5:/var/www/html# ls -la total 24 drwxr-xr-x 3 root root 4096 Oct 20 10 :53 . drwxr-xr-x 3 root root 4096 Oct 19 14 :51 .. -rw-r--r-- 1 root root 10701 Oct 19 14 :51 index.html drwxr-xr-x 2 root root 4096 Oct 20 10 :53 phpmyadmin Danach wechseln wir wieder in unseren Downloads -Ordner zur\u00fcck und entpacken dort unsere gezippte phpmyadmin -Datei direkt in den /var/www/html/phpmyadmin -Ordner: root@htwfb5:/var/www/html# cd /root/Downloads/ root@htwfb5:~/Downloads# tar xvf phpMyAdmin-latest-all-languages.tar.gz --strip-components = 1 -C /var/www/html/phpmyadmin Es erscheint eine sehr lange Liste von Dateien, die alle in den /var/www/html/phpmyadmin -Ordner entpackt werden. Jetzt k\u00f6nnte man die URL http://htwfb5.f4.htw-berlin.de/phpmyadmin/ bereits in den Browser eingeben und es k\u00e4me bereits das Anmeldeformular f\u00fcr phpmyadmin : Wir wollen uns aber zun\u00e4chst noch um eine sichere Anmeldung k\u00fcmmern. Dazu wechseln wir in das /var/www/html/phpmyadmin -Verzeichnis. Darin gibt es eine Datei config.sample.inc.php , welche eine Beispiel-Konfiguration f\u00fcr phpmyadmin enth\u00e4lt. Diese Datei kopieren wir in eine config.inc.php -Datei (diese wird erstellt): cd /var/www/html/phpmyadmin cp config.sample.inc.php config.inc.php Wir \u00f6ffnen diese config.inc.php mit einem Terminaleditor (z.B. nano oder vim ). IN Zeile 18 in dieser Datei gibt es folgenden Eintrag: $cfg [ 'blowfish_secret' ] = '' ; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */ Wir ben\u00f6tigen eine Passphrase f\u00fcr den Blowfish-Verschl\u00fcsselungsalgorithmus , der f\u00fcr die Authentifikation mithilfe von Cookies verwendet wird. Diese Passphrase soll mindestens 32 Zeichen lang sein. Sie tragen diese Passphrase direkt in die Datei config.inc.php ein, deshalb m\u00fcssen Sie sich diese auch gar nicht merken, da sie dort ja jederzeit f\u00fcr Sie lesbar ist. Geben Sie also ein Satz dort ein, der aus mindestens 32 Zeichen besteht (kann Sonderzeichen, Leerzeichen usw. enthalten). Speichern Sie dann die Datei config.inc.php . Wir wechseln die Zugriffsrechte der Datei config.inc.php von 644 auf 660 (schreib- und lesbar durch User und Group, aber weder noch f\u00fcr die Welt): root@htwfb5:/var/www/html/phpmyadmin# chmod 660 config.inc.php root@htwfb5:/var/www/html/phpmyadmin# ls -la config.inc.php -rw-rw---- 1 root root 4590 Oct 20 11 :18 config.inc.php Wir haben das gesamte Verzeichnis phpmyadmin in /var/www/html als root angelegt. Dadurch ist root dort auch Owner. Das wollen wir \u00e4ndern. Rekursiv wird das gesamte Verzeichnis dem User (und der Group) www-data zugeordnet. chown -R www-data:www-data phpmyadmin Jetzt starten wir noch unseren Webserver neu und dann k\u00f6nnen wir phpmyadmin im Browser aufrufen: systemctl restart apache2 M\u00f6gliche Login-Probleme phpmyadmin eventuelle Fehlerausschrift: mysqli::real_connect(): The server requested authentication method unknown to the client [caching_sha2_password] und/oder mysqli::real_connect(): (HY000/2054): The server requested authentication method unknown to the client m\u00f6gliche L\u00f6sungen: PHP-Update auf 7.4 (davor hat mysqli caching_sha2 nicht unterst\u00fctzt) wenn das auch nicht hilft: per mysql -u root -p als root auf den MySQl-Server anmelden ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'hierDasRootPasswort'; dann wird wieder native Passwort gepr\u00fcft git \u00b6 Damit Sie Ihr Repository / Ihre Repositories auch auf den virtuellen Server \"pullen\" k\u00f6nnen, ben\u00f6tigen Sie noch git . Die Installation ist einfach: apt install git Beantworten Sie eventuelle Fragen einfach mit Enter . Testen Sie, ob die Installation erfolgreich war: git --version Es sollte etwas wie git version 2.20.1 ausgegeben werden. Verwendung von git \u00b6 Sie m\u00fcssen nun Ihr Remote Rpository (die entsprechende URL erhalten Sie bei GitHub oder GitLab oder welchen git-Host Sie auch verwenden) genau ein Mal clonen ( git clone RemoteRepositoryCloneURL ). Meistens wollen Sie genau in den Ordner /var/www/html clonen, da dort dann Ihr lokales Repository angelegt wird und Sie gleichzeitig im DocumentRoot sind. Wir zeigen hier einmal exemplarisch das Clonen des GitHub-Repositories mit der Clone_URL https://github.com/jfreiheit/projekte.git . Wir wechseln zun\u00e4chst in das Verzeichnis /var/www/html/ und clonen dorthin unser Repository. root@htwfb5:/# cd /var/www/html root@htwfb5:/var/www/html# git clone https://github.com/jfreiheit/projekte.git Cloning into 'projekte' ... remote: Enumerating objects: 12 , done . remote: Counting objects: 100 % ( 12 /12 ) , done . remote: Compressing objects: 100 % ( 11 /11 ) , done . remote: Total 12 ( delta 1 ) , reused 11 ( delta 0 ) , pack-reused 0 Unpacking objects: 100 % ( 12 /12 ) , done . root@htwfb5:/var/www/html# Es entsteht ein Ordner projekte innerhalb von /var/www/html . Um \u00fcber den Browser auf diesen Ordner zuzugreifen, m\u00fcssen Sie jetzt nur noch die URL http://htwfb5.f4.htw-berlin.de/projekte in Ihrem Browser aufrufen. Nachdem Sie einmal geclont haben, m\u00fcssen Sie stets nur noch innerhalb des projekte -Ordners ( cd /var/www/html/projekte ) aufrufen: git pull , um sich die neueste Version Ihres Repositories auf den virtuellen Server zu ziehen.","title":"Virtueller Server"},{"location":"server/#virtuellen-server-einrichten","text":"Wir wollen erl\u00e4utern, wie Sie sich einen Virtuellen Server einrichten k\u00f6nnen. Einen solchen Server erhalten Sie auf Antrag bei den Laboringenieuren in der 6. Etage des C-Geb\u00e4udes. Wir beschreiben hier die Einrichtung eines solchen Servers, der hier die IP 141.45.146.202 und den Namen htwfb5.f4.htw-berlin.de hat. Nach Einrichtung durch die Laboringenieure hat ein solcher Server zwei User: local und root . Sie k\u00f6nnen sich baer weder per ssh noch per sftp als root auf dem Server einloggen.","title":"Virtuellen Server einrichten"},{"location":"server/#einloggen-per-ssh","text":"Sie k\u00f6nnen sich nur als local einloggen. Geben Sie dazu im Terminal % ssh local@141.45.146.202 The authenticity of host '141.45.146.202 (141.45.146.202)' can 't be established. ECDSA key fingerprint is SHA256:Kh3JNWKv1J29LDdFn12p2p+cKzP8zzQHpwuhVoQqOio. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added ' 141 .45.146.202 ' (ECDSA) to the list of known hosts. local@141.45.146.202' s password: Linux htwfb5 4 .19.0-5-amd64 #1 SMP Debian 4.19.37-5 (2019-06-19) x86_64 The programs included with the Debian GNU/Linux system are free software ; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Mon Oct 19 10 :19:16 2020 from 141 .45.154.161 local@htwfb5:~$ und auf Nachfrage das Passwort des Users local ein. Anstelle von ssh local@141.45.146.202 h\u00e4tten Sie auch ssh local@htwfb5.f4.htw-berlin.de verwenden k\u00f6nnen. Um nun root -Rechte zu erlangen, geben Sie su - (super user - Minus nicht vergessen!) und das Passwort f\u00fcr root ein. local@htwfb5:~$ su - Password: root@htwfb5:/home/local# Sie sind nun als root auf dem Server eingeloggt.","title":"Einloggen per ssh"},{"location":"server/#systeminformationen","text":"Probieren Sie ein paar Befehle aus, um Informationen \u00fcber das Sytem zu ermitteln. Zun\u00e4chst Details \u00fcber das Betriebssystem: root@htwfb5:~# hostnamectl Static hostname: htwfb5 Icon name: computer-vm Chassis: vm Machine ID: 8074a4fe7a1e4160882b8739fc91ff6b Boot ID: 1289d3137b284315b3e780bae4672d53 Virtualization: xen Operating System: Debian GNU/Linux 10 ( buster ) Kernel: Linux 4 .19.0-5-amd64 Architecture: x86-64 root@htwfb5:~# Und so fragen Sie laufende Prozesse ab: ps aux Liste aller Nutzer ( less mit q beenden): less /etc/passwd Liste aller Gruppen: less /etc/group q","title":"Systeminformationen"},{"location":"server/#die-firewall-anpassen","text":"Als erstes passen wir die firewall an, da es standardm\u00e4\u00dfig nicht erlaubt ist, sich von au\u00dferhalb des HTW-Netzes auf einen solchen Server einzuloggen (Sie m\u00fcssten dann immer erst einen VPN-Tunnel aufmachen). root@htwfb5:/home/local# cd /root root@htwfb5:~# ls -la total 36 drwx------ 2 root root 4096 Oct 19 13 :40 . drwxr-xr-x 22 root root 4096 Oct 19 09 :20 .. -rw------- 1 root root 417 Oct 19 10 :19 .bash_history -rw-r--r-- 1 root root 570 Jan 31 2010 .bashrc -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw------- 1 root root 1587 Oct 19 13 :40 .viminfo -rwxr-xr-x 1 root root 90 Jul 8 2019 firewall-disable.sh -rwxr-xr-x 1 root root 4112 Jul 8 2019 firewall.sh root@htwfb5:~# \u00d6ffnen Sie die firewall.sh mit vim (ist bereits installiert), also vim firewall.sh und entfernen Sie dann in folgenden Zeilen das # (den Kommentar): iptables -A INPUT -p tcp --dport 22 -j ACCEPT iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT iptables -A INPUT -p tcp --dport 443 -j ACCEPT iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT iptables -A INPUT -p tcp --dport 8080 -j ACCEPT iptables -A OUTPUT -p tcp --dport 8080 -j ACCEPT jeweils 2 Mal (f\u00fcr au\u00dferhalb und innerhalb). Alles andere sollte zun\u00e4chst so bleiben. Lesen Sie die aktualisierte firewall.sh ein (als root ): ./firewall.sh Jetzt k\u00f6nnen Sie sich auch von au\u00dfen als local einloggen und k\u00f6nnen auch von au\u00dfen sftp verwenden.","title":"Die Firewall anpassen"},{"location":"server/#installationen","text":"Wir wollen im folgenden ein System aus Apache Webserver MySQL (und phpMyAdmin) erstellen und installieren daf\u00fcr nun die entsprechenden Komponenten. Vor jeder Neuinstallation geben wir zun\u00e4chst (als root ) apt update ein und falls es etwas zu upgraden gibt: apt full-upgrade","title":"Installationen"},{"location":"server/#apche-webserver","text":"Um den Apache Webserver zu installieren, geben wir apt install apache2 ein und dr\u00fccken bei Nachfragen einfach Enter . Nach der Installation k\u00f6nnen Sie den Status des Webservers abfragen: root@htwfb5:~# systemctl status apache2 * apache2.service - The Apache HTTP Server Loaded: loaded ( /lib/systemd/system/apache2.service ; enabled ; vendor preset: enabled ) Active: active ( running ) since Mon 2020 -10-19 14 :51:24 UTC ; 26min ago Docs: https://httpd.apache.org/docs/2.4/ Main PID: 24209 ( apache2 ) Tasks: 55 ( limit: 1074 ) Memory: 4 .6M CGroup: /system.slice/apache2.service | -24209 /usr/sbin/apache2 -k start | -24211 /usr/sbin/apache2 -k start ` -24212 /usr/sbin/apache2 -k start Oct 19 14 :51:23 htwfb5 systemd [ 1 ] : Starting The Apache HTTP Server... Oct 19 14 :51:24 htwfb5 systemd [ 1 ] : Started The Apache HTTP Server. root@htwfb5:~# und auch die URL http://htwfb5.f4.htw-berlin.de/ in den Browser eingeben. Es erscheint: Falls Sie den Webserver neu starten wollen/m\u00fcssen, geben Sie einfach systemctl restart apache2 ein. Sollte es Probleme mit dem Webserver geben, schauen Sie sich die *.log -Dateien unter /var/log/apache2 an: root@htwfb5:/var/log/apache2# ls -la total 16 drwxr-x--- 2 root adm 4096 Oct 19 14 :51 . drwxr-xr-x 6 root root 4096 Oct 19 14 :51 .. -rw-r----- 1 root adm 1024 Oct 19 15 :22 access.log -rw-r----- 1 root adm 281 Oct 19 14 :51 error.log -rw-r----- 1 root adm 0 Oct 19 14 :51 other_vhosts_access.log root@htwfb5:/var/log/apache2#","title":"Apche Webserver"},{"location":"server/#php-installieren","text":"Um zum Beispiel phpMyAdmin f\u00fcr unsere MySQL -Datenbank nutzen zu k\u00f6nnen, ben\u00f6tigen wir PHP. Dazu installieren wir apt install php php-cgi php-mysqli php-pear php-mbstring php-gettext libapache2-mod-php php-common php-phpseclib php-mysql und dr\u00fccken bei Nachfragen einfach Enter . Die erfolgreiche Installation k\u00f6nnen Sie \u00fcberpr\u00fcfen, indem Sie root@htwfb5:~# php --version PHP 7 .3.19-1~deb10u1 ( cli ) ( built: Jul 5 2020 06 :46:45 ) ( NTS ) Copyright ( c ) 1997 -2018 The PHP Group Zend Engine v3.3.19, Copyright ( c ) 1998 -2018 Zend Technologies with Zend OPcache v7.3.19-1~deb10u1, Copyright ( c ) 1999 -2018, by Zend Technologies root@htwfb5:~# eingeben.","title":"PHP installieren"},{"location":"server/#mysql-installieren","text":"Es spricht gar nichts dagegen, anstelle von MySQL MariaDB zu installieren. In der Verwendung sind beide Datenbankmanagementsysteme kompatibel. Wir zeigen hier die Installation von MySQL. Zun\u00e4chst ben\u00f6tigen wir das GnuPG Package, eine Open-Source-Implementierung des OpenPGP-Standards. Geben Sie apt install gnupg ein und dr\u00fccken bei Nachfragen einfach Enter . \u00d6ffnen Sie im Browser nun die Seite https://dev.mysql.com/downloads/repo/apt/ und klicken dort den \"Download\"-Button. Auf der folgenden Seite klicken Sie weder auf den \"Login\"- noch auf den \"Sign Up\"-Button, sondern rechts-klicken (!) auf den Link No thanks, just start my download . Kopieren Sie diesen Link in Ihre Zwischenablage. Geben Sie nun im Terminal ein: wget https://dev.mysql.com/get/mysql-apt-config_0.8.15-1_all.deb Die https://... -Adresse ist der kopierte Link! Ihr Ordner enth\u00e4lt dann die mysql-...deb -Datei. Geben Sie nun dpkg -i mysql-apt-config* in Ihr Terminal ein. Es erscheint ein blaues Fenster. Durch die Men\u00fcpunkte k\u00f6nnen Sie mit den Pfeiltasten navigieren. Sie k\u00f6nnen aber alles so lassen (den oberen Men\u00fcpunkt) und mit der Tab-Taste zu <Ok> wechseln. Dr\u00fccken Sie Enter . Auch auf der n\u00e4chsten Seite. Geben Sie nun root@htwfb5:~# apt-get update Get:1 http://repo.mysql.com/apt/debian buster InRelease [ 21 .5 kB ] Hit:2 http://security.debian.org buster/updates InRelease Hit:3 http://httpredir.debian.org/debian buster InRelease Get:4 http://repo.mysql.com/apt/debian buster/mysql-8.0 Sources [ 951 B ] Get:5 http://repo.mysql.com/apt/debian buster/mysql-apt-config amd64 Packages [ 563 B ] Get:6 http://repo.mysql.com/apt/debian buster/mysql-8.0 amd64 Packages [ 7542 B ] Get:7 http://repo.mysql.com/apt/debian buster/mysql-tools amd64 Packages [ 5210 B ] Fetched 35 .8 kB in 1s ( 69 .7 kB/s ) Reading package lists... Done root@htwfb5:~# ein. Nun haben wir die Pakete verf\u00fcgbar und k\u00f6nnen installieren: apt install mysql-server W\u00e4hrend der Installation werden Sie nach dem root -Passwort f\u00fcr MySQL gefragt, d.h. Sie sollen sich eins \u00fcberlegen. Notieren Sie sich dieses Passwort! Sie k\u00f6nnen auch das Passwort des local -Users des Virtuellen Servers verwenden (um sich nicht so viele Passw\u00f6rter merken zu m\u00fcssen). W\u00e4hlen Sie danach \"Strong password encryption\" aus und dr\u00fccken <Ok> . Pr\u00fcfen, ob MySQL korrekt installiert ist und l\u00e4uft: root@htwfb5:~# systemctl status mysql * mysql.service - MySQL Community Server Loaded: loaded ( /lib/systemd/system/mysql.service ; enabled ; vendor preset: enabled ) Active: active ( running ) since Mon 2020 -10-19 15 :55:55 UTC ; 17h ago Docs: man:mysqld ( 8 ) http://dev.mysql.com/doc/refman/en/using-systemd.html Process: 6290 ExecStartPre = /usr/share/mysql-8.0/mysql-systemd-start pre ( code = exited, status = 0 /S Main PID: 6325 ( mysqld ) Status: \"Server is operational\" Tasks: 37 ( limit: 1074 ) Memory: 331 .3M CGroup: /system.slice/mysql.service ` -6325 /usr/sbin/mysqld Oct 19 15 :55:54 htwfb5 systemd [ 1 ] : Starting MySQL Community Server... Oct 19 15 :55:55 htwfb5 systemd [ 1 ] : Started MySQL Community Server. Sie k\u00f6nnen die MySQL-Konfiguration noch absichern, um die Nutzerinnen zu zwingen, relativ starke Passw\u00f6rter zu verwenden. Dazu gibt es das Tool mysql_secure_installation , welches mit dem MySQL-Server geliefert wird. Sie k\u00f6nnen darin entscheiden, ob Sie eine Passwortvalidierung verwenden wollen und welche St\u00e4rke das Passwort haben soll. ob Sie anonyme User und das root -Login von au\u00dfen verbieten wollen und ob die test -Datenbank, auf die jeder Zugriff hat, gel\u00f6scht werden soll. Wir werden dieses Werkzeug jetzt (noch) nicht ausf\u00fchren, sp\u00e4testens aber, wenn wir mit einer Webanwendung auf dem Server in Produktion gehen. Sie k\u00f6nnen nun aber das MySQL-Administrationstool mysqladmin verwenden: mysqladmin -u root -p version -u root gibt an, dass Sie sich als root (MySQL- root ) anmelden und -p gibt an, dass das (MySQL-) root -Passwort eingegeben werden muss. F\u00fcr mysqladmin -u root -p version erhalten Sie ungef\u00e4hr folgende Ausgabe: root@htwfb5:~# mysqladmin -u root -p version Enter password: mysqladmin Ver 8 .0.22 for Linux on x86_64 ( MySQL Community Server - GPL ) Copyright ( c ) 2000 , 2020 , Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Server version 8 .0.22 Protocol version 10 Connection Localhost via UNIX socket UNIX socket /var/run/mysqld/mysqld.sock Uptime: 18 hours 7 min 43 sec Threads: 2 Questions: 8 Slow queries: 0 Opens: 127 Flush tables: 3 Open tables: 48 Queries per second avg: 0 .000 root@htwfb5:~# mysqladmin ist ein recht m\u00e4chtiges Tool. Insbesondere k\u00f6nnen Sie damit auch alle Nutzerinnen-Passw\u00f6rter \u00e4ndern (auch das von root ). Weitere Informationen zu mysqladmin finden Sie hier","title":"MySQL installieren"},{"location":"server/#phpmyadmin","text":"Wir k\u00f6nnten nun Datenbanken, Tabellen usw. \u00fcber die Kommandozeile des MySQl-Servers anlegen, \u00e4ndern und l\u00f6schen, aber wir verwenden daf\u00fcr lieber die grafische Weboberfl\u00e4che phpMyAdmin . Wir laden die aktuelle Version von phpMyAdmin zun\u00e4chst herunter: wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz Mit der Option Downloads geben wir an, dass der Download in einen Download-Ordner in dem aufrufenden Ordner erfolgt, d.h. in dem aufrufenden Ordner wird ein Ordner Downloads angelegt, falls er noch nicht existiert. Um die Signatur der heruntergeladenen Datei zu \u00fcberpr\u00fcfen, laden wir uns noch den GPG key f\u00fcr phpMyAdmin herunter (ebenfalls in das Downloads - Verzeichnis: wget -P Downloads https://files.phpmyadmin.net/phpmyadmin.keyring Wir wechseln in den Downloads - Ordner und importieren den keyring : root@htwfb5:~# cd Downloads/ root@htwfb5:~/Downloads# gpg --import phpmyadmin.keyring gpg: directory '/root/.gnupg' created gpg: keybox '/root/.gnupg/pubring.kbx' created gpg: /root/.gnupg/trustdb.gpg: trustdb created gpg: key 9C27B31342B7511D: public key \"Michal \\xc4\\x8ciha\\xc5\\x99 <michal@cihar.com>\" imported gpg: key FEFC65D181AF644A: public key \"Marc Delisle <marc@infomarc.info>\" imported gpg: key CE752F178259BD92: public key \"Isaac Bennetch <bennetch@gmail.com>\" imported gpg: key DA68AB39218AB947: public key \"phpMyAdmin Security Team <security@phpmyadmin.net>\" imported gpg: Total number processed: 4 gpg: imported: 4 Wir verlassen den Downloads -Ordner wieder und laden uns das .asc - File von phpmyadmin herunter. asc-Dateien sind ASCII-Skript-Dateien. Hier enth\u00e4lt es eine digitale Signatur als Text und kann von Ver- und Entschl\u00fcsselungsprogrammen, wie z.B. * Pretty Good Privacy (PGP)* gepr\u00fcft werden. root@htwfb5:~/Downloads# cd .. root@htwfb5:~# wget -P Downloads https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc --2020-10-20 10 :41:33-- https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz.asc Resolving www.phpmyadmin.net ( www.phpmyadmin.net ) ... 195 .181.175.48 Connecting to www.phpmyadmin.net ( www.phpmyadmin.net ) | 195 .181.175.48 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://files.phpmyadmin.net/phpMyAdmin/5.0.4/phpMyAdmin-5.0.4-all-languages.tar.gz.asc [ following ] --2020-10-20 10 :41:33-- https://files.phpmyadmin.net/phpMyAdmin/5.0.4/phpMyAdmin-5.0.4-all-languages.tar.gz.asc Resolving files.phpmyadmin.net ( files.phpmyadmin.net ) ... 195 .181.175.55 Connecting to files.phpmyadmin.net ( files.phpmyadmin.net ) | 195 .181.175.55 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 833 [ application/octet-stream ] Saving to: 'Downloads/phpMyAdmin-latest-all-languages.tar.gz.asc' phpMyAdmin-latest-all-languages 100 % [===================================================== > ] 833 --.-KB/s in 0s 2020 -10-20 10 :41:33 ( 12 .5 MB/s ) - 'Downloads/phpMyAdmin-latest-all-languages.tar.gz.asc' saved [ 833 /833 ] Nun k\u00f6nnen wir die phpmyadmin - Signatur \u00fcberpr\u00fcfen: root@htwfb5:~# cd Downloads root@htwfb5:~/Downloads# gpg --verify phpMyAdmin-latest-all-languages.tar.gz.asc gpg: assuming signed data in 'phpMyAdmin-latest-all-languages.tar.gz' gpg: Signature made Thu Oct 15 18 :10:40 2020 UTC gpg: using RSA key 3D06A59ECE730EB71B511C17CE752F178259BD92 gpg: Good signature from \"Isaac Bennetch <bennetch@gmail.com>\" [ unknown ] gpg: aka \"Isaac Bennetch <isaac@bennetch.org>\" [ unknown ] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 3D06 A59E CE73 0EB7 1B51 1C17 CE75 2F17 8259 BD92","title":"phpMyAdmin"},{"location":"server/#zugriff-auf-phpmyadmin-uber-den-webserver","text":"Wir haben phpMyAdmin nun heruntergeladen und den Download verifiziert. Jetzt wollen wir es f\u00fcr die Nutzung zur Verf\u00fcgung stellen. Damit es \u00fcber eine URL, wie z.B. http://htwfb5.f4.htw-berlin.de/phpmyadmin erreichbar ist, kopieren wir phpmyadmin in unser * DocumentRoot* . Das ist in Linux-Systemen typischerweise var/www/html . Wir wechesln in dieses Verzeichnis und erstellen dort den Ordner phpmyadmin : root@htwfb5:~/Downloads# cd /var/www/html root@htwfb5:/var/www/html# ls -la total 20 drwxr-xr-x 2 root root 4096 Oct 19 14 :51 . drwxr-xr-x 3 root root 4096 Oct 19 14 :51 .. -rw-r--r-- 1 root root 10701 Oct 19 14 :51 index.html root@htwfb5:/var/www/html# mkdir phpmyadmin root@htwfb5:/var/www/html# ls -la total 24 drwxr-xr-x 3 root root 4096 Oct 20 10 :53 . drwxr-xr-x 3 root root 4096 Oct 19 14 :51 .. -rw-r--r-- 1 root root 10701 Oct 19 14 :51 index.html drwxr-xr-x 2 root root 4096 Oct 20 10 :53 phpmyadmin Danach wechseln wir wieder in unseren Downloads -Ordner zur\u00fcck und entpacken dort unsere gezippte phpmyadmin -Datei direkt in den /var/www/html/phpmyadmin -Ordner: root@htwfb5:/var/www/html# cd /root/Downloads/ root@htwfb5:~/Downloads# tar xvf phpMyAdmin-latest-all-languages.tar.gz --strip-components = 1 -C /var/www/html/phpmyadmin Es erscheint eine sehr lange Liste von Dateien, die alle in den /var/www/html/phpmyadmin -Ordner entpackt werden. Jetzt k\u00f6nnte man die URL http://htwfb5.f4.htw-berlin.de/phpmyadmin/ bereits in den Browser eingeben und es k\u00e4me bereits das Anmeldeformular f\u00fcr phpmyadmin : Wir wollen uns aber zun\u00e4chst noch um eine sichere Anmeldung k\u00fcmmern. Dazu wechseln wir in das /var/www/html/phpmyadmin -Verzeichnis. Darin gibt es eine Datei config.sample.inc.php , welche eine Beispiel-Konfiguration f\u00fcr phpmyadmin enth\u00e4lt. Diese Datei kopieren wir in eine config.inc.php -Datei (diese wird erstellt): cd /var/www/html/phpmyadmin cp config.sample.inc.php config.inc.php Wir \u00f6ffnen diese config.inc.php mit einem Terminaleditor (z.B. nano oder vim ). IN Zeile 18 in dieser Datei gibt es folgenden Eintrag: $cfg [ 'blowfish_secret' ] = '' ; /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */ Wir ben\u00f6tigen eine Passphrase f\u00fcr den Blowfish-Verschl\u00fcsselungsalgorithmus , der f\u00fcr die Authentifikation mithilfe von Cookies verwendet wird. Diese Passphrase soll mindestens 32 Zeichen lang sein. Sie tragen diese Passphrase direkt in die Datei config.inc.php ein, deshalb m\u00fcssen Sie sich diese auch gar nicht merken, da sie dort ja jederzeit f\u00fcr Sie lesbar ist. Geben Sie also ein Satz dort ein, der aus mindestens 32 Zeichen besteht (kann Sonderzeichen, Leerzeichen usw. enthalten). Speichern Sie dann die Datei config.inc.php . Wir wechseln die Zugriffsrechte der Datei config.inc.php von 644 auf 660 (schreib- und lesbar durch User und Group, aber weder noch f\u00fcr die Welt): root@htwfb5:/var/www/html/phpmyadmin# chmod 660 config.inc.php root@htwfb5:/var/www/html/phpmyadmin# ls -la config.inc.php -rw-rw---- 1 root root 4590 Oct 20 11 :18 config.inc.php Wir haben das gesamte Verzeichnis phpmyadmin in /var/www/html als root angelegt. Dadurch ist root dort auch Owner. Das wollen wir \u00e4ndern. Rekursiv wird das gesamte Verzeichnis dem User (und der Group) www-data zugeordnet. chown -R www-data:www-data phpmyadmin Jetzt starten wir noch unseren Webserver neu und dann k\u00f6nnen wir phpmyadmin im Browser aufrufen: systemctl restart apache2 M\u00f6gliche Login-Probleme phpmyadmin eventuelle Fehlerausschrift: mysqli::real_connect(): The server requested authentication method unknown to the client [caching_sha2_password] und/oder mysqli::real_connect(): (HY000/2054): The server requested authentication method unknown to the client m\u00f6gliche L\u00f6sungen: PHP-Update auf 7.4 (davor hat mysqli caching_sha2 nicht unterst\u00fctzt) wenn das auch nicht hilft: per mysql -u root -p als root auf den MySQl-Server anmelden ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'hierDasRootPasswort'; dann wird wieder native Passwort gepr\u00fcft","title":"Zugriff auf phpMyAdmin \u00fcber den Webserver"},{"location":"server/#git","text":"Damit Sie Ihr Repository / Ihre Repositories auch auf den virtuellen Server \"pullen\" k\u00f6nnen, ben\u00f6tigen Sie noch git . Die Installation ist einfach: apt install git Beantworten Sie eventuelle Fragen einfach mit Enter . Testen Sie, ob die Installation erfolgreich war: git --version Es sollte etwas wie git version 2.20.1 ausgegeben werden.","title":"git"},{"location":"server/#verwendung-von-git","text":"Sie m\u00fcssen nun Ihr Remote Rpository (die entsprechende URL erhalten Sie bei GitHub oder GitLab oder welchen git-Host Sie auch verwenden) genau ein Mal clonen ( git clone RemoteRepositoryCloneURL ). Meistens wollen Sie genau in den Ordner /var/www/html clonen, da dort dann Ihr lokales Repository angelegt wird und Sie gleichzeitig im DocumentRoot sind. Wir zeigen hier einmal exemplarisch das Clonen des GitHub-Repositories mit der Clone_URL https://github.com/jfreiheit/projekte.git . Wir wechseln zun\u00e4chst in das Verzeichnis /var/www/html/ und clonen dorthin unser Repository. root@htwfb5:/# cd /var/www/html root@htwfb5:/var/www/html# git clone https://github.com/jfreiheit/projekte.git Cloning into 'projekte' ... remote: Enumerating objects: 12 , done . remote: Counting objects: 100 % ( 12 /12 ) , done . remote: Compressing objects: 100 % ( 11 /11 ) , done . remote: Total 12 ( delta 1 ) , reused 11 ( delta 0 ) , pack-reused 0 Unpacking objects: 100 % ( 12 /12 ) , done . root@htwfb5:/var/www/html# Es entsteht ein Ordner projekte innerhalb von /var/www/html . Um \u00fcber den Browser auf diesen Ordner zuzugreifen, m\u00fcssen Sie jetzt nur noch die URL http://htwfb5.f4.htw-berlin.de/projekte in Ihrem Browser aufrufen. Nachdem Sie einmal geclont haben, m\u00fcssen Sie stets nur noch innerhalb des projekte -Ordners ( cd /var/www/html/projekte ) aufrufen: git pull , um sich die neueste Version Ihres Repositories auf den virtuellen Server zu ziehen.","title":"Verwendung von git"}]}